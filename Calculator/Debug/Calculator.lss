
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001146  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001146  000011da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000068  00800088  00800088  00001202  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001202  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001234  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000192e  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000906  00000000  00000000  00002cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cac  00000000  00000000  000035bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00004268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000680  00000000  00000000  0000455c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011ac  00000000  00000000  00004bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005d88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 40 04 	call	0x880	; 0x880 <main>
      8a:	0c 94 a1 08 	jmp	0x1142	; 0x1142 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <KPD_u8GetPressedKey>:

#include "../Lib/STD_types.h"
#include "../mcal/dio.h"
#include "Keypad.h"

u8 KPD_u8GetPressedKey(){
      92:	af 92       	push	r10
      94:	bf 92       	push	r11
      96:	cf 92       	push	r12
      98:	df 92       	push	r13
      9a:	ef 92       	push	r14
      9c:	ff 92       	push	r15
      9e:	0f 93       	push	r16
      a0:	1f 93       	push	r17
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	cd b7       	in	r28, 0x3d	; 61
      a8:	de b7       	in	r29, 0x3e	; 62
      aa:	68 97       	sbiw	r28, 0x18	; 24
      ac:	0f b6       	in	r0, 0x3f	; 63
      ae:	f8 94       	cli
      b0:	de bf       	out	0x3e, r29	; 62
      b2:	0f be       	out	0x3f, r0	; 63
      b4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
      b6:	80 e1       	ldi	r24, 0x10	; 16
      b8:	e5 e6       	ldi	r30, 0x65	; 101
      ba:	f0 e0       	ldi	r31, 0x00	; 0
      bc:	de 01       	movw	r26, r28
      be:	11 96       	adiw	r26, 0x01	; 1
      c0:	01 90       	ld	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	8a 95       	dec	r24
      c6:	e1 f7       	brne	.-8      	; 0xc0 <KPD_u8GetPressedKey+0x2e>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
      c8:	87 e0       	ldi	r24, 0x07	; 7
      ca:	89 8b       	std	Y+17, r24	; 0x11
      cc:	86 e0       	ldi	r24, 0x06	; 6
      ce:	8a 8b       	std	Y+18, r24	; 0x12
      d0:	95 e0       	ldi	r25, 0x05	; 5
      d2:	9b 8b       	std	Y+19, r25	; 0x13
      d4:	83 e0       	ldi	r24, 0x03	; 3
      d6:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
      d8:	9d 8b       	std	Y+21, r25	; 0x15
      da:	94 e0       	ldi	r25, 0x04	; 4
      dc:	9e 8b       	std	Y+22, r25	; 0x16
      de:	8f 8b       	std	Y+23, r24	; 0x17
      e0:	82 e0       	ldi	r24, 0x02	; 2
      e2:	88 8f       	std	Y+24, r24	; 0x18
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
      e4:	b1 2c       	mov	r11, r1
      e6:	43 c0       	rjmp	.+134    	; 0x16e <KPD_u8GetPressedKey+0xdc>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
      e8:	cb 2c       	mov	r12, r11
      ea:	d1 2c       	mov	r13, r1
      ec:	e1 e1       	ldi	r30, 0x11	; 17
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	ec 0f       	add	r30, r28
      f2:	fd 1f       	adc	r31, r29
      f4:	ec 0d       	add	r30, r12
      f6:	fd 1d       	adc	r31, r13
      f8:	a0 80       	ld	r10, Z
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	6a 2d       	mov	r22, r10
      fe:	84 e0       	ldi	r24, 0x04	; 4
     100:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
     104:	10 e0       	ldi	r17, 0x00	; 0
     106:	2b c0       	rjmp	.+86     	; 0x15e <KPD_u8GetPressedKey+0xcc>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
     108:	e1 2e       	mov	r14, r17
     10a:	f1 2c       	mov	r15, r1
     10c:	e5 e1       	ldi	r30, 0x15	; 21
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	ec 0f       	add	r30, r28
     112:	fd 1f       	adc	r31, r29
     114:	ee 0d       	add	r30, r14
     116:	ff 1d       	adc	r31, r15
     118:	00 81       	ld	r16, Z
     11a:	60 2f       	mov	r22, r16
     11c:	83 e0       	ldi	r24, 0x03	; 3
     11e:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_u8GetPinValue>
     122:	81 11       	cpse	r24, r1
     124:	1b c0       	rjmp	.+54     	; 0x15c <KPD_u8GetPressedKey+0xca>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
     126:	ee 0c       	add	r14, r14
     128:	ff 1c       	adc	r15, r15
     12a:	ee 0c       	add	r14, r14
     12c:	ff 1c       	adc	r15, r15
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	8c 0f       	add	r24, r28
     134:	9d 1f       	adc	r25, r29
     136:	e8 0e       	add	r14, r24
     138:	f9 1e       	adc	r15, r25
     13a:	f7 01       	movw	r30, r14
     13c:	ec 0d       	add	r30, r12
     13e:	fd 1d       	adc	r31, r13
     140:	10 81       	ld	r17, Z
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
     142:	60 2f       	mov	r22, r16
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	0e 94 a8 05 	call	0xb50	; 0xb50 <DIO_u8GetPinValue>
     14a:	88 23       	and	r24, r24
     14c:	d1 f3       	breq	.-12     	; 0x142 <KPD_u8GetPressedKey+0xb0>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
     14e:	41 e0       	ldi	r20, 0x01	; 1
     150:	6a 2d       	mov	r22, r10
     152:	84 e0       	ldi	r24, 0x04	; 4
     154:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
				return Local_u8PressedKey;
     158:	81 2f       	mov	r24, r17
     15a:	0e c0       	rjmp	.+28     	; 0x178 <KPD_u8GetPressedKey+0xe6>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
     15c:	1f 5f       	subi	r17, 0xFF	; 255
     15e:	14 30       	cpi	r17, 0x04	; 4
     160:	98 f2       	brcs	.-90     	; 0x108 <KPD_u8GetPressedKey+0x76>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
     162:	41 e0       	ldi	r20, 0x01	; 1
     164:	6a 2d       	mov	r22, r10
     166:	84 e0       	ldi	r24, 0x04	; 4
     168:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
     16c:	b3 94       	inc	r11
     16e:	93 e0       	ldi	r25, 0x03	; 3
     170:	9b 15       	cp	r25, r11
     172:	08 f0       	brcs	.+2      	; 0x176 <KPD_u8GetPressedKey+0xe4>
     174:	b9 cf       	rjmp	.-142    	; 0xe8 <KPD_u8GetPressedKey+0x56>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
     176:	8f ef       	ldi	r24, 0xFF	; 255
}
     178:	68 96       	adiw	r28, 0x18	; 24
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	df 91       	pop	r29
     186:	cf 91       	pop	r28
     188:	1f 91       	pop	r17
     18a:	0f 91       	pop	r16
     18c:	ff 90       	pop	r15
     18e:	ef 90       	pop	r14
     190:	df 90       	pop	r13
     192:	cf 90       	pop	r12
     194:	bf 90       	pop	r11
     196:	af 90       	pop	r10
     198:	08 95       	ret

0000019a <LCD_voidSendCommand>:
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
	_delay_ms(1);
}

void LCD_voidSendCommand(u8 command){
     19a:	cf 93       	push	r28
     19c:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
     19e:	40 e0       	ldi	r20, 0x00	; 0
     1a0:	63 e0       	ldi	r22, 0x03	; 3
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
     1a8:	41 e0       	ldi	r20, 0x01	; 1
     1aa:	62 e0       	ldi	r22, 0x02	; 2
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(command, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(command, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(command, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(command, 3));
	#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
     1b2:	c4 fb       	bst	r28, 4
     1b4:	44 27       	eor	r20, r20
     1b6:	40 f9       	bld	r20, 0
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	82 e0       	ldi	r24, 0x02	; 2
     1bc:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
     1c0:	c5 fb       	bst	r28, 5
     1c2:	44 27       	eor	r20, r20
     1c4:	40 f9       	bld	r20, 0
     1c6:	61 e0       	ldi	r22, 0x01	; 1
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
     1ce:	c6 fb       	bst	r28, 6
     1d0:	44 27       	eor	r20, r20
     1d2:	40 f9       	bld	r20, 0
     1d4:	62 e0       	ldi	r22, 0x02	; 2
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
     1dc:	4c 2f       	mov	r20, r28
     1de:	44 1f       	adc	r20, r20
     1e0:	44 27       	eor	r20, r20
     1e2:	44 1f       	adc	r20, r20
     1e4:	64 e0       	ldi	r22, 0x04	; 4
     1e6:	82 e0       	ldi	r24, 0x02	; 2
     1e8:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	62 e0       	ldi	r22, 0x02	; 2
     1f0:	81 e0       	ldi	r24, 0x01	; 1
     1f2:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>

	#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
     1f6:	41 e0       	ldi	r20, 0x01	; 1
     1f8:	62 e0       	ldi	r22, 0x02	; 2
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 0));
     200:	4c 2f       	mov	r20, r28
     202:	41 70       	andi	r20, 0x01	; 1
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	82 e0       	ldi	r24, 0x02	; 2
     208:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 1));
     20c:	c1 fb       	bst	r28, 1
     20e:	44 27       	eor	r20, r20
     210:	40 f9       	bld	r20, 0
     212:	61 e0       	ldi	r22, 0x01	; 1
     214:	82 e0       	ldi	r24, 0x02	; 2
     216:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 2));
     21a:	c2 fb       	bst	r28, 2
     21c:	44 27       	eor	r20, r20
     21e:	40 f9       	bld	r20, 0
     220:	62 e0       	ldi	r22, 0x02	; 2
     222:	82 e0       	ldi	r24, 0x02	; 2
     224:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 3));
     228:	c3 fb       	bst	r28, 3
     22a:	44 27       	eor	r20, r20
     22c:	40 f9       	bld	r20, 0
     22e:	64 e0       	ldi	r22, 0x04	; 4
     230:	82 e0       	ldi	r24, 0x02	; 2
     232:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	62 e0       	ldi	r22, 0x02	; 2
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     240:	81 ee       	ldi	r24, 0xE1	; 225
     242:	94 e0       	ldi	r25, 0x04	; 4
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <LCD_voidSendCommand+0xaa>
     248:	00 c0       	rjmp	.+0      	; 0x24a <LCD_voidSendCommand+0xb0>
     24a:	00 00       	nop
	#endif
	_delay_ms(5);
}
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
     250:	cf 93       	push	r28
     252:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, Low); //RS = 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	63 e0       	ldi	r22, 0x03	; 3
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
     25e:	41 e0       	ldi	r20, 0x01	; 1
     260:	62 e0       	ldi	r22, 0x02	; 2
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(command, 4));
     268:	c4 fb       	bst	r28, 4
     26a:	44 27       	eor	r20, r20
     26c:	40 f9       	bld	r20, 0
     26e:	60 e0       	ldi	r22, 0x00	; 0
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(command, 5));
     276:	c5 fb       	bst	r28, 5
     278:	44 27       	eor	r20, r20
     27a:	40 f9       	bld	r20, 0
     27c:	61 e0       	ldi	r22, 0x01	; 1
     27e:	82 e0       	ldi	r24, 0x02	; 2
     280:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(command, 6));
     284:	c6 fb       	bst	r28, 6
     286:	44 27       	eor	r20, r20
     288:	40 f9       	bld	r20, 0
     28a:	62 e0       	ldi	r22, 0x02	; 2
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
     292:	4c 2f       	mov	r20, r28
     294:	44 1f       	adc	r20, r20
     296:	44 27       	eor	r20, r20
     298:	44 1f       	adc	r20, r20
     29a:	64 e0       	ldi	r22, 0x04	; 4
     29c:	82 e0       	ldi	r24, 0x02	; 2
     29e:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	62 e0       	ldi	r22, 0x02	; 2
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
     2ac:	81 ee       	ldi	r24, 0xE1	; 225
     2ae:	94 e0       	ldi	r25, 0x04	; 4
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_voidSendInitCommand+0x60>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_voidSendInitCommand+0x66>
     2b6:	00 00       	nop
	_delay_ms(5);
}
     2b8:	cf 91       	pop	r28
     2ba:	08 95       	ret

000002bc <LCD_voidInit>:
     2bc:	8d e2       	ldi	r24, 0x2D	; 45
     2be:	92 e2       	ldi	r25, 0x22	; 34
     2c0:	01 97       	sbiw	r24, 0x01	; 1
     2c2:	f1 f7       	brne	.-4      	; 0x2c0 <LCD_voidInit+0x4>
     2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <LCD_voidInit+0xa>
     2c6:	00 00       	nop


void LCD_voidInit(){
	_delay_ms(35);
	#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
     2c8:	80 e3       	ldi	r24, 0x30	; 48
     2ca:	0e 94 28 01 	call	0x250	; 0x250 <LCD_voidSendInitCommand>
     2ce:	81 ee       	ldi	r24, 0xE1	; 225
     2d0:	94 e0       	ldi	r25, 0x04	; 4
     2d2:	01 97       	sbiw	r24, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_voidInit+0x16>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_voidInit+0x1c>
     2d8:	00 00       	nop
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
     2da:	80 e3       	ldi	r24, 0x30	; 48
     2dc:	0e 94 28 01 	call	0x250	; 0x250 <LCD_voidSendInitCommand>
     2e0:	89 ef       	ldi	r24, 0xF9	; 249
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	01 97       	sbiw	r24, 0x01	; 1
     2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_voidInit+0x28>
     2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_voidInit+0x2e>
     2ea:	00 00       	nop
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
     2ec:	80 e3       	ldi	r24, 0x30	; 48
     2ee:	0e 94 28 01 	call	0x250	; 0x250 <LCD_voidSendInitCommand>
     2f2:	89 ef       	ldi	r24, 0xF9	; 249
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	01 97       	sbiw	r24, 0x01	; 1
     2f8:	f1 f7       	brne	.-4      	; 0x2f6 <LCD_voidInit+0x3a>
     2fa:	00 c0       	rjmp	.+0      	; 0x2fc <LCD_voidInit+0x40>
     2fc:	00 00       	nop
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
     2fe:	80 e2       	ldi	r24, 0x20	; 32
     300:	0e 94 28 01 	call	0x250	; 0x250 <LCD_voidSendInitCommand>
     304:	89 ef       	ldi	r24, 0xF9	; 249
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	f1 f7       	brne	.-4      	; 0x308 <LCD_voidInit+0x4c>
     30c:	00 c0       	rjmp	.+0      	; 0x30e <LCD_voidInit+0x52>
     30e:	00 00       	nop
	_delay_ms(1);
	#endif
	LCD_voidSendCommand(LCD_FunctionSet);
     310:	88 e2       	ldi	r24, 0x28	; 40
     312:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_voidSendCommand>
     316:	89 ef       	ldi	r24, 0xF9	; 249
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_voidInit+0x5e>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_voidInit+0x64>
     320:	00 00       	nop
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
     322:	88 e0       	ldi	r24, 0x08	; 8
     324:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_voidSendCommand>
     328:	89 ef       	ldi	r24, 0xF9	; 249
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	01 97       	sbiw	r24, 0x01	; 1
     32e:	f1 f7       	brne	.-4      	; 0x32c <LCD_voidInit+0x70>
     330:	00 c0       	rjmp	.+0      	; 0x332 <LCD_voidInit+0x76>
     332:	00 00       	nop
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_voidSendCommand>
     33a:	81 ee       	ldi	r24, 0xE1	; 225
     33c:	94 e0       	ldi	r25, 0x04	; 4
     33e:	01 97       	sbiw	r24, 0x01	; 1
     340:	f1 f7       	brne	.-4      	; 0x33e <LCD_voidInit+0x82>
     342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_voidInit+0x88>
     344:	00 00       	nop
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
     346:	8c e0       	ldi	r24, 0x0C	; 12
     348:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_voidSendCommand>
     34c:	89 ef       	ldi	r24, 0xF9	; 249
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	01 97       	sbiw	r24, 0x01	; 1
     352:	f1 f7       	brne	.-4      	; 0x350 <LCD_voidInit+0x94>
     354:	00 c0       	rjmp	.+0      	; 0x356 <LCD_voidInit+0x9a>
     356:	00 00       	nop
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
     358:	86 e0       	ldi	r24, 0x06	; 6
     35a:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_voidSendCommand>
     35e:	89 ef       	ldi	r24, 0xF9	; 249
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <LCD_voidInit+0xa6>
     366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_voidInit+0xac>
     368:	00 00       	nop
     36a:	08 95       	ret

0000036c <LCD_voidWriteChar>:
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(command, 7));
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
	_delay_ms(5);
}

void LCD_voidWriteChar(u8 data){
     36c:	cf 93       	push	r28
     36e:	c8 2f       	mov	r28, r24
	DIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS, High); //RS = 1
     370:	41 e0       	ldi	r20, 0x01	; 1
     372:	63 e0       	ldi	r22, 0x03	; 3
     374:	81 e0       	ldi	r24, 0x01	; 1
     376:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
     37a:	41 e0       	ldi	r20, 0x01	; 1
     37c:	62 e0       	ldi	r22, 0x02	; 2
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D0, GET_BIT(data, 0));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D1, GET_BIT(data, 1));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D2, GET_BIT(data, 2));
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D3, GET_BIT(data, 3));
	#endif
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 4));
     384:	c4 fb       	bst	r28, 4
     386:	44 27       	eor	r20, r20
     388:	40 f9       	bld	r20, 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	82 e0       	ldi	r24, 0x02	; 2
     38e:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 5));
     392:	c5 fb       	bst	r28, 5
     394:	44 27       	eor	r20, r20
     396:	40 f9       	bld	r20, 0
     398:	61 e0       	ldi	r22, 0x01	; 1
     39a:	82 e0       	ldi	r24, 0x02	; 2
     39c:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 6));
     3a0:	c6 fb       	bst	r28, 6
     3a2:	44 27       	eor	r20, r20
     3a4:	40 f9       	bld	r20, 0
     3a6:	62 e0       	ldi	r22, 0x02	; 2
     3a8:	82 e0       	ldi	r24, 0x02	; 2
     3aa:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 7));
     3ae:	4c 2f       	mov	r20, r28
     3b0:	44 1f       	adc	r20, r20
     3b2:	44 27       	eor	r20, r20
     3b4:	44 1f       	adc	r20, r20
     3b6:	64 e0       	ldi	r22, 0x04	; 4
     3b8:	82 e0       	ldi	r24, 0x02	; 2
     3ba:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	62 e0       	ldi	r22, 0x02	; 2
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>

	#if LCD_BITS == LCD_4_BIT_MODE
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, High); //EN = 1
     3c8:	41 e0       	ldi	r20, 0x01	; 1
     3ca:	62 e0       	ldi	r22, 0x02	; 2
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4, GET_BIT(data, 0));
     3d2:	4c 2f       	mov	r20, r28
     3d4:	41 70       	andi	r20, 0x01	; 1
     3d6:	60 e0       	ldi	r22, 0x00	; 0
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5, GET_BIT(data, 1));
     3de:	c1 fb       	bst	r28, 1
     3e0:	44 27       	eor	r20, r20
     3e2:	40 f9       	bld	r20, 0
     3e4:	61 e0       	ldi	r22, 0x01	; 1
     3e6:	82 e0       	ldi	r24, 0x02	; 2
     3e8:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6, GET_BIT(data, 2));
     3ec:	c2 fb       	bst	r28, 2
     3ee:	44 27       	eor	r20, r20
     3f0:	40 f9       	bld	r20, 0
     3f2:	62 e0       	ldi	r22, 0x02	; 2
     3f4:	82 e0       	ldi	r24, 0x02	; 2
     3f6:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7, GET_BIT(data, 3));
     3fa:	c3 fb       	bst	r28, 3
     3fc:	44 27       	eor	r20, r20
     3fe:	40 f9       	bld	r20, 0
     400:	64 e0       	ldi	r22, 0x04	; 4
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN, Low); //EN = 0
     408:	40 e0       	ldi	r20, 0x00	; 0
     40a:	62 e0       	ldi	r22, 0x02	; 2
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	0e 94 2a 05 	call	0xa54	; 0xa54 <DIO_voidSetPinValue>
     412:	81 ee       	ldi	r24, 0xE1	; 225
     414:	94 e0       	ldi	r25, 0x04	; 4
     416:	01 97       	sbiw	r24, 0x01	; 1
     418:	f1 f7       	brne	.-4      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     41c:	00 00       	nop
	#endif
	_delay_ms(5);
}
     41e:	cf 91       	pop	r28
     420:	08 95       	ret

00000422 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
     422:	0f 93       	push	r16
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	8c 01       	movw	r16, r24
	u8 index = 0;
     42a:	c0 e0       	ldi	r28, 0x00	; 0
	while(Local_Data[index] != '\0'){
     42c:	03 c0       	rjmp	.+6      	; 0x434 <LCD_voidWriteString+0x12>
		LCD_voidWriteChar(Local_Data[index]);
     42e:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_voidWriteChar>
		index++;
     432:	cf 5f       	subi	r28, 0xFF	; 255
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
     434:	f8 01       	movw	r30, r16
     436:	ec 0f       	add	r30, r28
     438:	f1 1d       	adc	r31, r1
     43a:	80 81       	ld	r24, Z
     43c:	81 11       	cpse	r24, r1
     43e:	f7 cf       	rjmp	.-18     	; 0x42e <LCD_voidWriteString+0xc>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
     440:	cf 91       	pop	r28
     442:	1f 91       	pop	r17
     444:	0f 91       	pop	r16
     446:	08 95       	ret

00000448 <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
     448:	8f 92       	push	r8
     44a:	9f 92       	push	r9
     44c:	af 92       	push	r10
     44e:	bf 92       	push	r11
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	0f 93       	push	r16
     45a:	1f 93       	push	r17
     45c:	cf 93       	push	r28
     45e:	df 93       	push	r29
     460:	8a 01       	movw	r16, r20
	u32 flag = 0;
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
	str[i--] = '\0';
     462:	fa 01       	movw	r30, r20
     464:	13 8a       	std	Z+19, r1	; 0x13
	if (anInteger < 0) {
     466:	99 23       	and	r25, r25
     468:	64 f4       	brge	.+24     	; 0x482 <IntToString+0x3a>
		flag = 1;
		anInteger = -anInteger;
     46a:	90 95       	com	r25
     46c:	80 95       	com	r24
     46e:	70 95       	com	r23
     470:	61 95       	neg	r22
     472:	7f 4f       	sbci	r23, 0xFF	; 255
     474:	8f 4f       	sbci	r24, 0xFF	; 255
     476:	9f 4f       	sbci	r25, 0xFF	; 255
u8* IntToString(s32 anInteger,u8 *str){
	u32 flag = 0;
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
     478:	81 2c       	mov	r8, r1
     47a:	91 2c       	mov	r9, r1
     47c:	54 01       	movw	r10, r8
     47e:	83 94       	inc	r8
     480:	03 c0       	rjmp	.+6      	; 0x488 <IntToString+0x40>
		index++;
	}
}

u8* IntToString(s32 anInteger,u8 *str){
	u32 flag = 0;
     482:	81 2c       	mov	r8, r1
     484:	91 2c       	mov	r9, r1
     486:	54 01       	movw	r10, r8
     488:	0f 2e       	mov	r0, r31
     48a:	f2 e1       	ldi	r31, 0x12	; 18
     48c:	cf 2e       	mov	r12, r31
     48e:	d1 2c       	mov	r13, r1
     490:	e1 2c       	mov	r14, r1
     492:	f1 2c       	mov	r15, r1
     494:	f0 2d       	mov	r31, r0
     496:	14 c0       	rjmp	.+40     	; 0x4c0 <IntToString+0x78>
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
     498:	e8 01       	movw	r28, r16
     49a:	cc 0d       	add	r28, r12
     49c:	dd 1d       	adc	r29, r13
     49e:	2a e0       	ldi	r18, 0x0A	; 10
     4a0:	30 e0       	ldi	r19, 0x00	; 0
     4a2:	40 e0       	ldi	r20, 0x00	; 0
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <__divmodsi4>
     4aa:	60 5d       	subi	r22, 0xD0	; 208
     4ac:	68 83       	st	Y, r22
		anInteger /= 10;
     4ae:	62 2f       	mov	r22, r18
     4b0:	73 2f       	mov	r23, r19
     4b2:	84 2f       	mov	r24, r20
     4b4:	95 2f       	mov	r25, r21
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
     4b6:	f1 e0       	ldi	r31, 0x01	; 1
     4b8:	cf 1a       	sub	r12, r31
     4ba:	d1 08       	sbc	r13, r1
     4bc:	e1 08       	sbc	r14, r1
     4be:	f1 08       	sbc	r15, r1
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
     4c0:	61 15       	cp	r22, r1
     4c2:	71 05       	cpc	r23, r1
     4c4:	81 05       	cpc	r24, r1
     4c6:	91 05       	cpc	r25, r1
     4c8:	39 f7       	brne	.-50     	; 0x498 <IntToString+0x50>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
     4ca:	89 28       	or	r8, r9
     4cc:	8a 28       	or	r8, r10
     4ce:	8b 28       	or	r8, r11
     4d0:	51 f0       	breq	.+20     	; 0x4e6 <IntToString+0x9e>
		str[i--] = '-';
     4d2:	f8 01       	movw	r30, r16
     4d4:	ec 0d       	add	r30, r12
     4d6:	fd 1d       	adc	r31, r13
     4d8:	8d e2       	ldi	r24, 0x2D	; 45
     4da:	80 83       	st	Z, r24
     4dc:	21 e0       	ldi	r18, 0x01	; 1
     4de:	c2 1a       	sub	r12, r18
     4e0:	d1 08       	sbc	r13, r1
     4e2:	e1 08       	sbc	r14, r1
     4e4:	f1 08       	sbc	r15, r1
	}
	i++;
     4e6:	8f ef       	ldi	r24, 0xFF	; 255
     4e8:	c8 1a       	sub	r12, r24
     4ea:	d8 0a       	sbc	r13, r24
     4ec:	e8 0a       	sbc	r14, r24
     4ee:	f8 0a       	sbc	r15, r24
	return str + i;
     4f0:	c8 01       	movw	r24, r16
     4f2:	8c 0d       	add	r24, r12
     4f4:	9d 1d       	adc	r25, r13

}
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	1f 91       	pop	r17
     4fc:	0f 91       	pop	r16
     4fe:	ff 90       	pop	r15
     500:	ef 90       	pop	r14
     502:	df 90       	pop	r13
     504:	cf 90       	pop	r12
     506:	bf 90       	pop	r11
     508:	af 90       	pop	r10
     50a:	9f 90       	pop	r9
     50c:	8f 90       	pop	r8
     50e:	08 95       	ret

00000510 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	64 97       	sbiw	r28, 0x14	; 20
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
	if(Data){
     524:	61 15       	cp	r22, r1
     526:	71 05       	cpc	r23, r1
     528:	81 05       	cpc	r24, r1
     52a:	91 05       	cpc	r25, r1
     52c:	41 f0       	breq	.+16     	; 0x53e <LCD_voidWriteIntData+0x2e>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
     52e:	ae 01       	movw	r20, r28
     530:	4f 5f       	subi	r20, 0xFF	; 255
     532:	5f 4f       	sbci	r21, 0xFF	; 255
     534:	0e 94 24 02 	call	0x448	; 0x448 <IntToString>
		LCD_voidWriteString(str);
     538:	0e 94 11 02 	call	0x422	; 0x422 <LCD_voidWriteString>
     53c:	03 c0       	rjmp	.+6      	; 0x544 <LCD_voidWriteIntData+0x34>
	}
	else{
		LCD_voidWriteChar('0');
     53e:	80 e3       	ldi	r24, 0x30	; 48
     540:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_voidWriteChar>
	}
}
     544:	64 96       	adiw	r28, 0x14	; 20
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	df 91       	pop	r29
     552:	cf 91       	pop	r28
     554:	08 95       	ret

00000556 <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
     556:	4f 92       	push	r4
     558:	5f 92       	push	r5
     55a:	6f 92       	push	r6
     55c:	7f 92       	push	r7
     55e:	af 92       	push	r10
     560:	bf 92       	push	r11
     562:	cf 92       	push	r12
     564:	df 92       	push	r13
     566:	ef 92       	push	r14
     568:	ff 92       	push	r15
     56a:	0f 93       	push	r16
     56c:	1f 93       	push	r17
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	64 97       	sbiw	r28, 0x14	; 20
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	48 ec       	ldi	r20, 0xC8	; 200
     588:	52 e4       	ldi	r21, 0x42	; 66
     58a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__mulsf3>
     58e:	0e 94 06 07 	call	0xe0c	; 0xe0c <__fixsfsi>
	u8 *str = IntToString(number,arr);
     592:	ae 01       	movw	r20, r28
     594:	4f 5f       	subi	r20, 0xFF	; 255
     596:	5f 4f       	sbci	r21, 0xFF	; 255
     598:	0e 94 24 02 	call	0x448	; 0x448 <IntToString>
     59c:	8c 01       	movw	r16, r24
	u32 counter=0;
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	dc 01       	movw	r26, r24
	u32 counter2=0;
	while(str[counter] != '\0'){
     5a4:	03 c0       	rjmp	.+6      	; 0x5ac <LCD_voidWriteFloatData+0x56>
		counter++;
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	a1 1d       	adc	r26, r1
     5aa:	b1 1d       	adc	r27, r1
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
     5ac:	f8 01       	movw	r30, r16
     5ae:	e8 0f       	add	r30, r24
     5b0:	f9 1f       	adc	r31, r25
     5b2:	20 81       	ld	r18, Z
     5b4:	21 11       	cpse	r18, r1
     5b6:	f7 cf       	rjmp	.-18     	; 0x5a6 <LCD_voidWriteFloatData+0x50>
		counter++;
	}
	counter -= 2;
     5b8:	6c 01       	movw	r12, r24
     5ba:	7d 01       	movw	r14, r26
     5bc:	22 e0       	ldi	r18, 0x02	; 2
     5be:	c2 1a       	sub	r12, r18
     5c0:	d1 08       	sbc	r13, r1
     5c2:	e1 08       	sbc	r14, r1
     5c4:	f1 08       	sbc	r15, r1
	if(!counter){
     5c6:	19 f4       	brne	.+6      	; 0x5ce <LCD_voidWriteFloatData+0x78>
		LCD_voidWriteChar('0');
     5c8:	80 e3       	ldi	r24, 0x30	; 48
     5ca:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_voidWriteChar>

void LCD_voidWriteFloatData(f32 Data){
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
     5ce:	41 2c       	mov	r4, r1
     5d0:	51 2c       	mov	r5, r1
     5d2:	32 01       	movw	r6, r4
     5d4:	11 c0       	rjmp	.+34     	; 0x5f8 <LCD_voidWriteFloatData+0xa2>
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
     5d6:	4c 14       	cp	r4, r12
     5d8:	5d 04       	cpc	r5, r13
     5da:	6e 04       	cpc	r6, r14
     5dc:	7f 04       	cpc	r7, r15
     5de:	19 f4       	brne	.+6      	; 0x5e6 <LCD_voidWriteFloatData+0x90>
			LCD_voidWriteChar('.');
     5e0:	8e e2       	ldi	r24, 0x2E	; 46
     5e2:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
     5e6:	f5 01       	movw	r30, r10
     5e8:	80 81       	ld	r24, Z
     5ea:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_voidWriteChar>
		counter2++;
     5ee:	ff ef       	ldi	r31, 0xFF	; 255
     5f0:	4f 1a       	sub	r4, r31
     5f2:	5f 0a       	sbc	r5, r31
     5f4:	6f 0a       	sbc	r6, r31
     5f6:	7f 0a       	sbc	r7, r31
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
     5f8:	58 01       	movw	r10, r16
     5fa:	a4 0c       	add	r10, r4
     5fc:	b5 1c       	adc	r11, r5
     5fe:	f5 01       	movw	r30, r10
     600:	80 81       	ld	r24, Z
     602:	81 11       	cpse	r24, r1
     604:	e8 cf       	rjmp	.-48     	; 0x5d6 <LCD_voidWriteFloatData+0x80>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
     606:	64 96       	adiw	r28, 0x14	; 20
     608:	0f b6       	in	r0, 0x3f	; 63
     60a:	f8 94       	cli
     60c:	de bf       	out	0x3e, r29	; 62
     60e:	0f be       	out	0x3f, r0	; 63
     610:	cd bf       	out	0x3d, r28	; 61
     612:	df 91       	pop	r29
     614:	cf 91       	pop	r28
     616:	1f 91       	pop	r17
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	df 90       	pop	r13
     620:	cf 90       	pop	r12
     622:	bf 90       	pop	r11
     624:	af 90       	pop	r10
     626:	7f 90       	pop	r7
     628:	6f 90       	pop	r6
     62a:	5f 90       	pop	r5
     62c:	4f 90       	pop	r4
     62e:	08 95       	ret

00000630 <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
	u8 Local_Address = FIRST_LINE_ADDRESS;

	if(X_Position == 0){
     630:	81 11       	cpse	r24, r1
     632:	03 c0       	rjmp	.+6      	; 0x63a <LCD_voidGoToPosition+0xa>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
     634:	80 e8       	ldi	r24, 0x80	; 128
     636:	86 0f       	add	r24, r22
     638:	10 c0       	rjmp	.+32     	; 0x65a <LCD_voidGoToPosition+0x2a>
	}
	else if(X_Position == 1){
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	19 f4       	brne	.+6      	; 0x644 <LCD_voidGoToPosition+0x14>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
     63e:	80 ec       	ldi	r24, 0xC0	; 192
     640:	86 0f       	add	r24, r22
     642:	0b c0       	rjmp	.+22     	; 0x65a <LCD_voidGoToPosition+0x2a>
	}
	else if(X_Position == 2){
     644:	82 30       	cpi	r24, 0x02	; 2
     646:	19 f4       	brne	.+6      	; 0x64e <LCD_voidGoToPosition+0x1e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
     648:	84 e9       	ldi	r24, 0x94	; 148
     64a:	86 0f       	add	r24, r22
     64c:	06 c0       	rjmp	.+12     	; 0x65a <LCD_voidGoToPosition+0x2a>
	}
	else if(X_Position == 3){
     64e:	83 30       	cpi	r24, 0x03	; 3
     650:	19 f4       	brne	.+6      	; 0x658 <LCD_voidGoToPosition+0x28>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
     652:	84 ed       	ldi	r24, 0xD4	; 212
     654:	86 0f       	add	r24, r22
     656:	01 c0       	rjmp	.+2      	; 0x65a <LCD_voidGoToPosition+0x2a>
		counter2++;
	}
}

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
	u8 Local_Address = FIRST_LINE_ADDRESS;
     658:	80 e8       	ldi	r24, 0x80	; 128
	else if(X_Position == 3){
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
	LCD_voidSendCommand(Local_Address);
     65a:	80 68       	ori	r24, 0x80	; 128
     65c:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_voidSendCommand>
     660:	08 95       	ret

00000662 <CheckPriority>:
		}
	}
	return 0;
}

void CheckPriority(){
     662:	cf 92       	push	r12
     664:	df 92       	push	r13
     666:	ef 92       	push	r14
     668:	ff 92       	push	r15
     66a:	cf 93       	push	r28
	if(oldOperation == '/'){
     66c:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <oldOperation>
     670:	8f 32       	cpi	r24, 0x2F	; 47
     672:	09 f0       	breq	.+2      	; 0x676 <CheckPriority+0x14>
     674:	4b c0       	rjmp	.+150    	; 0x70c <CheckPriority+0xaa>
		oldOperation = 0;
     676:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <oldOperation>
		if(oldNum > 0){
     67a:	c0 90 61 00 	lds	r12, 0x0061	; 0x800061 <oldNum>
     67e:	d0 90 62 00 	lds	r13, 0x0062	; 0x800062 <oldNum+0x1>
     682:	e0 90 63 00 	lds	r14, 0x0063	; 0x800063 <oldNum+0x2>
     686:	f0 90 64 00 	lds	r15, 0x0064	; 0x800064 <oldNum+0x3>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	a9 01       	movw	r20, r18
     690:	c7 01       	movw	r24, r14
     692:	b6 01       	movw	r22, r12
     694:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__gesf2>
     698:	18 16       	cp	r1, r24
     69a:	fc f4       	brge	.+62     	; 0x6da <CheckPriority+0x78>
			oldNum = numArr[Global_index - 1] / oldNum;
     69c:	c0 91 ef 00 	lds	r28, 0x00EF	; 0x8000ef <Global_index>
     6a0:	ec 2f       	mov	r30, r28
     6a2:	f0 e0       	ldi	r31, 0x00	; 0
     6a4:	31 97       	sbiw	r30, 0x01	; 1
     6a6:	ee 0f       	add	r30, r30
     6a8:	ff 1f       	adc	r31, r31
     6aa:	ee 0f       	add	r30, r30
     6ac:	ff 1f       	adc	r31, r31
     6ae:	e1 56       	subi	r30, 0x61	; 97
     6b0:	ff 4f       	sbci	r31, 0xFF	; 255
     6b2:	60 81       	ld	r22, Z
     6b4:	71 81       	ldd	r23, Z+1	; 0x01
     6b6:	82 81       	ldd	r24, Z+2	; 0x02
     6b8:	93 81       	ldd	r25, Z+3	; 0x03
     6ba:	a7 01       	movw	r20, r14
     6bc:	96 01       	movw	r18, r12
     6be:	0e 94 94 06 	call	0xd28	; 0xd28 <__divsf3>
     6c2:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <oldNum>
     6c6:	70 93 62 00 	sts	0x0062, r23	; 0x800062 <oldNum+0x1>
     6ca:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <oldNum+0x2>
     6ce:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <oldNum+0x3>
			Global_index--;
     6d2:	c1 50       	subi	r28, 0x01	; 1
     6d4:	c0 93 ef 00 	sts	0x00EF, r28	; 0x8000ef <Global_index>
     6d8:	41 c0       	rjmp	.+130    	; 0x75c <CheckPriority+0xfa>
		}
		else{
			LCD_voidSendCommand(LCD_ClearDisplay);
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_voidSendCommand>
			LCD_voidWriteString((u8*)"Error: Div. by 0!");
     6e0:	85 e7       	ldi	r24, 0x75	; 117
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 11 02 	call	0x422	; 0x422 <LCD_voidWriteString>
			oldNum = -1;
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	90 e0       	ldi	r25, 0x00	; 0
     6ec:	a0 e8       	ldi	r26, 0x80	; 128
     6ee:	bf eb       	ldi	r27, 0xBF	; 191
     6f0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <oldNum>
     6f4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <oldNum+0x1>
     6f8:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <oldNum+0x2>
     6fc:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <oldNum+0x3>
			Global_index = 0;
     700:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <Global_index>
			errorFlag = 1;
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
			return;
     70a:	5d c0       	rjmp	.+186    	; 0x7c6 <CheckPriority+0x164>
		}

	}
	else if(oldOperation == '*'){
     70c:	8a 32       	cpi	r24, 0x2A	; 42
     70e:	31 f5       	brne	.+76     	; 0x75c <CheckPriority+0xfa>
		oldOperation = 0;
     710:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <oldOperation>
		oldNum = numArr[Global_index - 1] * oldNum;
     714:	c0 91 ef 00 	lds	r28, 0x00EF	; 0x8000ef <Global_index>
     718:	ec 2f       	mov	r30, r28
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	31 97       	sbiw	r30, 0x01	; 1
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	e1 56       	subi	r30, 0x61	; 97
     728:	ff 4f       	sbci	r31, 0xFF	; 255
     72a:	60 81       	ld	r22, Z
     72c:	71 81       	ldd	r23, Z+1	; 0x01
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	93 81       	ldd	r25, Z+3	; 0x03
     732:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <oldNum>
     736:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <oldNum+0x1>
     73a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <oldNum+0x2>
     73e:	50 91 64 00 	lds	r21, 0x0064	; 0x800064 <oldNum+0x3>
     742:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__mulsf3>
     746:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <oldNum>
     74a:	70 93 62 00 	sts	0x0062, r23	; 0x800062 <oldNum+0x1>
     74e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <oldNum+0x2>
     752:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <oldNum+0x3>
		Global_index--;
     756:	c1 50       	subi	r28, 0x01	; 1
     758:	c0 93 ef 00 	sts	0x00EF, r28	; 0x8000ef <Global_index>
	}
	if(currentOperation == '+' || currentOperation == '-'){
     75c:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <currentOperation>
     760:	8b 32       	cpi	r24, 0x2B	; 43
     762:	11 f0       	breq	.+4      	; 0x768 <CheckPriority+0x106>
     764:	8d 32       	cpi	r24, 0x2D	; 45
     766:	51 f4       	brne	.+20     	; 0x77c <CheckPriority+0x11a>
		opArr[Global_index] = key;
     768:	e0 91 ef 00 	lds	r30, 0x00EF	; 0x8000ef <Global_index>
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	e5 57       	subi	r30, 0x75	; 117
     770:	ff 4f       	sbci	r31, 0xFF	; 255
     772:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     776:	80 83       	st	Z, r24
		currentOperation = 0;
     778:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <currentOperation>
	}

	numArr[Global_index] = oldNum;
     77c:	80 91 ef 00 	lds	r24, 0x00EF	; 0x8000ef <Global_index>
     780:	e8 2f       	mov	r30, r24
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	e1 56       	subi	r30, 0x61	; 97
     78e:	ff 4f       	sbci	r31, 0xFF	; 255
     790:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <oldNum>
     794:	50 91 62 00 	lds	r21, 0x0062	; 0x800062 <oldNum+0x1>
     798:	60 91 63 00 	lds	r22, 0x0063	; 0x800063 <oldNum+0x2>
     79c:	70 91 64 00 	lds	r23, 0x0064	; 0x800064 <oldNum+0x3>
     7a0:	40 83       	st	Z, r20
     7a2:	51 83       	std	Z+1, r21	; 0x01
     7a4:	62 83       	std	Z+2, r22	; 0x02
     7a6:	73 83       	std	Z+3, r23	; 0x03
	Global_index++;
     7a8:	8f 5f       	subi	r24, 0xFF	; 255
     7aa:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <Global_index>
	oldNum = -1;
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	a0 e8       	ldi	r26, 0x80	; 128
     7b4:	bf eb       	ldi	r27, 0xBF	; 191
     7b6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <oldNum>
     7ba:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <oldNum+0x1>
     7be:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <oldNum+0x2>
     7c2:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <oldNum+0x3>
}
     7c6:	cf 91       	pop	r28
     7c8:	ff 90       	pop	r15
     7ca:	ef 90       	pop	r14
     7cc:	df 90       	pop	r13
     7ce:	cf 90       	pop	r12
     7d0:	08 95       	ret

000007d2 <CalculateResult>:

void CalculateResult(){
     7d2:	1f 93       	push	r17
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
	u8 counter = 0;
	for(counter = 0; counter+1 < Global_index; counter++){
     7d8:	10 e0       	ldi	r17, 0x00	; 0
     7da:	42 c0       	rjmp	.+132    	; 0x860 <__stack+0x1>
		if(opArr[counter] == '+'){
     7dc:	fc 01       	movw	r30, r24
     7de:	e5 57       	subi	r30, 0x75	; 117
     7e0:	ff 4f       	sbci	r31, 0xFF	; 255
     7e2:	20 81       	ld	r18, Z
     7e4:	2b 32       	cpi	r18, 0x2B	; 43
     7e6:	e9 f4       	brne	.+58     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
			numArr[counter+1] = numArr[counter] + numArr[counter + 1];
     7e8:	88 0f       	add	r24, r24
     7ea:	99 1f       	adc	r25, r25
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	fc 01       	movw	r30, r24
     7f2:	e1 56       	subi	r30, 0x61	; 97
     7f4:	ff 4f       	sbci	r31, 0xFF	; 255
     7f6:	60 81       	ld	r22, Z
     7f8:	71 81       	ldd	r23, Z+1	; 0x01
     7fa:	82 81       	ldd	r24, Z+2	; 0x02
     7fc:	93 81       	ldd	r25, Z+3	; 0x03
     7fe:	44 0f       	add	r20, r20
     800:	55 1f       	adc	r21, r21
     802:	44 0f       	add	r20, r20
     804:	55 1f       	adc	r21, r21
     806:	ea 01       	movw	r28, r20
     808:	c1 56       	subi	r28, 0x61	; 97
     80a:	df 4f       	sbci	r29, 0xFF	; 255
     80c:	28 81       	ld	r18, Y
     80e:	39 81       	ldd	r19, Y+1	; 0x01
     810:	4a 81       	ldd	r20, Y+2	; 0x02
     812:	5b 81       	ldd	r21, Y+3	; 0x03
     814:	0e 94 23 06 	call	0xc46	; 0xc46 <__addsf3>
     818:	68 83       	st	Y, r22
     81a:	79 83       	std	Y+1, r23	; 0x01
     81c:	8a 83       	std	Y+2, r24	; 0x02
     81e:	9b 83       	std	Y+3, r25	; 0x03
     820:	1e c0       	rjmp	.+60     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
		}
		else if(opArr[counter] == '-'){
     822:	2d 32       	cpi	r18, 0x2D	; 45
     824:	e1 f4       	brne	.+56     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
			numArr[counter+1] = numArr[counter] - numArr[counter + 1];
     826:	88 0f       	add	r24, r24
     828:	99 1f       	adc	r25, r25
     82a:	88 0f       	add	r24, r24
     82c:	99 1f       	adc	r25, r25
     82e:	fc 01       	movw	r30, r24
     830:	e1 56       	subi	r30, 0x61	; 97
     832:	ff 4f       	sbci	r31, 0xFF	; 255
     834:	60 81       	ld	r22, Z
     836:	71 81       	ldd	r23, Z+1	; 0x01
     838:	82 81       	ldd	r24, Z+2	; 0x02
     83a:	93 81       	ldd	r25, Z+3	; 0x03
     83c:	44 0f       	add	r20, r20
     83e:	55 1f       	adc	r21, r21
     840:	44 0f       	add	r20, r20
     842:	55 1f       	adc	r21, r21
     844:	ea 01       	movw	r28, r20
     846:	c1 56       	subi	r28, 0x61	; 97
     848:	df 4f       	sbci	r29, 0xFF	; 255
     84a:	28 81       	ld	r18, Y
     84c:	39 81       	ldd	r19, Y+1	; 0x01
     84e:	4a 81       	ldd	r20, Y+2	; 0x02
     850:	5b 81       	ldd	r21, Y+3	; 0x03
     852:	0e 94 22 06 	call	0xc44	; 0xc44 <__subsf3>
     856:	68 83       	st	Y, r22
     858:	79 83       	std	Y+1, r23	; 0x01
     85a:	8a 83       	std	Y+2, r24	; 0x02
     85c:	9b 83       	std	Y+3, r25	; 0x03
	oldNum = -1;
}

void CalculateResult(){
	u8 counter = 0;
	for(counter = 0; counter+1 < Global_index; counter++){
     85e:	1f 5f       	subi	r17, 0xFF	; 255
     860:	81 2f       	mov	r24, r17
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	ac 01       	movw	r20, r24
     866:	4f 5f       	subi	r20, 0xFF	; 255
     868:	5f 4f       	sbci	r21, 0xFF	; 255
     86a:	20 91 ef 00 	lds	r18, 0x00EF	; 0x8000ef <Global_index>
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	42 17       	cp	r20, r18
     872:	53 07       	cpc	r21, r19
     874:	0c f4       	brge	.+2      	; 0x878 <__stack+0x19>
     876:	b2 cf       	rjmp	.-156    	; 0x7dc <CalculateResult+0xa>
		}
		else if(opArr[counter] == '-'){
			numArr[counter+1] = numArr[counter] - numArr[counter + 1];
		}
	}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	1f 91       	pop	r17
     87e:	08 95       	ret

00000880 <main>:
u8 oldOperation = 0;
u8 currentOperation = 0;
u8 key = NO_PRESSED_KEY;
u8 errorFlag = 0;
int main(){
	DIO_voidInit();
     880:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <DIO_voidInit>
	DIO_voidSetPortValue(DIO_PortC, 0xFF);
     884:	6f ef       	ldi	r22, 0xFF	; 255
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_voidSetPortValue>
	DIO_voidSetPortValue(DIO_PortB, 0xFF);
     88c:	6f ef       	ldi	r22, 0xFF	; 255
     88e:	82 e0       	ldi	r24, 0x02	; 2
     890:	0e 94 0b 06 	call	0xc16	; 0xc16 <DIO_voidSetPortValue>
	LCD_voidInit();
     894:	0e 94 5e 01 	call	0x2bc	; 0x2bc <LCD_voidInit>
	while(1){
		key = KPD_u8GetPressedKey();
     898:	0e 94 49 00 	call	0x92	; 0x92 <KPD_u8GetPressedKey>
     89c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		if(key != NO_PRESSED_KEY){
     8a0:	8f 3f       	cpi	r24, 0xFF	; 255
     8a2:	d1 f3       	breq	.-12     	; 0x898 <main+0x18>
			if(currentOperation == '=' || errorFlag == 1){
     8a4:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <currentOperation>
     8a8:	8d 33       	cpi	r24, 0x3D	; 61
     8aa:	21 f0       	breq	.+8      	; 0x8b4 <main+0x34>
     8ac:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
     8b0:	81 30       	cpi	r24, 0x01	; 1
     8b2:	39 f4       	brne	.+14     	; 0x8c2 <main+0x42>
				errorFlag = 0;
     8b4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
				LCD_voidSendCommand(LCD_ClearDisplay);
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_voidSendCommand>
				currentOperation = 0;
     8be:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <currentOperation>
			}
			if(key < 10){
     8c2:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     8c6:	ca 30       	cpi	r28, 0x0A	; 10
     8c8:	08 f0       	brcs	.+2      	; 0x8cc <main+0x4c>
     8ca:	41 c0       	rjmp	.+130    	; 0x94e <main+0xce>
				if(oldNum < 0){
     8cc:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <oldNum>
     8d0:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <oldNum+0x1>
     8d4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <oldNum+0x2>
     8d8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <oldNum+0x3>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	a9 01       	movw	r20, r18
     8e2:	0e 94 8f 06 	call	0xd1e	; 0xd1e <__cmpsf2>
     8e6:	88 23       	and	r24, r24
     8e8:	44 f4       	brge	.+16     	; 0x8fa <main+0x7a>
					oldNum = 0;
     8ea:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <oldNum>
     8ee:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <oldNum+0x1>
     8f2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <oldNum+0x2>
     8f6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <oldNum+0x3>
				}
				LCD_voidWriteIntData(key);
     8fa:	6c 2f       	mov	r22, r28
     8fc:	70 e0       	ldi	r23, 0x00	; 0
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 88 02 	call	0x510	; 0x510 <LCD_voidWriteIntData>
				oldNum = (oldNum * 10) + key;
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e2       	ldi	r20, 0x20	; 32
     90c:	51 e4       	ldi	r21, 0x41	; 65
     90e:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <oldNum>
     912:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <oldNum+0x1>
     916:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <oldNum+0x2>
     91a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <oldNum+0x3>
     91e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__mulsf3>
     922:	6b 01       	movw	r12, r22
     924:	7c 01       	movw	r14, r24
     926:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     92a:	70 e0       	ldi	r23, 0x00	; 0
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__floatsisf>
     934:	a7 01       	movw	r20, r14
     936:	96 01       	movw	r18, r12
     938:	0e 94 23 06 	call	0xc46	; 0xc46 <__addsf3>
     93c:	60 93 61 00 	sts	0x0061, r22	; 0x800061 <oldNum>
     940:	70 93 62 00 	sts	0x0062, r23	; 0x800062 <oldNum+0x1>
     944:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <oldNum+0x2>
     948:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <oldNum+0x3>
     94c:	a5 cf       	rjmp	.-182    	; 0x898 <main+0x18>
			}
			else{
				if(oldNum >= 0 || key == 'C'){
     94e:	60 91 61 00 	lds	r22, 0x0061	; 0x800061 <oldNum>
     952:	70 91 62 00 	lds	r23, 0x0062	; 0x800062 <oldNum+0x1>
     956:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <oldNum+0x2>
     95a:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <oldNum+0x3>
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	a9 01       	movw	r20, r18
     964:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__gesf2>
     968:	88 23       	and	r24, r24
     96a:	1c f4       	brge	.+6      	; 0x972 <main+0xf2>
     96c:	c3 34       	cpi	r28, 0x43	; 67
     96e:	09 f0       	breq	.+2      	; 0x972 <main+0xf2>
     970:	93 cf       	rjmp	.-218    	; 0x898 <main+0x18>
					switch(key){
     972:	cd 32       	cpi	r28, 0x2D	; 45
     974:	11 f1       	breq	.+68     	; 0x9ba <main+0x13a>
     976:	28 f4       	brcc	.+10     	; 0x982 <main+0x102>
     978:	ca 32       	cpi	r28, 0x2A	; 42
     97a:	a9 f0       	breq	.+42     	; 0x9a6 <main+0x126>
     97c:	cb 32       	cpi	r28, 0x2B	; 43
     97e:	31 f1       	breq	.+76     	; 0x9cc <main+0x14c>
     980:	8b cf       	rjmp	.-234    	; 0x898 <main+0x18>
     982:	cd 33       	cpi	r28, 0x3D	; 61
     984:	61 f1       	breq	.+88     	; 0x9de <main+0x15e>
     986:	c3 34       	cpi	r28, 0x43	; 67
     988:	09 f4       	brne	.+2      	; 0x98c <main+0x10c>
     98a:	50 c0       	rjmp	.+160    	; 0xa2c <main+0x1ac>
     98c:	cf 32       	cpi	r28, 0x2F	; 47
     98e:	09 f0       	breq	.+2      	; 0x992 <main+0x112>
     990:	83 cf       	rjmp	.-250    	; 0x898 <main+0x18>
						case '/':
						CheckPriority();
     992:	0e 94 31 03 	call	0x662	; 0x662 <CheckPriority>
						if(errorFlag != -1){
							LCD_voidWriteChar(key);
     996:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     99a:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_voidWriteChar>
							oldOperation = '/';
     99e:	8f e2       	ldi	r24, 0x2F	; 47
     9a0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <oldOperation>
     9a4:	79 cf       	rjmp	.-270    	; 0x898 <main+0x18>
						}
						break;
						case '*':
						CheckPriority();
     9a6:	0e 94 31 03 	call	0x662	; 0x662 <CheckPriority>
						if(errorFlag != -1){
							LCD_voidWriteChar(key);
     9aa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     9ae:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_voidWriteChar>
							oldOperation = '*';
     9b2:	8a e2       	ldi	r24, 0x2A	; 42
     9b4:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <oldOperation>
     9b8:	6f cf       	rjmp	.-290    	; 0x898 <main+0x18>
						}
						break;

						case '-':
						currentOperation = '-';
     9ba:	8d e2       	ldi	r24, 0x2D	; 45
     9bc:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <currentOperation>
						LCD_voidWriteChar(key);
     9c0:	8c 2f       	mov	r24, r28
     9c2:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_voidWriteChar>
						CheckPriority();
     9c6:	0e 94 31 03 	call	0x662	; 0x662 <CheckPriority>
						break;
     9ca:	66 cf       	rjmp	.-308    	; 0x898 <main+0x18>

						case '+':
						currentOperation = '+';
     9cc:	8b e2       	ldi	r24, 0x2B	; 43
     9ce:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <currentOperation>
						LCD_voidWriteChar(key);
     9d2:	8c 2f       	mov	r24, r28
     9d4:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_voidWriteChar>
						CheckPriority();
     9d8:	0e 94 31 03 	call	0x662	; 0x662 <CheckPriority>
						break;
     9dc:	5d cf       	rjmp	.-326    	; 0x898 <main+0x18>

						case '=':
						currentOperation = '=';
     9de:	8d e3       	ldi	r24, 0x3D	; 61
     9e0:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <currentOperation>
						CheckPriority();
     9e4:	0e 94 31 03 	call	0x662	; 0x662 <CheckPriority>
						CalculateResult();
     9e8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <CalculateResult>
						if(errorFlag != 1){
     9ec:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
     9f0:	81 30       	cpi	r24, 0x01	; 1
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <main+0x176>
     9f4:	51 cf       	rjmp	.-350    	; 0x898 <main+0x18>
							LCD_voidGoToPosition(3, 0);
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	0e 94 18 03 	call	0x630	; 0x630 <LCD_voidGoToPosition>
							LCD_voidWriteChar(key);
     9fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     a02:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_voidWriteChar>
							LCD_voidWriteFloatData(numArr[Global_index-1]);
     a06:	e0 91 ef 00 	lds	r30, 0x00EF	; 0x8000ef <Global_index>
     a0a:	f0 e0       	ldi	r31, 0x00	; 0
     a0c:	31 97       	sbiw	r30, 0x01	; 1
     a0e:	ee 0f       	add	r30, r30
     a10:	ff 1f       	adc	r31, r31
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	e1 56       	subi	r30, 0x61	; 97
     a18:	ff 4f       	sbci	r31, 0xFF	; 255
     a1a:	60 81       	ld	r22, Z
     a1c:	71 81       	ldd	r23, Z+1	; 0x01
     a1e:	82 81       	ldd	r24, Z+2	; 0x02
     a20:	93 81       	ldd	r25, Z+3	; 0x03
     a22:	0e 94 ab 02 	call	0x556	; 0x556 <LCD_voidWriteFloatData>
							Global_index = 0;
     a26:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <Global_index>
     a2a:	36 cf       	rjmp	.-404    	; 0x898 <main+0x18>
						}
						break;

						case 'C':
						LCD_voidSendCommand(LCD_ClearDisplay);
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_voidSendCommand>
						Global_index = 0;
     a32:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <Global_index>
						oldNum = -1;
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	a0 e8       	ldi	r26, 0x80	; 128
     a3c:	bf eb       	ldi	r27, 0xBF	; 191
     a3e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <oldNum>
     a42:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <oldNum+0x1>
     a46:	a0 93 63 00 	sts	0x0063, r26	; 0x800063 <oldNum+0x2>
     a4a:	b0 93 64 00 	sts	0x0064, r27	; 0x800064 <oldNum+0x3>
						oldOperation = 0;
     a4e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <oldOperation>
						break;
     a52:	22 cf       	rjmp	.-444    	; 0x898 <main+0x18>

00000a54 <DIO_voidSetPinValue>:
				break;
				case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
				break;
				case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
     a54:	9f ef       	ldi	r25, 0xFF	; 255
     a56:	98 0f       	add	r25, r24
     a58:	94 30       	cpi	r25, 0x04	; 4
     a5a:	08 f0       	brcs	.+2      	; 0xa5e <DIO_voidSetPinValue+0xa>
     a5c:	78 c0       	rjmp	.+240    	; 0xb4e <DIO_voidSetPinValue+0xfa>
     a5e:	68 30       	cpi	r22, 0x08	; 8
     a60:	08 f0       	brcs	.+2      	; 0xa64 <DIO_voidSetPinValue+0x10>
     a62:	75 c0       	rjmp	.+234    	; 0xb4e <DIO_voidSetPinValue+0xfa>
     a64:	41 30       	cpi	r20, 0x01	; 1
     a66:	b9 f5       	brne	.+110    	; 0xad6 <DIO_voidSetPinValue+0x82>
     a68:	82 30       	cpi	r24, 0x02	; 2
     a6a:	a1 f0       	breq	.+40     	; 0xa94 <DIO_voidSetPinValue+0x40>
     a6c:	18 f4       	brcc	.+6      	; 0xa74 <DIO_voidSetPinValue+0x20>
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	31 f0       	breq	.+12     	; 0xa7e <DIO_voidSetPinValue+0x2a>
     a72:	08 95       	ret
     a74:	83 30       	cpi	r24, 0x03	; 3
     a76:	c9 f0       	breq	.+50     	; 0xaaa <DIO_voidSetPinValue+0x56>
     a78:	84 30       	cpi	r24, 0x04	; 4
     a7a:	11 f1       	breq	.+68     	; 0xac0 <DIO_voidSetPinValue+0x6c>
     a7c:	08 95       	ret
     a7e:	2b b3       	in	r18, 0x1b	; 27
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <DIO_voidSetPinValue+0x36>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	6a 95       	dec	r22
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <DIO_voidSetPinValue+0x32>
     a8e:	82 2b       	or	r24, r18
     a90:	8b bb       	out	0x1b, r24	; 27
     a92:	08 95       	ret
     a94:	28 b3       	in	r18, 0x18	; 24
     a96:	81 e0       	ldi	r24, 0x01	; 1
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <DIO_voidSetPinValue+0x4c>
     a9c:	88 0f       	add	r24, r24
     a9e:	99 1f       	adc	r25, r25
     aa0:	6a 95       	dec	r22
     aa2:	e2 f7       	brpl	.-8      	; 0xa9c <DIO_voidSetPinValue+0x48>
     aa4:	82 2b       	or	r24, r18
     aa6:	88 bb       	out	0x18, r24	; 24
     aa8:	08 95       	ret
     aaa:	25 b3       	in	r18, 0x15	; 21
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_voidSetPinValue+0x62>
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	6a 95       	dec	r22
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_voidSetPinValue+0x5e>
     aba:	82 2b       	or	r24, r18
     abc:	85 bb       	out	0x15, r24	; 21
     abe:	08 95       	ret
     ac0:	22 b3       	in	r18, 0x12	; 18
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <DIO_voidSetPinValue+0x78>
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	6a 95       	dec	r22
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <DIO_voidSetPinValue+0x74>
     ad0:	82 2b       	or	r24, r18
     ad2:	82 bb       	out	0x12, r24	; 18
     ad4:	08 95       	ret
     ad6:	41 11       	cpse	r20, r1
     ad8:	3a c0       	rjmp	.+116    	; 0xb4e <DIO_voidSetPinValue+0xfa>
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	a9 f0       	breq	.+42     	; 0xb08 <DIO_voidSetPinValue+0xb4>
     ade:	18 f4       	brcc	.+6      	; 0xae6 <DIO_voidSetPinValue+0x92>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	31 f0       	breq	.+12     	; 0xaf0 <DIO_voidSetPinValue+0x9c>
     ae4:	08 95       	ret
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	d9 f0       	breq	.+54     	; 0xb20 <DIO_voidSetPinValue+0xcc>
     aea:	84 30       	cpi	r24, 0x04	; 4
     aec:	29 f1       	breq	.+74     	; 0xb38 <DIO_voidSetPinValue+0xe4>
     aee:	08 95       	ret
     af0:	2b b3       	in	r18, 0x1b	; 27
     af2:	81 e0       	ldi	r24, 0x01	; 1
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	02 c0       	rjmp	.+4      	; 0xafc <DIO_voidSetPinValue+0xa8>
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	6a 95       	dec	r22
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <DIO_voidSetPinValue+0xa4>
     b00:	80 95       	com	r24
     b02:	82 23       	and	r24, r18
     b04:	8b bb       	out	0x1b, r24	; 27
     b06:	08 95       	ret
     b08:	28 b3       	in	r18, 0x18	; 24
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_voidSetPinValue+0xc0>
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	6a 95       	dec	r22
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_voidSetPinValue+0xbc>
     b18:	80 95       	com	r24
     b1a:	82 23       	and	r24, r18
     b1c:	88 bb       	out	0x18, r24	; 24
     b1e:	08 95       	ret
     b20:	25 b3       	in	r18, 0x15	; 21
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <DIO_voidSetPinValue+0xd8>
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	6a 95       	dec	r22
     b2e:	e2 f7       	brpl	.-8      	; 0xb28 <DIO_voidSetPinValue+0xd4>
     b30:	80 95       	com	r24
     b32:	82 23       	and	r24, r18
     b34:	85 bb       	out	0x15, r24	; 21
     b36:	08 95       	ret
     b38:	22 b3       	in	r18, 0x12	; 18
     b3a:	81 e0       	ldi	r24, 0x01	; 1
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <DIO_voidSetPinValue+0xf0>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	6a 95       	dec	r22
     b46:	e2 f7       	brpl	.-8      	; 0xb40 <DIO_voidSetPinValue+0xec>
     b48:	80 95       	com	r24
     b4a:	82 23       	and	r24, r18
     b4c:	82 bb       	out	0x12, r24	; 18
     b4e:	08 95       	ret

00000b50 <DIO_u8GetPinValue>:
     b50:	9f ef       	ldi	r25, 0xFF	; 255
     b52:	98 0f       	add	r25, r24
     b54:	94 30       	cpi	r25, 0x04	; 4
     b56:	88 f5       	brcc	.+98     	; 0xbba <DIO_u8GetPinValue+0x6a>
     b58:	68 30       	cpi	r22, 0x08	; 8
     b5a:	88 f5       	brcc	.+98     	; 0xbbe <DIO_u8GetPinValue+0x6e>
     b5c:	82 30       	cpi	r24, 0x02	; 2
     b5e:	91 f0       	breq	.+36     	; 0xb84 <DIO_u8GetPinValue+0x34>
     b60:	18 f4       	brcc	.+6      	; 0xb68 <DIO_u8GetPinValue+0x18>
     b62:	81 30       	cpi	r24, 0x01	; 1
     b64:	31 f0       	breq	.+12     	; 0xb72 <DIO_u8GetPinValue+0x22>
     b66:	2d c0       	rjmp	.+90     	; 0xbc2 <DIO_u8GetPinValue+0x72>
     b68:	83 30       	cpi	r24, 0x03	; 3
     b6a:	a9 f0       	breq	.+42     	; 0xb96 <DIO_u8GetPinValue+0x46>
     b6c:	84 30       	cpi	r24, 0x04	; 4
     b6e:	e1 f0       	breq	.+56     	; 0xba8 <DIO_u8GetPinValue+0x58>
     b70:	28 c0       	rjmp	.+80     	; 0xbc2 <DIO_u8GetPinValue+0x72>
     b72:	89 b3       	in	r24, 0x19	; 25
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <DIO_u8GetPinValue+0x2c>
     b78:	95 95       	asr	r25
     b7a:	87 95       	ror	r24
     b7c:	6a 95       	dec	r22
     b7e:	e2 f7       	brpl	.-8      	; 0xb78 <DIO_u8GetPinValue+0x28>
     b80:	81 70       	andi	r24, 0x01	; 1
     b82:	08 95       	ret
     b84:	86 b3       	in	r24, 0x16	; 22
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <DIO_u8GetPinValue+0x3e>
     b8a:	95 95       	asr	r25
     b8c:	87 95       	ror	r24
     b8e:	6a 95       	dec	r22
     b90:	e2 f7       	brpl	.-8      	; 0xb8a <DIO_u8GetPinValue+0x3a>
     b92:	81 70       	andi	r24, 0x01	; 1
     b94:	08 95       	ret
     b96:	83 b3       	in	r24, 0x13	; 19
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 c0       	rjmp	.+4      	; 0xba0 <DIO_u8GetPinValue+0x50>
     b9c:	95 95       	asr	r25
     b9e:	87 95       	ror	r24
     ba0:	6a 95       	dec	r22
     ba2:	e2 f7       	brpl	.-8      	; 0xb9c <DIO_u8GetPinValue+0x4c>
     ba4:	81 70       	andi	r24, 0x01	; 1
     ba6:	08 95       	ret
     ba8:	80 b3       	in	r24, 0x10	; 16
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	02 c0       	rjmp	.+4      	; 0xbb2 <DIO_u8GetPinValue+0x62>
     bae:	95 95       	asr	r25
     bb0:	87 95       	ror	r24
     bb2:	6a 95       	dec	r22
     bb4:	e2 f7       	brpl	.-8      	; 0xbae <DIO_u8GetPinValue+0x5e>
     bb6:	81 70       	andi	r24, 0x01	; 1
     bb8:	08 95       	ret
     bba:	8f ef       	ldi	r24, 0xFF	; 255
     bbc:	08 95       	ret
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	08 95       	ret
     bc2:	8f ef       	ldi	r24, 0xFF	; 255
     bc4:	08 95       	ret

00000bc6 <DIO_voidSetPortDir>:
		}
	}
}

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
     bc6:	9f ef       	ldi	r25, 0xFF	; 255
     bc8:	98 0f       	add	r25, r24
     bca:	94 30       	cpi	r25, 0x04	; 4
     bcc:	90 f4       	brcc	.+36     	; 0xbf2 <DIO_voidSetPortDir+0x2c>
		switch(Local_PortName){
     bce:	82 30       	cpi	r24, 0x02	; 2
     bd0:	59 f0       	breq	.+22     	; 0xbe8 <DIO_voidSetPortDir+0x22>
     bd2:	18 f4       	brcc	.+6      	; 0xbda <DIO_voidSetPortDir+0x14>
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	31 f0       	breq	.+12     	; 0xbe4 <DIO_voidSetPortDir+0x1e>
     bd8:	08 95       	ret
     bda:	83 30       	cpi	r24, 0x03	; 3
     bdc:	39 f0       	breq	.+14     	; 0xbec <DIO_voidSetPortDir+0x26>
     bde:	84 30       	cpi	r24, 0x04	; 4
     be0:	39 f0       	breq	.+14     	; 0xbf0 <DIO_voidSetPortDir+0x2a>
     be2:	08 95       	ret
			case DIO_PortA:
			DIO_DDRA = Local_PortDir;
     be4:	6a bb       	out	0x1a, r22	; 26
			break;
     be6:	08 95       	ret
			case DIO_PortB:
			DIO_DDRB = Local_PortDir;
     be8:	67 bb       	out	0x17, r22	; 23
			break;
     bea:	08 95       	ret
			case DIO_PortC:
			DIO_DDRC = Local_PortDir;
     bec:	64 bb       	out	0x14, r22	; 20
			break;
     bee:	08 95       	ret
			case DIO_PortD:
			DIO_DDRD = Local_PortDir;
     bf0:	61 bb       	out	0x11, r22	; 17
     bf2:	08 95       	ret

00000bf4 <DIO_voidInit>:
#include "../Lib/bit_math.h"
#include "dio.h"
#include "MemMap.h"

void DIO_voidInit(){
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
     bf4:	6f ef       	ldi	r22, 0xFF	; 255
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
     bfc:	6f ef       	ldi	r22, 0xFF	; 255
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
     c04:	60 e0       	ldi	r22, 0x00	; 0
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
     c0c:	6f ef       	ldi	r22, 0xFF	; 255
     c0e:	84 e0       	ldi	r24, 0x04	; 4
     c10:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <DIO_voidSetPortDir>
     c14:	08 95       	ret

00000c16 <DIO_voidSetPortValue>:
		}
	}
}

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
     c16:	9f ef       	ldi	r25, 0xFF	; 255
     c18:	98 0f       	add	r25, r24
     c1a:	94 30       	cpi	r25, 0x04	; 4
     c1c:	90 f4       	brcc	.+36     	; 0xc42 <DIO_voidSetPortValue+0x2c>
		switch(Local_PortName){
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	59 f0       	breq	.+22     	; 0xc38 <DIO_voidSetPortValue+0x22>
     c22:	18 f4       	brcc	.+6      	; 0xc2a <DIO_voidSetPortValue+0x14>
     c24:	81 30       	cpi	r24, 0x01	; 1
     c26:	31 f0       	breq	.+12     	; 0xc34 <DIO_voidSetPortValue+0x1e>
     c28:	08 95       	ret
     c2a:	83 30       	cpi	r24, 0x03	; 3
     c2c:	39 f0       	breq	.+14     	; 0xc3c <DIO_voidSetPortValue+0x26>
     c2e:	84 30       	cpi	r24, 0x04	; 4
     c30:	39 f0       	breq	.+14     	; 0xc40 <DIO_voidSetPortValue+0x2a>
     c32:	08 95       	ret
			case DIO_PortA:
			DIO_PORTA = Local_PortValue;
     c34:	6b bb       	out	0x1b, r22	; 27
			break;
     c36:	08 95       	ret
			case DIO_PortB:
			DIO_PORTB = Local_PortValue;
     c38:	68 bb       	out	0x18, r22	; 24
			break;
     c3a:	08 95       	ret
			case DIO_PortC:
			DIO_PORTC = Local_PortValue;
     c3c:	65 bb       	out	0x15, r22	; 21
			break;
     c3e:	08 95       	ret
			case DIO_PortD:
			DIO_PORTD = Local_PortValue;
     c40:	62 bb       	out	0x12, r22	; 18
     c42:	08 95       	ret

00000c44 <__subsf3>:
     c44:	50 58       	subi	r21, 0x80	; 128

00000c46 <__addsf3>:
     c46:	bb 27       	eor	r27, r27
     c48:	aa 27       	eor	r26, r26
     c4a:	0e 94 3a 06 	call	0xc74	; 0xc74 <__addsf3x>
     c4e:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_round>
     c52:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_pscA>
     c56:	38 f0       	brcs	.+14     	; 0xc66 <__addsf3+0x20>
     c58:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__fp_pscB>
     c5c:	20 f0       	brcs	.+8      	; 0xc66 <__addsf3+0x20>
     c5e:	39 f4       	brne	.+14     	; 0xc6e <__addsf3+0x28>
     c60:	9f 3f       	cpi	r25, 0xFF	; 255
     c62:	19 f4       	brne	.+6      	; 0xc6a <__addsf3+0x24>
     c64:	26 f4       	brtc	.+8      	; 0xc6e <__addsf3+0x28>
     c66:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_nan>
     c6a:	0e f4       	brtc	.+2      	; 0xc6e <__addsf3+0x28>
     c6c:	e0 95       	com	r30
     c6e:	e7 fb       	bst	r30, 7
     c70:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_inf>

00000c74 <__addsf3x>:
     c74:	e9 2f       	mov	r30, r25
     c76:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_split3>
     c7a:	58 f3       	brcs	.-42     	; 0xc52 <__addsf3+0xc>
     c7c:	ba 17       	cp	r27, r26
     c7e:	62 07       	cpc	r22, r18
     c80:	73 07       	cpc	r23, r19
     c82:	84 07       	cpc	r24, r20
     c84:	95 07       	cpc	r25, r21
     c86:	20 f0       	brcs	.+8      	; 0xc90 <__addsf3x+0x1c>
     c88:	79 f4       	brne	.+30     	; 0xca8 <__addsf3x+0x34>
     c8a:	a6 f5       	brtc	.+104    	; 0xcf4 <__addsf3x+0x80>
     c8c:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__fp_zero>
     c90:	0e f4       	brtc	.+2      	; 0xc94 <__addsf3x+0x20>
     c92:	e0 95       	com	r30
     c94:	0b 2e       	mov	r0, r27
     c96:	ba 2f       	mov	r27, r26
     c98:	a0 2d       	mov	r26, r0
     c9a:	0b 01       	movw	r0, r22
     c9c:	b9 01       	movw	r22, r18
     c9e:	90 01       	movw	r18, r0
     ca0:	0c 01       	movw	r0, r24
     ca2:	ca 01       	movw	r24, r20
     ca4:	a0 01       	movw	r20, r0
     ca6:	11 24       	eor	r1, r1
     ca8:	ff 27       	eor	r31, r31
     caa:	59 1b       	sub	r21, r25
     cac:	99 f0       	breq	.+38     	; 0xcd4 <__addsf3x+0x60>
     cae:	59 3f       	cpi	r21, 0xF9	; 249
     cb0:	50 f4       	brcc	.+20     	; 0xcc6 <__addsf3x+0x52>
     cb2:	50 3e       	cpi	r21, 0xE0	; 224
     cb4:	68 f1       	brcs	.+90     	; 0xd10 <__addsf3x+0x9c>
     cb6:	1a 16       	cp	r1, r26
     cb8:	f0 40       	sbci	r31, 0x00	; 0
     cba:	a2 2f       	mov	r26, r18
     cbc:	23 2f       	mov	r18, r19
     cbe:	34 2f       	mov	r19, r20
     cc0:	44 27       	eor	r20, r20
     cc2:	58 5f       	subi	r21, 0xF8	; 248
     cc4:	f3 cf       	rjmp	.-26     	; 0xcac <__addsf3x+0x38>
     cc6:	46 95       	lsr	r20
     cc8:	37 95       	ror	r19
     cca:	27 95       	ror	r18
     ccc:	a7 95       	ror	r26
     cce:	f0 40       	sbci	r31, 0x00	; 0
     cd0:	53 95       	inc	r21
     cd2:	c9 f7       	brne	.-14     	; 0xcc6 <__addsf3x+0x52>
     cd4:	7e f4       	brtc	.+30     	; 0xcf4 <__addsf3x+0x80>
     cd6:	1f 16       	cp	r1, r31
     cd8:	ba 0b       	sbc	r27, r26
     cda:	62 0b       	sbc	r22, r18
     cdc:	73 0b       	sbc	r23, r19
     cde:	84 0b       	sbc	r24, r20
     ce0:	ba f0       	brmi	.+46     	; 0xd10 <__addsf3x+0x9c>
     ce2:	91 50       	subi	r25, 0x01	; 1
     ce4:	a1 f0       	breq	.+40     	; 0xd0e <__addsf3x+0x9a>
     ce6:	ff 0f       	add	r31, r31
     ce8:	bb 1f       	adc	r27, r27
     cea:	66 1f       	adc	r22, r22
     cec:	77 1f       	adc	r23, r23
     cee:	88 1f       	adc	r24, r24
     cf0:	c2 f7       	brpl	.-16     	; 0xce2 <__addsf3x+0x6e>
     cf2:	0e c0       	rjmp	.+28     	; 0xd10 <__addsf3x+0x9c>
     cf4:	ba 0f       	add	r27, r26
     cf6:	62 1f       	adc	r22, r18
     cf8:	73 1f       	adc	r23, r19
     cfa:	84 1f       	adc	r24, r20
     cfc:	48 f4       	brcc	.+18     	; 0xd10 <__addsf3x+0x9c>
     cfe:	87 95       	ror	r24
     d00:	77 95       	ror	r23
     d02:	67 95       	ror	r22
     d04:	b7 95       	ror	r27
     d06:	f7 95       	ror	r31
     d08:	9e 3f       	cpi	r25, 0xFE	; 254
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <__addsf3x+0x9a>
     d0c:	b0 cf       	rjmp	.-160    	; 0xc6e <__addsf3+0x28>
     d0e:	93 95       	inc	r25
     d10:	88 0f       	add	r24, r24
     d12:	08 f0       	brcs	.+2      	; 0xd16 <__addsf3x+0xa2>
     d14:	99 27       	eor	r25, r25
     d16:	ee 0f       	add	r30, r30
     d18:	97 95       	ror	r25
     d1a:	87 95       	ror	r24
     d1c:	08 95       	ret

00000d1e <__cmpsf2>:
     d1e:	0e 94 79 07 	call	0xef2	; 0xef2 <__fp_cmp>
     d22:	08 f4       	brcc	.+2      	; 0xd26 <__cmpsf2+0x8>
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	08 95       	ret

00000d28 <__divsf3>:
     d28:	0e 94 a8 06 	call	0xd50	; 0xd50 <__divsf3x>
     d2c:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_round>
     d30:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__fp_pscB>
     d34:	58 f0       	brcs	.+22     	; 0xd4c <__divsf3+0x24>
     d36:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_pscA>
     d3a:	40 f0       	brcs	.+16     	; 0xd4c <__divsf3+0x24>
     d3c:	29 f4       	brne	.+10     	; 0xd48 <__divsf3+0x20>
     d3e:	5f 3f       	cpi	r21, 0xFF	; 255
     d40:	29 f0       	breq	.+10     	; 0xd4c <__divsf3+0x24>
     d42:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_inf>
     d46:	51 11       	cpse	r21, r1
     d48:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_szero>
     d4c:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_nan>

00000d50 <__divsf3x>:
     d50:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_split3>
     d54:	68 f3       	brcs	.-38     	; 0xd30 <__divsf3+0x8>

00000d56 <__divsf3_pse>:
     d56:	99 23       	and	r25, r25
     d58:	b1 f3       	breq	.-20     	; 0xd46 <__divsf3+0x1e>
     d5a:	55 23       	and	r21, r21
     d5c:	91 f3       	breq	.-28     	; 0xd42 <__divsf3+0x1a>
     d5e:	95 1b       	sub	r25, r21
     d60:	55 0b       	sbc	r21, r21
     d62:	bb 27       	eor	r27, r27
     d64:	aa 27       	eor	r26, r26
     d66:	62 17       	cp	r22, r18
     d68:	73 07       	cpc	r23, r19
     d6a:	84 07       	cpc	r24, r20
     d6c:	38 f0       	brcs	.+14     	; 0xd7c <__divsf3_pse+0x26>
     d6e:	9f 5f       	subi	r25, 0xFF	; 255
     d70:	5f 4f       	sbci	r21, 0xFF	; 255
     d72:	22 0f       	add	r18, r18
     d74:	33 1f       	adc	r19, r19
     d76:	44 1f       	adc	r20, r20
     d78:	aa 1f       	adc	r26, r26
     d7a:	a9 f3       	breq	.-22     	; 0xd66 <__divsf3_pse+0x10>
     d7c:	35 d0       	rcall	.+106    	; 0xde8 <__divsf3_pse+0x92>
     d7e:	0e 2e       	mov	r0, r30
     d80:	3a f0       	brmi	.+14     	; 0xd90 <__divsf3_pse+0x3a>
     d82:	e0 e8       	ldi	r30, 0x80	; 128
     d84:	32 d0       	rcall	.+100    	; 0xdea <__divsf3_pse+0x94>
     d86:	91 50       	subi	r25, 0x01	; 1
     d88:	50 40       	sbci	r21, 0x00	; 0
     d8a:	e6 95       	lsr	r30
     d8c:	00 1c       	adc	r0, r0
     d8e:	ca f7       	brpl	.-14     	; 0xd82 <__divsf3_pse+0x2c>
     d90:	2b d0       	rcall	.+86     	; 0xde8 <__divsf3_pse+0x92>
     d92:	fe 2f       	mov	r31, r30
     d94:	29 d0       	rcall	.+82     	; 0xde8 <__divsf3_pse+0x92>
     d96:	66 0f       	add	r22, r22
     d98:	77 1f       	adc	r23, r23
     d9a:	88 1f       	adc	r24, r24
     d9c:	bb 1f       	adc	r27, r27
     d9e:	26 17       	cp	r18, r22
     da0:	37 07       	cpc	r19, r23
     da2:	48 07       	cpc	r20, r24
     da4:	ab 07       	cpc	r26, r27
     da6:	b0 e8       	ldi	r27, 0x80	; 128
     da8:	09 f0       	breq	.+2      	; 0xdac <__divsf3_pse+0x56>
     daa:	bb 0b       	sbc	r27, r27
     dac:	80 2d       	mov	r24, r0
     dae:	bf 01       	movw	r22, r30
     db0:	ff 27       	eor	r31, r31
     db2:	93 58       	subi	r25, 0x83	; 131
     db4:	5f 4f       	sbci	r21, 0xFF	; 255
     db6:	3a f0       	brmi	.+14     	; 0xdc6 <__divsf3_pse+0x70>
     db8:	9e 3f       	cpi	r25, 0xFE	; 254
     dba:	51 05       	cpc	r21, r1
     dbc:	78 f0       	brcs	.+30     	; 0xddc <__divsf3_pse+0x86>
     dbe:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_inf>
     dc2:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_szero>
     dc6:	5f 3f       	cpi	r21, 0xFF	; 255
     dc8:	e4 f3       	brlt	.-8      	; 0xdc2 <__divsf3_pse+0x6c>
     dca:	98 3e       	cpi	r25, 0xE8	; 232
     dcc:	d4 f3       	brlt	.-12     	; 0xdc2 <__divsf3_pse+0x6c>
     dce:	86 95       	lsr	r24
     dd0:	77 95       	ror	r23
     dd2:	67 95       	ror	r22
     dd4:	b7 95       	ror	r27
     dd6:	f7 95       	ror	r31
     dd8:	9f 5f       	subi	r25, 0xFF	; 255
     dda:	c9 f7       	brne	.-14     	; 0xdce <__divsf3_pse+0x78>
     ddc:	88 0f       	add	r24, r24
     dde:	91 1d       	adc	r25, r1
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	97 f9       	bld	r25, 7
     de6:	08 95       	ret
     de8:	e1 e0       	ldi	r30, 0x01	; 1
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 1f       	adc	r24, r24
     df0:	bb 1f       	adc	r27, r27
     df2:	62 17       	cp	r22, r18
     df4:	73 07       	cpc	r23, r19
     df6:	84 07       	cpc	r24, r20
     df8:	ba 07       	cpc	r27, r26
     dfa:	20 f0       	brcs	.+8      	; 0xe04 <__divsf3_pse+0xae>
     dfc:	62 1b       	sub	r22, r18
     dfe:	73 0b       	sbc	r23, r19
     e00:	84 0b       	sbc	r24, r20
     e02:	ba 0b       	sbc	r27, r26
     e04:	ee 1f       	adc	r30, r30
     e06:	88 f7       	brcc	.-30     	; 0xdea <__divsf3_pse+0x94>
     e08:	e0 95       	com	r30
     e0a:	08 95       	ret

00000e0c <__fixsfsi>:
     e0c:	0e 94 0d 07 	call	0xe1a	; 0xe1a <__fixunssfsi>
     e10:	68 94       	set
     e12:	b1 11       	cpse	r27, r1
     e14:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_szero>
     e18:	08 95       	ret

00000e1a <__fixunssfsi>:
     e1a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <__fp_splitA>
     e1e:	88 f0       	brcs	.+34     	; 0xe42 <__fixunssfsi+0x28>
     e20:	9f 57       	subi	r25, 0x7F	; 127
     e22:	98 f0       	brcs	.+38     	; 0xe4a <__fixunssfsi+0x30>
     e24:	b9 2f       	mov	r27, r25
     e26:	99 27       	eor	r25, r25
     e28:	b7 51       	subi	r27, 0x17	; 23
     e2a:	b0 f0       	brcs	.+44     	; 0xe58 <__fixunssfsi+0x3e>
     e2c:	e1 f0       	breq	.+56     	; 0xe66 <__fixunssfsi+0x4c>
     e2e:	66 0f       	add	r22, r22
     e30:	77 1f       	adc	r23, r23
     e32:	88 1f       	adc	r24, r24
     e34:	99 1f       	adc	r25, r25
     e36:	1a f0       	brmi	.+6      	; 0xe3e <__fixunssfsi+0x24>
     e38:	ba 95       	dec	r27
     e3a:	c9 f7       	brne	.-14     	; 0xe2e <__fixunssfsi+0x14>
     e3c:	14 c0       	rjmp	.+40     	; 0xe66 <__fixunssfsi+0x4c>
     e3e:	b1 30       	cpi	r27, 0x01	; 1
     e40:	91 f0       	breq	.+36     	; 0xe66 <__fixunssfsi+0x4c>
     e42:	0e 94 e7 07 	call	0xfce	; 0xfce <__fp_zero>
     e46:	b1 e0       	ldi	r27, 0x01	; 1
     e48:	08 95       	ret
     e4a:	0c 94 e7 07 	jmp	0xfce	; 0xfce <__fp_zero>
     e4e:	67 2f       	mov	r22, r23
     e50:	78 2f       	mov	r23, r24
     e52:	88 27       	eor	r24, r24
     e54:	b8 5f       	subi	r27, 0xF8	; 248
     e56:	39 f0       	breq	.+14     	; 0xe66 <__fixunssfsi+0x4c>
     e58:	b9 3f       	cpi	r27, 0xF9	; 249
     e5a:	cc f3       	brlt	.-14     	; 0xe4e <__fixunssfsi+0x34>
     e5c:	86 95       	lsr	r24
     e5e:	77 95       	ror	r23
     e60:	67 95       	ror	r22
     e62:	b3 95       	inc	r27
     e64:	d9 f7       	brne	.-10     	; 0xe5c <__fixunssfsi+0x42>
     e66:	3e f4       	brtc	.+14     	; 0xe76 <__fixunssfsi+0x5c>
     e68:	90 95       	com	r25
     e6a:	80 95       	com	r24
     e6c:	70 95       	com	r23
     e6e:	61 95       	neg	r22
     e70:	7f 4f       	sbci	r23, 0xFF	; 255
     e72:	8f 4f       	sbci	r24, 0xFF	; 255
     e74:	9f 4f       	sbci	r25, 0xFF	; 255
     e76:	08 95       	ret

00000e78 <__floatunsisf>:
     e78:	e8 94       	clt
     e7a:	09 c0       	rjmp	.+18     	; 0xe8e <__floatsisf+0x12>

00000e7c <__floatsisf>:
     e7c:	97 fb       	bst	r25, 7
     e7e:	3e f4       	brtc	.+14     	; 0xe8e <__floatsisf+0x12>
     e80:	90 95       	com	r25
     e82:	80 95       	com	r24
     e84:	70 95       	com	r23
     e86:	61 95       	neg	r22
     e88:	7f 4f       	sbci	r23, 0xFF	; 255
     e8a:	8f 4f       	sbci	r24, 0xFF	; 255
     e8c:	9f 4f       	sbci	r25, 0xFF	; 255
     e8e:	99 23       	and	r25, r25
     e90:	a9 f0       	breq	.+42     	; 0xebc <__floatsisf+0x40>
     e92:	f9 2f       	mov	r31, r25
     e94:	96 e9       	ldi	r25, 0x96	; 150
     e96:	bb 27       	eor	r27, r27
     e98:	93 95       	inc	r25
     e9a:	f6 95       	lsr	r31
     e9c:	87 95       	ror	r24
     e9e:	77 95       	ror	r23
     ea0:	67 95       	ror	r22
     ea2:	b7 95       	ror	r27
     ea4:	f1 11       	cpse	r31, r1
     ea6:	f8 cf       	rjmp	.-16     	; 0xe98 <__floatsisf+0x1c>
     ea8:	fa f4       	brpl	.+62     	; 0xee8 <__floatsisf+0x6c>
     eaa:	bb 0f       	add	r27, r27
     eac:	11 f4       	brne	.+4      	; 0xeb2 <__floatsisf+0x36>
     eae:	60 ff       	sbrs	r22, 0
     eb0:	1b c0       	rjmp	.+54     	; 0xee8 <__floatsisf+0x6c>
     eb2:	6f 5f       	subi	r22, 0xFF	; 255
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8f 4f       	sbci	r24, 0xFF	; 255
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	16 c0       	rjmp	.+44     	; 0xee8 <__floatsisf+0x6c>
     ebc:	88 23       	and	r24, r24
     ebe:	11 f0       	breq	.+4      	; 0xec4 <__floatsisf+0x48>
     ec0:	96 e9       	ldi	r25, 0x96	; 150
     ec2:	11 c0       	rjmp	.+34     	; 0xee6 <__floatsisf+0x6a>
     ec4:	77 23       	and	r23, r23
     ec6:	21 f0       	breq	.+8      	; 0xed0 <__floatsisf+0x54>
     ec8:	9e e8       	ldi	r25, 0x8E	; 142
     eca:	87 2f       	mov	r24, r23
     ecc:	76 2f       	mov	r23, r22
     ece:	05 c0       	rjmp	.+10     	; 0xeda <__floatsisf+0x5e>
     ed0:	66 23       	and	r22, r22
     ed2:	71 f0       	breq	.+28     	; 0xef0 <__floatsisf+0x74>
     ed4:	96 e8       	ldi	r25, 0x86	; 134
     ed6:	86 2f       	mov	r24, r22
     ed8:	70 e0       	ldi	r23, 0x00	; 0
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	2a f0       	brmi	.+10     	; 0xee8 <__floatsisf+0x6c>
     ede:	9a 95       	dec	r25
     ee0:	66 0f       	add	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	88 1f       	adc	r24, r24
     ee6:	da f7       	brpl	.-10     	; 0xede <__floatsisf+0x62>
     ee8:	88 0f       	add	r24, r24
     eea:	96 95       	lsr	r25
     eec:	87 95       	ror	r24
     eee:	97 f9       	bld	r25, 7
     ef0:	08 95       	ret

00000ef2 <__fp_cmp>:
     ef2:	99 0f       	add	r25, r25
     ef4:	00 08       	sbc	r0, r0
     ef6:	55 0f       	add	r21, r21
     ef8:	aa 0b       	sbc	r26, r26
     efa:	e0 e8       	ldi	r30, 0x80	; 128
     efc:	fe ef       	ldi	r31, 0xFE	; 254
     efe:	16 16       	cp	r1, r22
     f00:	17 06       	cpc	r1, r23
     f02:	e8 07       	cpc	r30, r24
     f04:	f9 07       	cpc	r31, r25
     f06:	c0 f0       	brcs	.+48     	; 0xf38 <__fp_cmp+0x46>
     f08:	12 16       	cp	r1, r18
     f0a:	13 06       	cpc	r1, r19
     f0c:	e4 07       	cpc	r30, r20
     f0e:	f5 07       	cpc	r31, r21
     f10:	98 f0       	brcs	.+38     	; 0xf38 <__fp_cmp+0x46>
     f12:	62 1b       	sub	r22, r18
     f14:	73 0b       	sbc	r23, r19
     f16:	84 0b       	sbc	r24, r20
     f18:	95 0b       	sbc	r25, r21
     f1a:	39 f4       	brne	.+14     	; 0xf2a <__fp_cmp+0x38>
     f1c:	0a 26       	eor	r0, r26
     f1e:	61 f0       	breq	.+24     	; 0xf38 <__fp_cmp+0x46>
     f20:	23 2b       	or	r18, r19
     f22:	24 2b       	or	r18, r20
     f24:	25 2b       	or	r18, r21
     f26:	21 f4       	brne	.+8      	; 0xf30 <__fp_cmp+0x3e>
     f28:	08 95       	ret
     f2a:	0a 26       	eor	r0, r26
     f2c:	09 f4       	brne	.+2      	; 0xf30 <__fp_cmp+0x3e>
     f2e:	a1 40       	sbci	r26, 0x01	; 1
     f30:	a6 95       	lsr	r26
     f32:	8f ef       	ldi	r24, 0xFF	; 255
     f34:	81 1d       	adc	r24, r1
     f36:	81 1d       	adc	r24, r1
     f38:	08 95       	ret

00000f3a <__fp_inf>:
     f3a:	97 f9       	bld	r25, 7
     f3c:	9f 67       	ori	r25, 0x7F	; 127
     f3e:	80 e8       	ldi	r24, 0x80	; 128
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	08 95       	ret

00000f46 <__fp_nan>:
     f46:	9f ef       	ldi	r25, 0xFF	; 255
     f48:	80 ec       	ldi	r24, 0xC0	; 192
     f4a:	08 95       	ret

00000f4c <__fp_pscA>:
     f4c:	00 24       	eor	r0, r0
     f4e:	0a 94       	dec	r0
     f50:	16 16       	cp	r1, r22
     f52:	17 06       	cpc	r1, r23
     f54:	18 06       	cpc	r1, r24
     f56:	09 06       	cpc	r0, r25
     f58:	08 95       	ret

00000f5a <__fp_pscB>:
     f5a:	00 24       	eor	r0, r0
     f5c:	0a 94       	dec	r0
     f5e:	12 16       	cp	r1, r18
     f60:	13 06       	cpc	r1, r19
     f62:	14 06       	cpc	r1, r20
     f64:	05 06       	cpc	r0, r21
     f66:	08 95       	ret

00000f68 <__fp_round>:
     f68:	09 2e       	mov	r0, r25
     f6a:	03 94       	inc	r0
     f6c:	00 0c       	add	r0, r0
     f6e:	11 f4       	brne	.+4      	; 0xf74 <__fp_round+0xc>
     f70:	88 23       	and	r24, r24
     f72:	52 f0       	brmi	.+20     	; 0xf88 <__fp_round+0x20>
     f74:	bb 0f       	add	r27, r27
     f76:	40 f4       	brcc	.+16     	; 0xf88 <__fp_round+0x20>
     f78:	bf 2b       	or	r27, r31
     f7a:	11 f4       	brne	.+4      	; 0xf80 <__fp_round+0x18>
     f7c:	60 ff       	sbrs	r22, 0
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <__fp_round+0x20>
     f80:	6f 5f       	subi	r22, 0xFF	; 255
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
     f84:	8f 4f       	sbci	r24, 0xFF	; 255
     f86:	9f 4f       	sbci	r25, 0xFF	; 255
     f88:	08 95       	ret

00000f8a <__fp_split3>:
     f8a:	57 fd       	sbrc	r21, 7
     f8c:	90 58       	subi	r25, 0x80	; 128
     f8e:	44 0f       	add	r20, r20
     f90:	55 1f       	adc	r21, r21
     f92:	59 f0       	breq	.+22     	; 0xfaa <__fp_splitA+0x10>
     f94:	5f 3f       	cpi	r21, 0xFF	; 255
     f96:	71 f0       	breq	.+28     	; 0xfb4 <__fp_splitA+0x1a>
     f98:	47 95       	ror	r20

00000f9a <__fp_splitA>:
     f9a:	88 0f       	add	r24, r24
     f9c:	97 fb       	bst	r25, 7
     f9e:	99 1f       	adc	r25, r25
     fa0:	61 f0       	breq	.+24     	; 0xfba <__fp_splitA+0x20>
     fa2:	9f 3f       	cpi	r25, 0xFF	; 255
     fa4:	79 f0       	breq	.+30     	; 0xfc4 <__fp_splitA+0x2a>
     fa6:	87 95       	ror	r24
     fa8:	08 95       	ret
     faa:	12 16       	cp	r1, r18
     fac:	13 06       	cpc	r1, r19
     fae:	14 06       	cpc	r1, r20
     fb0:	55 1f       	adc	r21, r21
     fb2:	f2 cf       	rjmp	.-28     	; 0xf98 <__fp_split3+0xe>
     fb4:	46 95       	lsr	r20
     fb6:	f1 df       	rcall	.-30     	; 0xf9a <__fp_splitA>
     fb8:	08 c0       	rjmp	.+16     	; 0xfca <__fp_splitA+0x30>
     fba:	16 16       	cp	r1, r22
     fbc:	17 06       	cpc	r1, r23
     fbe:	18 06       	cpc	r1, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	f1 cf       	rjmp	.-30     	; 0xfa6 <__fp_splitA+0xc>
     fc4:	86 95       	lsr	r24
     fc6:	71 05       	cpc	r23, r1
     fc8:	61 05       	cpc	r22, r1
     fca:	08 94       	sec
     fcc:	08 95       	ret

00000fce <__fp_zero>:
     fce:	e8 94       	clt

00000fd0 <__fp_szero>:
     fd0:	bb 27       	eor	r27, r27
     fd2:	66 27       	eor	r22, r22
     fd4:	77 27       	eor	r23, r23
     fd6:	cb 01       	movw	r24, r22
     fd8:	97 f9       	bld	r25, 7
     fda:	08 95       	ret

00000fdc <__gesf2>:
     fdc:	0e 94 79 07 	call	0xef2	; 0xef2 <__fp_cmp>
     fe0:	08 f4       	brcc	.+2      	; 0xfe4 <__gesf2+0x8>
     fe2:	8f ef       	ldi	r24, 0xFF	; 255
     fe4:	08 95       	ret

00000fe6 <__mulsf3>:
     fe6:	0e 94 06 08 	call	0x100c	; 0x100c <__mulsf3x>
     fea:	0c 94 b4 07 	jmp	0xf68	; 0xf68 <__fp_round>
     fee:	0e 94 a6 07 	call	0xf4c	; 0xf4c <__fp_pscA>
     ff2:	38 f0       	brcs	.+14     	; 0x1002 <__mulsf3+0x1c>
     ff4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <__fp_pscB>
     ff8:	20 f0       	brcs	.+8      	; 0x1002 <__mulsf3+0x1c>
     ffa:	95 23       	and	r25, r21
     ffc:	11 f0       	breq	.+4      	; 0x1002 <__mulsf3+0x1c>
     ffe:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_inf>
    1002:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <__fp_nan>
    1006:	11 24       	eor	r1, r1
    1008:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_szero>

0000100c <__mulsf3x>:
    100c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <__fp_split3>
    1010:	70 f3       	brcs	.-36     	; 0xfee <__mulsf3+0x8>

00001012 <__mulsf3_pse>:
    1012:	95 9f       	mul	r25, r21
    1014:	c1 f3       	breq	.-16     	; 0x1006 <__mulsf3+0x20>
    1016:	95 0f       	add	r25, r21
    1018:	50 e0       	ldi	r21, 0x00	; 0
    101a:	55 1f       	adc	r21, r21
    101c:	62 9f       	mul	r22, r18
    101e:	f0 01       	movw	r30, r0
    1020:	72 9f       	mul	r23, r18
    1022:	bb 27       	eor	r27, r27
    1024:	f0 0d       	add	r31, r0
    1026:	b1 1d       	adc	r27, r1
    1028:	63 9f       	mul	r22, r19
    102a:	aa 27       	eor	r26, r26
    102c:	f0 0d       	add	r31, r0
    102e:	b1 1d       	adc	r27, r1
    1030:	aa 1f       	adc	r26, r26
    1032:	64 9f       	mul	r22, r20
    1034:	66 27       	eor	r22, r22
    1036:	b0 0d       	add	r27, r0
    1038:	a1 1d       	adc	r26, r1
    103a:	66 1f       	adc	r22, r22
    103c:	82 9f       	mul	r24, r18
    103e:	22 27       	eor	r18, r18
    1040:	b0 0d       	add	r27, r0
    1042:	a1 1d       	adc	r26, r1
    1044:	62 1f       	adc	r22, r18
    1046:	73 9f       	mul	r23, r19
    1048:	b0 0d       	add	r27, r0
    104a:	a1 1d       	adc	r26, r1
    104c:	62 1f       	adc	r22, r18
    104e:	83 9f       	mul	r24, r19
    1050:	a0 0d       	add	r26, r0
    1052:	61 1d       	adc	r22, r1
    1054:	22 1f       	adc	r18, r18
    1056:	74 9f       	mul	r23, r20
    1058:	33 27       	eor	r19, r19
    105a:	a0 0d       	add	r26, r0
    105c:	61 1d       	adc	r22, r1
    105e:	23 1f       	adc	r18, r19
    1060:	84 9f       	mul	r24, r20
    1062:	60 0d       	add	r22, r0
    1064:	21 1d       	adc	r18, r1
    1066:	82 2f       	mov	r24, r18
    1068:	76 2f       	mov	r23, r22
    106a:	6a 2f       	mov	r22, r26
    106c:	11 24       	eor	r1, r1
    106e:	9f 57       	subi	r25, 0x7F	; 127
    1070:	50 40       	sbci	r21, 0x00	; 0
    1072:	9a f0       	brmi	.+38     	; 0x109a <__mulsf3_pse+0x88>
    1074:	f1 f0       	breq	.+60     	; 0x10b2 <__mulsf3_pse+0xa0>
    1076:	88 23       	and	r24, r24
    1078:	4a f0       	brmi	.+18     	; 0x108c <__mulsf3_pse+0x7a>
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	bb 1f       	adc	r27, r27
    1080:	66 1f       	adc	r22, r22
    1082:	77 1f       	adc	r23, r23
    1084:	88 1f       	adc	r24, r24
    1086:	91 50       	subi	r25, 0x01	; 1
    1088:	50 40       	sbci	r21, 0x00	; 0
    108a:	a9 f7       	brne	.-22     	; 0x1076 <__mulsf3_pse+0x64>
    108c:	9e 3f       	cpi	r25, 0xFE	; 254
    108e:	51 05       	cpc	r21, r1
    1090:	80 f0       	brcs	.+32     	; 0x10b2 <__mulsf3_pse+0xa0>
    1092:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__fp_inf>
    1096:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__fp_szero>
    109a:	5f 3f       	cpi	r21, 0xFF	; 255
    109c:	e4 f3       	brlt	.-8      	; 0x1096 <__mulsf3_pse+0x84>
    109e:	98 3e       	cpi	r25, 0xE8	; 232
    10a0:	d4 f3       	brlt	.-12     	; 0x1096 <__mulsf3_pse+0x84>
    10a2:	86 95       	lsr	r24
    10a4:	77 95       	ror	r23
    10a6:	67 95       	ror	r22
    10a8:	b7 95       	ror	r27
    10aa:	f7 95       	ror	r31
    10ac:	e7 95       	ror	r30
    10ae:	9f 5f       	subi	r25, 0xFF	; 255
    10b0:	c1 f7       	brne	.-16     	; 0x10a2 <__mulsf3_pse+0x90>
    10b2:	fe 2b       	or	r31, r30
    10b4:	88 0f       	add	r24, r24
    10b6:	91 1d       	adc	r25, r1
    10b8:	96 95       	lsr	r25
    10ba:	87 95       	ror	r24
    10bc:	97 f9       	bld	r25, 7
    10be:	08 95       	ret

000010c0 <__divmodsi4>:
    10c0:	05 2e       	mov	r0, r21
    10c2:	97 fb       	bst	r25, 7
    10c4:	1e f4       	brtc	.+6      	; 0x10cc <__divmodsi4+0xc>
    10c6:	00 94       	com	r0
    10c8:	0e 94 77 08 	call	0x10ee	; 0x10ee <__negsi2>
    10cc:	57 fd       	sbrc	r21, 7
    10ce:	07 d0       	rcall	.+14     	; 0x10de <__divmodsi4_neg2>
    10d0:	0e 94 7f 08 	call	0x10fe	; 0x10fe <__udivmodsi4>
    10d4:	07 fc       	sbrc	r0, 7
    10d6:	03 d0       	rcall	.+6      	; 0x10de <__divmodsi4_neg2>
    10d8:	4e f4       	brtc	.+18     	; 0x10ec <__divmodsi4_exit>
    10da:	0c 94 77 08 	jmp	0x10ee	; 0x10ee <__negsi2>

000010de <__divmodsi4_neg2>:
    10de:	50 95       	com	r21
    10e0:	40 95       	com	r20
    10e2:	30 95       	com	r19
    10e4:	21 95       	neg	r18
    10e6:	3f 4f       	sbci	r19, 0xFF	; 255
    10e8:	4f 4f       	sbci	r20, 0xFF	; 255
    10ea:	5f 4f       	sbci	r21, 0xFF	; 255

000010ec <__divmodsi4_exit>:
    10ec:	08 95       	ret

000010ee <__negsi2>:
    10ee:	90 95       	com	r25
    10f0:	80 95       	com	r24
    10f2:	70 95       	com	r23
    10f4:	61 95       	neg	r22
    10f6:	7f 4f       	sbci	r23, 0xFF	; 255
    10f8:	8f 4f       	sbci	r24, 0xFF	; 255
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	08 95       	ret

000010fe <__udivmodsi4>:
    10fe:	a1 e2       	ldi	r26, 0x21	; 33
    1100:	1a 2e       	mov	r1, r26
    1102:	aa 1b       	sub	r26, r26
    1104:	bb 1b       	sub	r27, r27
    1106:	fd 01       	movw	r30, r26
    1108:	0d c0       	rjmp	.+26     	; 0x1124 <__udivmodsi4_ep>

0000110a <__udivmodsi4_loop>:
    110a:	aa 1f       	adc	r26, r26
    110c:	bb 1f       	adc	r27, r27
    110e:	ee 1f       	adc	r30, r30
    1110:	ff 1f       	adc	r31, r31
    1112:	a2 17       	cp	r26, r18
    1114:	b3 07       	cpc	r27, r19
    1116:	e4 07       	cpc	r30, r20
    1118:	f5 07       	cpc	r31, r21
    111a:	20 f0       	brcs	.+8      	; 0x1124 <__udivmodsi4_ep>
    111c:	a2 1b       	sub	r26, r18
    111e:	b3 0b       	sbc	r27, r19
    1120:	e4 0b       	sbc	r30, r20
    1122:	f5 0b       	sbc	r31, r21

00001124 <__udivmodsi4_ep>:
    1124:	66 1f       	adc	r22, r22
    1126:	77 1f       	adc	r23, r23
    1128:	88 1f       	adc	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	1a 94       	dec	r1
    112e:	69 f7       	brne	.-38     	; 0x110a <__udivmodsi4_loop>
    1130:	60 95       	com	r22
    1132:	70 95       	com	r23
    1134:	80 95       	com	r24
    1136:	90 95       	com	r25
    1138:	9b 01       	movw	r18, r22
    113a:	ac 01       	movw	r20, r24
    113c:	bd 01       	movw	r22, r26
    113e:	cf 01       	movw	r24, r30
    1140:	08 95       	ret

00001142 <_exit>:
    1142:	f8 94       	cli

00001144 <__stop_program>:
    1144:	ff cf       	rjmp	.-2      	; 0x1144 <__stop_program>
