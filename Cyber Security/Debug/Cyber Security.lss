
Cyber Security.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  000015c2  00001656  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a9  0080010a  0080010a  00001700  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000270  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e17  00000000  00000000  00001a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000efa  00000000  00000000  0000481f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014bb  00000000  00000000  00005719  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000698  00000000  00000000  00006bd4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e39  00000000  00000000  0000726c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f53  00000000  00000000  000080a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00009ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__vector_1>
       8:	0c 94 36 05 	jmp	0xa6c	; 0xa6c <__vector_2>
       c:	0c 94 5f 05 	jmp	0xabe	; 0xabe <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 ba 05 	jmp	0xb74	; 0xb74 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ec       	ldi	r30, 0xC2	; 194
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 00 	call	0x170	; 0x170 <main>
      8a:	0c 94 df 0a 	jmp	0x15be	; 0x15be <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gen_num>:

void f1 ();
void f2 ();
u8 flag=0,data[5][20],Total_C=0;
u32 gen_num()
{
      92:	8f 92       	push	r8
      94:	9f 92       	push	r9
      96:	af 92       	push	r10
      98:	bf 92       	push	r11
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
	static u32 i=1;
	random_num =(random_num*i)-3*i+random_num;
      a2:	80 90 70 00 	lds	r8, 0x0070	; 0x800070 <random_num>
      a6:	90 90 71 00 	lds	r9, 0x0071	; 0x800071 <random_num+0x1>
      aa:	a0 90 72 00 	lds	r10, 0x0072	; 0x800072 <random_num+0x2>
      ae:	b0 90 73 00 	lds	r11, 0x0073	; 0x800073 <random_num+0x3>
      b2:	c0 90 60 00 	lds	r12, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
      b6:	d0 90 61 00 	lds	r13, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
      ba:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
      be:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
      c2:	a5 01       	movw	r20, r10
      c4:	94 01       	movw	r18, r8
      c6:	23 50       	subi	r18, 0x03	; 3
      c8:	31 09       	sbc	r19, r1
      ca:	41 09       	sbc	r20, r1
      cc:	51 09       	sbc	r21, r1
      ce:	c7 01       	movw	r24, r14
      d0:	b6 01       	movw	r22, r12
      d2:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsi3>
      d6:	68 0d       	add	r22, r8
      d8:	79 1d       	adc	r23, r9
      da:	8a 1d       	adc	r24, r10
      dc:	9b 1d       	adc	r25, r11
      de:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <random_num>
      e2:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <random_num+0x1>
      e6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <random_num+0x2>
      ea:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <random_num+0x3>
	i+=2;
      ee:	22 e0       	ldi	r18, 0x02	; 2
      f0:	c2 0e       	add	r12, r18
      f2:	d1 1c       	adc	r13, r1
      f4:	e1 1c       	adc	r14, r1
      f6:	f1 1c       	adc	r15, r1
      f8:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <__DATA_REGION_ORIGIN__>
      fc:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     100:	e0 92 62 00 	sts	0x0062, r14	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
     104:	f0 92 63 00 	sts	0x0063, r15	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	
	return random_num;
	
	
}
     108:	ff 90       	pop	r15
     10a:	ef 90       	pop	r14
     10c:	df 90       	pop	r13
     10e:	cf 90       	pop	r12
     110:	bf 90       	pop	r11
     112:	af 90       	pop	r10
     114:	9f 90       	pop	r9
     116:	8f 90       	pop	r8
     118:	08 95       	ret

0000011a <f1>:


void f1 ()
{
	static  Rec_C=0,R_flag=0;
	R_flag=UART_ReceiveStringAshync_V3(&data[0]);
     11a:	8b e1       	ldi	r24, 0x1B	; 27
     11c:	91 e0       	ldi	r25, 0x01	; 1
     11e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <UART_ReceiveStringAshync_V3>
	if (R_flag==UART_FREE)
     122:	88 30       	cpi	r24, 0x08	; 8
     124:	21 f5       	brne	.+72     	; 0x16e <f1+0x54>
	{
		LCD_SetCursor(1,10);
     126:	6a e0       	ldi	r22, 0x0A	; 10
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_SetCursor>
		LCD_WriteString(data[Rec_C]);
     12e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__data_end>
     132:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__data_end+0x1>
     136:	44 e1       	ldi	r20, 0x14	; 20
     138:	42 9f       	mul	r20, r18
     13a:	c0 01       	movw	r24, r0
     13c:	43 9f       	mul	r20, r19
     13e:	90 0d       	add	r25, r0
     140:	11 24       	eor	r1, r1
     142:	85 5e       	subi	r24, 0xE5	; 229
     144:	9e 4f       	sbci	r25, 0xFE	; 254
     146:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
		LCD_WriteString("   ");
     14a:	88 e7       	ldi	r24, 0x78	; 120
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
		Rec_C++;
     152:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     156:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
     15a:	01 96       	adiw	r24, 0x01	; 1
     15c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
     160:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		Total_C++;
     164:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Total_C>
     168:	8f 5f       	subi	r24, 0xFF	; 255
     16a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Total_C>
     16e:	08 95       	ret

00000170 <main>:
	
	
}

int main(void)
{
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
     174:	cd b7       	in	r28, 0x3d	; 61
     176:	de b7       	in	r29, 0x3e	; 62
     178:	60 97       	sbiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
	u8 x=0, flag_a=0,flag_b=0;
	int i,k;
	u16 num=0;
	DIO_Init_All();
     184:	0e 94 68 04 	call	0x8d0	; 0x8d0 <DIO_Init_All>
	LCD_Init();
     188:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_Init>
	GLOBALE_ENABLE();
     18c:	78 94       	sei
	UART_Init();
     18e:	0e 94 88 05 	call	0xb10	; 0xb10 <UART_Init>
	UART_RX_InterruptEnable();
     192:	0e 94 ad 05 	call	0xb5a	; 0xb5a <UART_RX_InterruptEnable>
	UART_RX_SetCallBack(UART_RX_FUN);
     196:	8c e0       	ldi	r24, 0x0C	; 12
     198:	96 e0       	ldi	r25, 0x06	; 6
     19a:	0e 94 b1 05 	call	0xb62	; 0xb62 <UART_RX_SetCallBack>
	char *ptr;
	u32 ECode,serv;
	
	char szNumbers[] = "2001 60c0c0";
     19e:	8c e0       	ldi	r24, 0x0C	; 12
     1a0:	ec eb       	ldi	r30, 0xBC	; 188
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	de 01       	movw	r26, r28
     1a6:	13 96       	adiw	r26, 0x03	; 3
     1a8:	01 90       	ld	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	8a 95       	dec	r24
     1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x38>
	char * pEnd;
	long int li1, li2, li3, li4;
	li1 = strtol (szNumbers,&pEnd,16);
     1b0:	40 e1       	ldi	r20, 0x10	; 16
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	be 01       	movw	r22, r28
     1b6:	61 5f       	subi	r22, 0xF1	; 241
     1b8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ba:	ce 01       	movw	r24, r28
     1bc:	03 96       	adiw	r24, 0x03	; 3
     1be:	0e 94 bd 06 	call	0xd7a	; 0xd7a <strtol>
     1c2:	16 2f       	mov	r17, r22
     1c4:	07 2f       	mov	r16, r23
     1c6:	f8 2e       	mov	r15, r24
     1c8:	e9 2e       	mov	r14, r25
	li2 = strtol (pEnd,&pEnd,16);
     1ca:	40 e1       	ldi	r20, 0x10	; 16
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	be 01       	movw	r22, r28
     1d0:	61 5f       	subi	r22, 0xF1	; 241
     1d2:	7f 4f       	sbci	r23, 0xFF	; 255
     1d4:	8f 85       	ldd	r24, Y+15	; 0x0f
     1d6:	98 89       	ldd	r25, Y+16	; 0x10
     1d8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <strtol>

	printf ("The decimal equivalents are: %ld, %ld, .\n", li1, li2);
     1dc:	9f 93       	push	r25
     1de:	8f 93       	push	r24
     1e0:	7f 93       	push	r23
     1e2:	6f 93       	push	r22
     1e4:	ef 92       	push	r14
     1e6:	ff 92       	push	r15
     1e8:	0f 93       	push	r16
     1ea:	1f 93       	push	r17
     1ec:	8c e7       	ldi	r24, 0x7C	; 124
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	9f 93       	push	r25
     1f2:	8f 93       	push	r24
     1f4:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <printf>
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	f8 94       	cli
     1fc:	de bf       	out	0x3e, r29	; 62
     1fe:	0f be       	out	0x3f, r0	; 63
     200:	cd bf       	out	0x3d, r28	; 61
	
}

int main(void)
{
	u8 x=0, flag_a=0,flag_b=0;
     202:	00 e0       	ldi	r16, 0x00	; 0
     204:	10 e0       	ldi	r17, 0x00	; 0
	printf ("The decimal equivalents are: %ld, %ld, .\n", li1, li2);
	
	while(1)
	{

		f1();   //rec
     206:	0e 94 8d 00 	call	0x11a	; 0x11a <f1>

		while(Total_C>0)   // i have messages
     20a:	e4 c0       	rjmp	.+456    	; 0x3d4 <main+0x264>
		{

			serv = strtol (data[0],&ptr,16);
     20c:	40 e1       	ldi	r20, 0x10	; 16
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	be 01       	movw	r22, r28
     212:	6f 5f       	subi	r22, 0xFF	; 255
     214:	7f 4f       	sbci	r23, 0xFF	; 255
     216:	8b e1       	ldi	r24, 0x1B	; 27
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <strtol>
     21e:	6b 01       	movw	r12, r22
     220:	7c 01       	movw	r14, r24
			ECode = strtol(ptr,&ptr, 16);
     222:	40 e1       	ldi	r20, 0x10	; 16
     224:	50 e0       	ldi	r21, 0x00	; 0
     226:	be 01       	movw	r22, r28
     228:	6f 5f       	subi	r22, 0xFF	; 255
     22a:	7f 4f       	sbci	r23, 0xFF	; 255
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	9a 81       	ldd	r25, Y+2	; 0x02
     230:	0e 94 bd 06 	call	0xd7a	; 0xd7a <strtol>
     234:	ab 01       	movw	r20, r22
     236:	bc 01       	movw	r22, r24
			Total_C--;
     238:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Total_C>
     23c:	81 50       	subi	r24, 0x01	; 1
     23e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <Total_C>
			if (serv==securty_req)
     242:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <securty_req>
     246:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <securty_req+0x1>
     24a:	a0 e0       	ldi	r26, 0x00	; 0
     24c:	b0 e0       	ldi	r27, 0x00	; 0
     24e:	c8 16       	cp	r12, r24
     250:	d9 06       	cpc	r13, r25
     252:	ea 06       	cpc	r14, r26
     254:	fb 06       	cpc	r15, r27
     256:	31 f5       	brne	.+76     	; 0x2a4 <main+0x134>
			{
				flag_a=1;
				LCD_Clear();
     258:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_Clear>
				LCD_SetCursor(0,0);
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	80 e0       	ldi	r24, 0x00	; 0
     260:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_SetCursor>
				random_num =gen_num();
     264:	0e 94 49 00 	call	0x92	; 0x92 <gen_num>
     268:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <random_num>
     26c:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <random_num+0x1>
     270:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <random_num+0x2>
     274:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <random_num+0x3>
				LCD_WriteHex(securty_ans);
     278:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <securty_ans>
     27c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <securty_ans+0x1>
     280:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_WriteHex>
				LCD_WriteString("  ");
     284:	89 e7       	ldi	r24, 0x79	; 121
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
				LCD_WriteHexlong(random_num);
     28c:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <random_num>
     290:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <random_num+0x1>
     294:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <random_num+0x2>
     298:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <random_num+0x3>
     29c:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <LCD_WriteHexlong>
			serv = strtol (data[0],&ptr,16);
			ECode = strtol(ptr,&ptr, 16);
			Total_C--;
			if (serv==securty_req)
			{
				flag_a=1;
     2a0:	11 e0       	ldi	r17, 0x01	; 1
     2a2:	98 c0       	rjmp	.+304    	; 0x3d4 <main+0x264>
				random_num =gen_num();
				LCD_WriteHex(securty_ans);
				LCD_WriteString("  ");
				LCD_WriteHexlong(random_num);
			}
			else if(serv==service_send)
     2a4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <service_send>
     2a8:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <service_send+0x1>
     2ac:	a0 e0       	ldi	r26, 0x00	; 0
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	c8 16       	cp	r12, r24
     2b2:	d9 06       	cpc	r13, r25
     2b4:	ea 06       	cpc	r14, r26
     2b6:	fb 06       	cpc	r15, r27
     2b8:	09 f0       	breq	.+2      	; 0x2bc <main+0x14c>
     2ba:	3f c0       	rjmp	.+126    	; 0x33a <main+0x1ca>
			{
				if (flag_b==1) //u have access
     2bc:	01 30       	cpi	r16, 0x01	; 1
     2be:	91 f5       	brne	.+100    	; 0x324 <main+0x1b4>
				{
					if (ECode==routine)
     2c0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <routine>
     2c4:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <routine+0x1>
     2c8:	a0 e0       	ldi	r26, 0x00	; 0
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	48 17       	cp	r20, r24
     2ce:	59 07       	cpc	r21, r25
     2d0:	6a 07       	cpc	r22, r26
     2d2:	7b 07       	cpc	r23, r27
     2d4:	e1 f4       	brne	.+56     	; 0x30e <main+0x19e>
					{
						LCD_Clear();
     2d6:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_Clear>
						LCD_SetCursor(0,0);
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_SetCursor>
						LCD_WriteHex(service_send);
     2e2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <service_send>
     2e6:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <service_send+0x1>
     2ea:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_WriteHex>
						LCD_WriteString("  ");
     2ee:	89 e7       	ldi	r24, 0x79	; 121
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
						LCD_WriteHex(routine);
     2f6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <routine>
     2fa:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <routine+0x1>
     2fe:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_WriteHex>
						SET_BIT(PORTB,0);
     302:	88 b3       	in	r24, 0x18	; 24
     304:	81 60       	ori	r24, 0x01	; 1
     306:	88 bb       	out	0x18, r24	; 24
						flag_b=0;
     308:	00 e0       	ldi	r16, 0x00	; 0
						flag_a=0;
     30a:	10 e0       	ldi	r17, 0x00	; 0
     30c:	63 c0       	rjmp	.+198    	; 0x3d4 <main+0x264>
					}
					else
					{
						LCD_Clear();
     30e:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_Clear>
						LCD_SetCursor(0,0);
     312:	60 e0       	ldi	r22, 0x00	; 0
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_SetCursor>
						LCD_WriteString(NRC);
     31a:	86 ea       	ldi	r24, 0xA6	; 166
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
     322:	58 c0       	rjmp	.+176    	; 0x3d4 <main+0x264>
					}
					
				}
				else
				{
					LCD_Clear();
     324:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_Clear>
					LCD_SetCursor(0,0);
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_SetCursor>
					LCD_WriteString("ACCESS DENIED ");
     330:	8d ea       	ldi	r24, 0xAD	; 173
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
     338:	4d c0       	rjmp	.+154    	; 0x3d4 <main+0x264>
				}
				
			}
			else if( serv==enc_send)
     33a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <enc_send>
     33e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <enc_send+0x1>
     342:	a0 e0       	ldi	r26, 0x00	; 0
     344:	b0 e0       	ldi	r27, 0x00	; 0
     346:	c8 16       	cp	r12, r24
     348:	d9 06       	cpc	r13, r25
     34a:	ea 06       	cpc	r14, r26
     34c:	fb 06       	cpc	r15, r27
     34e:	09 f0       	breq	.+2      	; 0x352 <main+0x1e2>
     350:	41 c0       	rjmp	.+130    	; 0x3d4 <main+0x264>
			{

				if (flag_a==1)
     352:	11 30       	cpi	r17, 0x01	; 1
     354:	a1 f5       	brne	.+104    	; 0x3be <main+0x24e>
				{


					if ((random_num^key)==ECode)
     356:	c0 90 70 00 	lds	r12, 0x0070	; 0x800070 <random_num>
     35a:	d0 90 71 00 	lds	r13, 0x0071	; 0x800071 <random_num+0x1>
     35e:	e0 90 72 00 	lds	r14, 0x0072	; 0x800072 <random_num+0x2>
     362:	f0 90 73 00 	lds	r15, 0x0073	; 0x800073 <random_num+0x3>
     366:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <key>
     36a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <key+0x1>
     36e:	a0 91 76 00 	lds	r26, 0x0076	; 0x800076 <key+0x2>
     372:	b0 91 77 00 	lds	r27, 0x0077	; 0x800077 <key+0x3>
     376:	8c 25       	eor	r24, r12
     378:	9d 25       	eor	r25, r13
     37a:	ae 25       	eor	r26, r14
     37c:	bf 25       	eor	r27, r15
     37e:	48 17       	cp	r20, r24
     380:	59 07       	cpc	r21, r25
     382:	6a 07       	cpc	r22, r26
     384:	7b 07       	cpc	r23, r27
     386:	79 f4       	brne	.+30     	; 0x3a6 <main+0x236>
					{
						LCD_Clear();
     388:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_Clear>
						LCD_SetCursor(0,0);
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_SetCursor>
						LCD_WriteHex(enc_rec);
     394:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <enc_rec>
     398:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <enc_rec+0x1>
     39c:	0e 94 2a 03 	call	0x654	; 0x654 <LCD_WriteHex>
						flag_a=0;
						flag_b=1;
     3a0:	01 e0       	ldi	r16, 0x01	; 1
					if ((random_num^key)==ECode)
					{
						LCD_Clear();
						LCD_SetCursor(0,0);
						LCD_WriteHex(enc_rec);
						flag_a=0;
     3a2:	10 e0       	ldi	r17, 0x00	; 0
     3a4:	17 c0       	rjmp	.+46     	; 0x3d4 <main+0x264>
						flag_b=1;
					}
					else
					{
						LCD_Clear();
     3a6:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_Clear>
						LCD_SetCursor(0,0);
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_SetCursor>
						LCD_WriteString(NRC);
     3b2:	86 ea       	ldi	r24, 0xA6	; 166
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
						flag_a=0;
     3ba:	10 e0       	ldi	r17, 0x00	; 0
     3bc:	0b c0       	rjmp	.+22     	; 0x3d4 <main+0x264>
					}

				}
				else
				{
					LCD_Clear();
     3be:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <LCD_Clear>
					LCD_SetCursor(0,0);
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_SetCursor>
					LCD_WriteString(NRC);
     3ca:	86 ea       	ldi	r24, 0xA6	; 166
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
					flag_a=0;
     3d2:	10 e0       	ldi	r17, 0x00	; 0
	while(1)
	{

		f1();   //rec

		while(Total_C>0)   // i have messages
     3d4:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <Total_C>
     3d8:	81 11       	cpse	r24, r1
     3da:	18 cf       	rjmp	.-464    	; 0x20c <main+0x9c>
     3dc:	14 cf       	rjmp	.-472    	; 0x206 <main+0x96>

000003de <WriteIns>:
		arr_l_NumString[u8_l_StrLen - u8_l_NumIterator - 1] = u8_l_tempVar;
	}

	/* Display Number */
	LCD_WriteString(arr_l_NumString);
}
     3de:	cf 93       	push	r28
     3e0:	c8 2f       	mov	r28, r24
     3e2:	60 e0       	ldi	r22, 0x00	; 0
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     3ea:	6c 2f       	mov	r22, r28
     3ec:	66 1f       	adc	r22, r22
     3ee:	66 27       	eor	r22, r22
     3f0:	66 1f       	adc	r22, r22
     3f2:	87 e0       	ldi	r24, 0x07	; 7
     3f4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     3f8:	c6 fb       	bst	r28, 6
     3fa:	66 27       	eor	r22, r22
     3fc:	60 f9       	bld	r22, 0
     3fe:	86 e0       	ldi	r24, 0x06	; 6
     400:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     404:	c5 fb       	bst	r28, 5
     406:	66 27       	eor	r22, r22
     408:	60 f9       	bld	r22, 0
     40a:	85 e0       	ldi	r24, 0x05	; 5
     40c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     410:	c4 fb       	bst	r28, 4
     412:	66 27       	eor	r22, r22
     414:	60 f9       	bld	r22, 0
     416:	84 e0       	ldi	r24, 0x04	; 4
     418:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	83 e0       	ldi	r24, 0x03	; 3
     420:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     424:	8f e9       	ldi	r24, 0x9F	; 159
     426:	9f e0       	ldi	r25, 0x0F	; 15
     428:	01 97       	sbiw	r24, 0x01	; 1
     42a:	f1 f7       	brne	.-4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     42e:	00 00       	nop
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	83 e0       	ldi	r24, 0x03	; 3
     434:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     438:	8f e9       	ldi	r24, 0x9F	; 159
     43a:	9f e0       	ldi	r25, 0x0F	; 15
     43c:	01 97       	sbiw	r24, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     440:	00 c0       	rjmp	.+0      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
     442:	00 00       	nop
     444:	c3 fb       	bst	r28, 3
     446:	66 27       	eor	r22, r22
     448:	60 f9       	bld	r22, 0
     44a:	87 e0       	ldi	r24, 0x07	; 7
     44c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     450:	c2 fb       	bst	r28, 2
     452:	66 27       	eor	r22, r22
     454:	60 f9       	bld	r22, 0
     456:	86 e0       	ldi	r24, 0x06	; 6
     458:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     45c:	c1 fb       	bst	r28, 1
     45e:	66 27       	eor	r22, r22
     460:	60 f9       	bld	r22, 0
     462:	85 e0       	ldi	r24, 0x05	; 5
     464:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     468:	6c 2f       	mov	r22, r28
     46a:	61 70       	andi	r22, 0x01	; 1
     46c:	84 e0       	ldi	r24, 0x04	; 4
     46e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	83 e0       	ldi	r24, 0x03	; 3
     476:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     47a:	8f e9       	ldi	r24, 0x9F	; 159
     47c:	9f e0       	ldi	r25, 0x0F	; 15
     47e:	01 97       	sbiw	r24, 0x01	; 1
     480:	f1 f7       	brne	.-4      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     482:	00 c0       	rjmp	.+0      	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
     484:	00 00       	nop
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     48e:	8f e9       	ldi	r24, 0x9F	; 159
     490:	9f e0       	ldi	r25, 0x0F	; 15
     492:	01 97       	sbiw	r24, 0x01	; 1
     494:	f1 f7       	brne	.-4      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
     496:	00 c0       	rjmp	.+0      	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
     498:	00 00       	nop
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <WriteData>:
     49e:	cf 93       	push	r28
     4a0:	c8 2f       	mov	r28, r24
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     4aa:	6c 2f       	mov	r22, r28
     4ac:	66 1f       	adc	r22, r22
     4ae:	66 27       	eor	r22, r22
     4b0:	66 1f       	adc	r22, r22
     4b2:	87 e0       	ldi	r24, 0x07	; 7
     4b4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     4b8:	c6 fb       	bst	r28, 6
     4ba:	66 27       	eor	r22, r22
     4bc:	60 f9       	bld	r22, 0
     4be:	86 e0       	ldi	r24, 0x06	; 6
     4c0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     4c4:	c5 fb       	bst	r28, 5
     4c6:	66 27       	eor	r22, r22
     4c8:	60 f9       	bld	r22, 0
     4ca:	85 e0       	ldi	r24, 0x05	; 5
     4cc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     4d0:	c4 fb       	bst	r28, 4
     4d2:	66 27       	eor	r22, r22
     4d4:	60 f9       	bld	r22, 0
     4d6:	84 e0       	ldi	r24, 0x04	; 4
     4d8:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	83 e0       	ldi	r24, 0x03	; 3
     4e0:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     4e4:	8f e9       	ldi	r24, 0x9F	; 159
     4e6:	9f e0       	ldi	r25, 0x0F	; 15
     4e8:	01 97       	sbiw	r24, 0x01	; 1
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <WriteData+0x4a>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <WriteData+0x50>
     4ee:	00 00       	nop
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	83 e0       	ldi	r24, 0x03	; 3
     4f4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     4f8:	8f e9       	ldi	r24, 0x9F	; 159
     4fa:	9f e0       	ldi	r25, 0x0F	; 15
     4fc:	01 97       	sbiw	r24, 0x01	; 1
     4fe:	f1 f7       	brne	.-4      	; 0x4fc <WriteData+0x5e>
     500:	00 c0       	rjmp	.+0      	; 0x502 <WriteData+0x64>
     502:	00 00       	nop
     504:	c3 fb       	bst	r28, 3
     506:	66 27       	eor	r22, r22
     508:	60 f9       	bld	r22, 0
     50a:	87 e0       	ldi	r24, 0x07	; 7
     50c:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     510:	c2 fb       	bst	r28, 2
     512:	66 27       	eor	r22, r22
     514:	60 f9       	bld	r22, 0
     516:	86 e0       	ldi	r24, 0x06	; 6
     518:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     51c:	c1 fb       	bst	r28, 1
     51e:	66 27       	eor	r22, r22
     520:	60 f9       	bld	r22, 0
     522:	85 e0       	ldi	r24, 0x05	; 5
     524:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     528:	6c 2f       	mov	r22, r28
     52a:	61 70       	andi	r22, 0x01	; 1
     52c:	84 e0       	ldi	r24, 0x04	; 4
     52e:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	83 e0       	ldi	r24, 0x03	; 3
     536:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     53a:	8f e9       	ldi	r24, 0x9F	; 159
     53c:	9f e0       	ldi	r25, 0x0F	; 15
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	f1 f7       	brne	.-4      	; 0x53e <WriteData+0xa0>
     542:	00 c0       	rjmp	.+0      	; 0x544 <WriteData+0xa6>
     544:	00 00       	nop
     546:	60 e0       	ldi	r22, 0x00	; 0
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	0e 94 78 04 	call	0x8f0	; 0x8f0 <DIO_writepin>
     54e:	8f e9       	ldi	r24, 0x9F	; 159
     550:	9f e0       	ldi	r25, 0x0F	; 15
     552:	01 97       	sbiw	r24, 0x01	; 1
     554:	f1 f7       	brne	.-4      	; 0x552 <WriteData+0xb4>
     556:	00 c0       	rjmp	.+0      	; 0x558 <WriteData+0xba>
     558:	00 00       	nop
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <LCD_Init>:
     55e:	2f ef       	ldi	r18, 0xFF	; 255
     560:	80 e7       	ldi	r24, 0x70	; 112
     562:	92 e0       	ldi	r25, 0x02	; 2
     564:	21 50       	subi	r18, 0x01	; 1
     566:	80 40       	sbci	r24, 0x00	; 0
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <LCD_Init+0x6>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <LCD_Init+0x10>
     56e:	00 00       	nop
     570:	82 e0       	ldi	r24, 0x02	; 2
     572:	0e 94 ef 01 	call	0x3de	; 0x3de <WriteIns>
     576:	88 e2       	ldi	r24, 0x28	; 40
     578:	0e 94 ef 01 	call	0x3de	; 0x3de <WriteIns>
     57c:	8c e0       	ldi	r24, 0x0C	; 12
     57e:	0e 94 ef 01 	call	0x3de	; 0x3de <WriteIns>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	0e 94 ef 01 	call	0x3de	; 0x3de <WriteIns>
     588:	8f e9       	ldi	r24, 0x9F	; 159
     58a:	9f e0       	ldi	r25, 0x0F	; 15
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <LCD_Init+0x2e>
     590:	00 c0       	rjmp	.+0      	; 0x592 <LCD_Init+0x34>
     592:	00 00       	nop
     594:	86 e0       	ldi	r24, 0x06	; 6
     596:	0e 94 ef 01 	call	0x3de	; 0x3de <WriteIns>
     59a:	08 95       	ret

0000059c <LCD_WriteChar>:
     59c:	0e 94 4f 02 	call	0x49e	; 0x49e <WriteData>
     5a0:	08 95       	ret

000005a2 <LCD_WriteString>:
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	8c 01       	movw	r16, r24
     5aa:	c0 e0       	ldi	r28, 0x00	; 0
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <LCD_WriteString+0x12>
     5ae:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_WriteChar>
     5b2:	cf 5f       	subi	r28, 0xFF	; 255
     5b4:	f8 01       	movw	r30, r16
     5b6:	ec 0f       	add	r30, r28
     5b8:	f1 1d       	adc	r31, r1
     5ba:	80 81       	ld	r24, Z
     5bc:	81 11       	cpse	r24, r1
     5be:	f7 cf       	rjmp	.-18     	; 0x5ae <LCD_WriteString+0xc>
     5c0:	cf 91       	pop	r28
     5c2:	1f 91       	pop	r17
     5c4:	0f 91       	pop	r16
     5c6:	08 95       	ret

000005c8 <LCD_SetCursor>:
     5c8:	81 11       	cpse	r24, r1
     5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <LCD_SetCursor+0xe>
     5cc:	86 2f       	mov	r24, r22
     5ce:	80 68       	ori	r24, 0x80	; 128
     5d0:	0e 94 ef 01 	call	0x3de	; 0x3de <WriteIns>
     5d4:	08 95       	ret
     5d6:	81 30       	cpi	r24, 0x01	; 1
     5d8:	21 f4       	brne	.+8      	; 0x5e2 <LCD_SetCursor+0x1a>
     5da:	80 ec       	ldi	r24, 0xC0	; 192
     5dc:	86 0f       	add	r24, r22
     5de:	0e 94 ef 01 	call	0x3de	; 0x3de <WriteIns>
     5e2:	08 95       	ret

000005e4 <LCD_Clear>:
     5e4:	81 e0       	ldi	r24, 0x01	; 1
     5e6:	0e 94 ef 01 	call	0x3de	; 0x3de <WriteIns>
     5ea:	8f e9       	ldi	r24, 0x9F	; 159
     5ec:	9f e0       	ldi	r25, 0x0F	; 15
     5ee:	01 97       	sbiw	r24, 0x01	; 1
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <LCD_Clear+0xa>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <LCD_Clear+0x10>
     5f4:	00 00       	nop
     5f6:	08 95       	ret

000005f8 <LCD_WriteHexlong>:
void LCD_WriteHexlong(u32 hex_number)
{
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	cd b7       	in	r28, 0x3d	; 61
     602:	de b7       	in	r29, 0x3e	; 62
     604:	2b 97       	sbiw	r28, 0x0b	; 11
     606:	0f b6       	in	r0, 0x3f	; 63
     608:	f8 94       	cli
     60a:	de bf       	out	0x3e, r29	; 62
     60c:	0f be       	out	0x3f, r0	; 63
     60e:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[11];  // Buffer for "Hex: 0x" + 8 characters + null terminator
	sprintf(buffer, "%08lX", (unsigned long)hex_number);
     610:	9f 93       	push	r25
     612:	8f 93       	push	r24
     614:	7f 93       	push	r23
     616:	6f 93       	push	r22
     618:	88 ec       	ldi	r24, 0xC8	; 200
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9f 93       	push	r25
     61e:	8f 93       	push	r24
     620:	8e 01       	movw	r16, r28
     622:	0f 5f       	subi	r16, 0xFF	; 255
     624:	1f 4f       	sbci	r17, 0xFF	; 255
     626:	1f 93       	push	r17
     628:	0f 93       	push	r16
     62a:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <sprintf>
	LCD_WriteString(buffer);
     62e:	c8 01       	movw	r24, r16
     630:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
}
     634:	0f b6       	in	r0, 0x3f	; 63
     636:	f8 94       	cli
     638:	de bf       	out	0x3e, r29	; 62
     63a:	0f be       	out	0x3f, r0	; 63
     63c:	cd bf       	out	0x3d, r28	; 61
     63e:	2b 96       	adiw	r28, 0x0b	; 11
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	08 95       	ret

00000654 <LCD_WriteHex>:
void LCD_WriteHex(u16 hex_number)
{
     654:	0f 93       	push	r16
     656:	1f 93       	push	r17
     658:	cf 93       	push	r28
     65a:	df 93       	push	r29
     65c:	cd b7       	in	r28, 0x3d	; 61
     65e:	de b7       	in	r29, 0x3e	; 62
     660:	2a 97       	sbiw	r28, 0x0a	; 10
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	f8 94       	cli
     666:	de bf       	out	0x3e, r29	; 62
     668:	0f be       	out	0x3f, r0	; 63
     66a:	cd bf       	out	0x3d, r28	; 61
	u8 buffer[10];  // Buffer for "Hex: 0x" + 8 characters + null terminator
	sprintf(buffer, "%X",hex_number);
     66c:	9f 93       	push	r25
     66e:	8f 93       	push	r24
     670:	8e ec       	ldi	r24, 0xCE	; 206
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	9f 93       	push	r25
     676:	8f 93       	push	r24
     678:	8e 01       	movw	r16, r28
     67a:	0f 5f       	subi	r16, 0xFF	; 255
     67c:	1f 4f       	sbci	r17, 0xFF	; 255
     67e:	1f 93       	push	r17
     680:	0f 93       	push	r16
     682:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <sprintf>
	LCD_WriteString(buffer);
     686:	c8 01       	movw	r24, r16
     688:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	0f 90       	pop	r0
     692:	0f 90       	pop	r0
     694:	0f 90       	pop	r0
     696:	0f 90       	pop	r0
     698:	2a 96       	adiw	r28, 0x0a	; 10
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
     6a4:	df 91       	pop	r29
     6a6:	cf 91       	pop	r28
     6a8:	1f 91       	pop	r17
     6aa:	0f 91       	pop	r16
     6ac:	08 95       	ret

000006ae <DIO_initpin>:
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
     6ae:	98 2f       	mov	r25, r24
     6b0:	96 95       	lsr	r25
     6b2:	96 95       	lsr	r25
     6b4:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     6b6:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error = DIO_OK;
	  
	  if (pin_num < 8)
	  {

		  switch(status)
     6b8:	61 30       	cpi	r22, 0x01	; 1
     6ba:	09 f4       	brne	.+2      	; 0x6be <DIO_initpin+0x10>
     6bc:	59 c0       	rjmp	.+178    	; 0x770 <DIO_initpin+0xc2>
     6be:	20 f0       	brcs	.+8      	; 0x6c8 <DIO_initpin+0x1a>
     6c0:	62 30       	cpi	r22, 0x02	; 2
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <DIO_initpin+0x18>
     6c4:	a9 c0       	rjmp	.+338    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     6c6:	fc c0       	rjmp	.+504    	; 0x8c0 <__stack+0x61>
		  {
			  case OUTPUT:
			  switch(port)
     6c8:	91 30       	cpi	r25, 0x01	; 1
     6ca:	c9 f0       	breq	.+50     	; 0x6fe <DIO_initpin+0x50>
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <DIO_initpin+0x2a>
     6ce:	92 30       	cpi	r25, 0x02	; 2
     6d0:	49 f1       	breq	.+82     	; 0x724 <DIO_initpin+0x76>
     6d2:	93 30       	cpi	r25, 0x03	; 3
     6d4:	d1 f1       	breq	.+116    	; 0x74a <DIO_initpin+0x9c>
     6d6:	f6 c0       	rjmp	.+492    	; 0x8c4 <__stack+0x65>
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
     6d8:	4a b3       	in	r20, 0x1a	; 26
     6da:	21 e0       	ldi	r18, 0x01	; 1
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	b9 01       	movw	r22, r18
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <DIO_initpin+0x38>
     6e2:	66 0f       	add	r22, r22
     6e4:	77 1f       	adc	r23, r23
     6e6:	8a 95       	dec	r24
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <DIO_initpin+0x34>
     6ea:	cb 01       	movw	r24, r22
     6ec:	94 2f       	mov	r25, r20
     6ee:	98 2b       	or	r25, r24
     6f0:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     6f2:	9b b3       	in	r25, 0x1b	; 27
     6f4:	80 95       	com	r24
     6f6:	89 23       	and	r24, r25
     6f8:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     6fa:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  SET_BIT( DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     6fc:	08 95       	ret
				  case PB:
				  SET_BIT( DDRB,pin_num);
     6fe:	47 b3       	in	r20, 0x17	; 23
     700:	21 e0       	ldi	r18, 0x01	; 1
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	b9 01       	movw	r22, r18
     706:	02 c0       	rjmp	.+4      	; 0x70c <DIO_initpin+0x5e>
     708:	66 0f       	add	r22, r22
     70a:	77 1f       	adc	r23, r23
     70c:	8a 95       	dec	r24
     70e:	e2 f7       	brpl	.-8      	; 0x708 <DIO_initpin+0x5a>
     710:	cb 01       	movw	r24, r22
     712:	94 2f       	mov	r25, r20
     714:	98 2b       	or	r25, r24
     716:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     718:	98 b3       	in	r25, 0x18	; 24
     71a:	80 95       	com	r24
     71c:	89 23       	and	r24, r25
     71e:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     720:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  SET_BIT( DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     722:	08 95       	ret
				  case PC:
				  SET_BIT( DDRC,pin_num);
     724:	44 b3       	in	r20, 0x14	; 20
     726:	21 e0       	ldi	r18, 0x01	; 1
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	b9 01       	movw	r22, r18
     72c:	02 c0       	rjmp	.+4      	; 0x732 <DIO_initpin+0x84>
     72e:	66 0f       	add	r22, r22
     730:	77 1f       	adc	r23, r23
     732:	8a 95       	dec	r24
     734:	e2 f7       	brpl	.-8      	; 0x72e <DIO_initpin+0x80>
     736:	cb 01       	movw	r24, r22
     738:	94 2f       	mov	r25, r20
     73a:	98 2b       	or	r25, r24
     73c:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     73e:	95 b3       	in	r25, 0x15	; 21
     740:	80 95       	com	r24
     742:	89 23       	and	r24, r25
     744:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     746:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  SET_BIT( DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     748:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
     74a:	41 b3       	in	r20, 0x11	; 17
     74c:	21 e0       	ldi	r18, 0x01	; 1
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	b9 01       	movw	r22, r18
     752:	02 c0       	rjmp	.+4      	; 0x758 <DIO_initpin+0xaa>
     754:	66 0f       	add	r22, r22
     756:	77 1f       	adc	r23, r23
     758:	8a 95       	dec	r24
     75a:	e2 f7       	brpl	.-8      	; 0x754 <DIO_initpin+0xa6>
     75c:	cb 01       	movw	r24, r22
     75e:	94 2f       	mov	r25, r20
     760:	98 2b       	or	r25, r24
     762:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     764:	92 b3       	in	r25, 0x12	; 18
     766:	80 95       	com	r24
     768:	89 23       	and	r24, r25
     76a:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     76c:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     76e:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  case INFREE:
			  switch(port)
     770:	91 30       	cpi	r25, 0x01	; 1
     772:	c9 f0       	breq	.+50     	; 0x7a6 <DIO_initpin+0xf8>
     774:	28 f0       	brcs	.+10     	; 0x780 <DIO_initpin+0xd2>
     776:	92 30       	cpi	r25, 0x02	; 2
     778:	49 f1       	breq	.+82     	; 0x7cc <DIO_initpin+0x11e>
     77a:	93 30       	cpi	r25, 0x03	; 3
     77c:	d1 f1       	breq	.+116    	; 0x7f2 <DIO_initpin+0x144>
     77e:	a4 c0       	rjmp	.+328    	; 0x8c8 <__stack+0x69>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     780:	4a b3       	in	r20, 0x1a	; 26
     782:	21 e0       	ldi	r18, 0x01	; 1
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	b9 01       	movw	r22, r18
     788:	02 c0       	rjmp	.+4      	; 0x78e <DIO_initpin+0xe0>
     78a:	66 0f       	add	r22, r22
     78c:	77 1f       	adc	r23, r23
     78e:	8a 95       	dec	r24
     790:	e2 f7       	brpl	.-8      	; 0x78a <DIO_initpin+0xdc>
     792:	cb 01       	movw	r24, r22
     794:	80 95       	com	r24
     796:	94 2f       	mov	r25, r20
     798:	98 23       	and	r25, r24
     79a:	9a bb       	out	0x1a, r25	; 26
				  CLR_BIT(PORTA,pin_num);
     79c:	9b b3       	in	r25, 0x1b	; 27
     79e:	89 23       	and	r24, r25
     7a0:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     7a2:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  CLR_BIT(PORTA,pin_num);
				  break;
     7a4:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     7a6:	47 b3       	in	r20, 0x17	; 23
     7a8:	21 e0       	ldi	r18, 0x01	; 1
     7aa:	30 e0       	ldi	r19, 0x00	; 0
     7ac:	b9 01       	movw	r22, r18
     7ae:	02 c0       	rjmp	.+4      	; 0x7b4 <DIO_initpin+0x106>
     7b0:	66 0f       	add	r22, r22
     7b2:	77 1f       	adc	r23, r23
     7b4:	8a 95       	dec	r24
     7b6:	e2 f7       	brpl	.-8      	; 0x7b0 <DIO_initpin+0x102>
     7b8:	cb 01       	movw	r24, r22
     7ba:	80 95       	com	r24
     7bc:	94 2f       	mov	r25, r20
     7be:	98 23       	and	r25, r24
     7c0:	97 bb       	out	0x17, r25	; 23
				  CLR_BIT(PORTB,pin_num);
     7c2:	98 b3       	in	r25, 0x18	; 24
     7c4:	89 23       	and	r24, r25
     7c6:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     7c8:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  CLR_BIT(PORTB,pin_num);
				  break;
     7ca:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     7cc:	44 b3       	in	r20, 0x14	; 20
     7ce:	21 e0       	ldi	r18, 0x01	; 1
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	b9 01       	movw	r22, r18
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <DIO_initpin+0x12c>
     7d6:	66 0f       	add	r22, r22
     7d8:	77 1f       	adc	r23, r23
     7da:	8a 95       	dec	r24
     7dc:	e2 f7       	brpl	.-8      	; 0x7d6 <DIO_initpin+0x128>
     7de:	cb 01       	movw	r24, r22
     7e0:	80 95       	com	r24
     7e2:	94 2f       	mov	r25, r20
     7e4:	98 23       	and	r25, r24
     7e6:	94 bb       	out	0x14, r25	; 20
				  CLR_BIT(PORTC,pin_num);
     7e8:	95 b3       	in	r25, 0x15	; 21
     7ea:	89 23       	and	r24, r25
     7ec:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     7ee:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  CLR_BIT(PORTC,pin_num);
				  break;
     7f0:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     7f2:	41 b3       	in	r20, 0x11	; 17
     7f4:	21 e0       	ldi	r18, 0x01	; 1
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	b9 01       	movw	r22, r18
     7fa:	02 c0       	rjmp	.+4      	; 0x800 <__DATA_REGION_LENGTH__>
     7fc:	66 0f       	add	r22, r22
     7fe:	77 1f       	adc	r23, r23
     800:	8a 95       	dec	r24
     802:	e2 f7       	brpl	.-8      	; 0x7fc <DIO_initpin+0x14e>
     804:	cb 01       	movw	r24, r22
     806:	80 95       	com	r24
     808:	94 2f       	mov	r25, r20
     80a:	98 23       	and	r25, r24
     80c:	91 bb       	out	0x11, r25	; 17
				  CLR_BIT(PORTD,pin_num);
     80e:	92 b3       	in	r25, 0x12	; 18
     810:	89 23       	and	r24, r25
     812:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     814:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
     816:	08 95       	ret
				  break;
			  }
			  break;

			  case INPULL:
			  switch(port)
     818:	91 30       	cpi	r25, 0x01	; 1
     81a:	c9 f0       	breq	.+50     	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     81c:	28 f0       	brcs	.+10     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     81e:	92 30       	cpi	r25, 0x02	; 2
     820:	49 f1       	breq	.+82     	; 0x874 <__stack+0x15>
     822:	93 30       	cpi	r25, 0x03	; 3
     824:	d1 f1       	breq	.+116    	; 0x89a <__stack+0x3b>
     826:	52 c0       	rjmp	.+164    	; 0x8cc <__stack+0x6d>
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
     828:	4a b3       	in	r20, 0x1a	; 26
     82a:	21 e0       	ldi	r18, 0x01	; 1
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	b9 01       	movw	r22, r18
     830:	02 c0       	rjmp	.+4      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	8a 95       	dec	r24
     838:	e2 f7       	brpl	.-8      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     83a:	cb 01       	movw	r24, r22
     83c:	96 2f       	mov	r25, r22
     83e:	90 95       	com	r25
     840:	94 23       	and	r25, r20
     842:	9a bb       	out	0x1a, r25	; 26
				  SET_BIT(PORTA,pin_num);
     844:	9b b3       	in	r25, 0x1b	; 27
     846:	89 2b       	or	r24, r25
     848:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     84a:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:
				  CLR_BIT(DDRA,pin_num);
				  SET_BIT(PORTA,pin_num);
				  break;
     84c:	08 95       	ret
				  case PB:
				  CLR_BIT(DDRB,pin_num);
     84e:	47 b3       	in	r20, 0x17	; 23
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	b9 01       	movw	r22, r18
     856:	02 c0       	rjmp	.+4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     858:	66 0f       	add	r22, r22
     85a:	77 1f       	adc	r23, r23
     85c:	8a 95       	dec	r24
     85e:	e2 f7       	brpl	.-8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     860:	cb 01       	movw	r24, r22
     862:	96 2f       	mov	r25, r22
     864:	90 95       	com	r25
     866:	94 23       	and	r25, r20
     868:	97 bb       	out	0x17, r25	; 23
				  SET_BIT(PORTB,pin_num);
     86a:	98 b3       	in	r25, 0x18	; 24
     86c:	89 2b       	or	r24, r25
     86e:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     870:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:
				  CLR_BIT(DDRB,pin_num);
				  SET_BIT(PORTB,pin_num);
				  break;
     872:	08 95       	ret
				  case PC:
				  CLR_BIT(DDRC,pin_num);
     874:	44 b3       	in	r20, 0x14	; 20
     876:	21 e0       	ldi	r18, 0x01	; 1
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	b9 01       	movw	r22, r18
     87c:	02 c0       	rjmp	.+4      	; 0x882 <__stack+0x23>
     87e:	66 0f       	add	r22, r22
     880:	77 1f       	adc	r23, r23
     882:	8a 95       	dec	r24
     884:	e2 f7       	brpl	.-8      	; 0x87e <__stack+0x1f>
     886:	cb 01       	movw	r24, r22
     888:	96 2f       	mov	r25, r22
     88a:	90 95       	com	r25
     88c:	94 23       	and	r25, r20
     88e:	94 bb       	out	0x14, r25	; 20
				  SET_BIT(PORTC,pin_num);
     890:	95 b3       	in	r25, 0x15	; 21
     892:	89 2b       	or	r24, r25
     894:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     896:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:
				  CLR_BIT(DDRC,pin_num);
				  SET_BIT(PORTC,pin_num);
				  break;
     898:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
     89a:	41 b3       	in	r20, 0x11	; 17
     89c:	21 e0       	ldi	r18, 0x01	; 1
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	b9 01       	movw	r22, r18
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	66 0f       	add	r22, r22
     8a6:	77 1f       	adc	r23, r23
     8a8:	8a 95       	dec	r24
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	cb 01       	movw	r24, r22
     8ae:	96 2f       	mov	r25, r22
     8b0:	90 95       	com	r25
     8b2:	94 23       	and	r25, r20
     8b4:	91 bb       	out	0x11, r25	; 17
				  SET_BIT(PORTD,pin_num);
     8b6:	92 b3       	in	r25, 0x12	; 18
     8b8:	89 2b       	or	r24, r25
     8ba:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error = DIO_OK;
     8bc:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
     8be:	08 95       	ret
				  error = WRONG_PORT_NUMBER;
				  break;
			  }
			  break;
			  default:
			  error = WRONG_PORT_NUMBER;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	08 95       	ret
				  case PD:
				  SET_BIT( DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	08 95       	ret
				  case PD:
				  CLR_BIT(DDRD,pin_num);
				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     8cc:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     8ce:	08 95       	ret

000008d0 <DIO_Init_All>:
	    return error;
    }
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
     8d0:	cf 93       	push	r28
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     8d2:	c0 e0       	ldi	r28, 0x00	; 0
     8d4:	09 c0       	rjmp	.+18     	; 0x8e8 <DIO_Init_All+0x18>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
     8d6:	ec 2f       	mov	r30, r28
     8d8:	f0 e0       	ldi	r31, 0x00	; 0
     8da:	ef 52       	subi	r30, 0x2F	; 47
     8dc:	ff 4f       	sbci	r31, 0xFF	; 255
     8de:	60 81       	ld	r22, Z
     8e0:	8c 2f       	mov	r24, r28
     8e2:	0e 94 57 03 	call	0x6ae	; 0x6ae <DIO_initpin>
//////////////////////////////////////////////////////////////////////*/
//pin MODE
  void DIO_Init_All(void)
  {
	  DIO_Pin_type i;
	  for (i=PINA0; i<TOTAL_PINS; i++)
     8e6:	cf 5f       	subi	r28, 0xFF	; 255
     8e8:	c0 32       	cpi	r28, 0x20	; 32
     8ea:	a8 f3       	brcs	.-22     	; 0x8d6 <DIO_Init_All+0x6>
	  {
		  DIO_initpin(i,PinsStatusArray[i]);
	  }
  }
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <DIO_writepin>:
	  return error;

  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
     8f0:	98 2f       	mov	r25, r24
     8f2:	96 95       	lsr	r25
     8f4:	96 95       	lsr	r25
     8f6:	96 95       	lsr	r25
	  u8 pin_num =pin % 8;
     8f8:	87 70       	andi	r24, 0x07	; 7
	  en_dioError_t error= DIO_OK;
	  if (pin_num<8)
	  {
		  switch (volt)
     8fa:	66 23       	and	r22, r22
     8fc:	09 f4       	brne	.+2      	; 0x900 <DIO_writepin+0x10>
     8fe:	43 c0       	rjmp	.+134    	; 0x986 <DIO_writepin+0x96>
     900:	61 30       	cpi	r22, 0x01	; 1
     902:	09 f0       	breq	.+2      	; 0x906 <DIO_writepin+0x16>
     904:	84 c0       	rjmp	.+264    	; 0xa0e <DIO_writepin+0x11e>
		  {
			  case HIGH:

			  switch(port)
     906:	91 30       	cpi	r25, 0x01	; 1
     908:	a1 f0       	breq	.+40     	; 0x932 <DIO_writepin+0x42>
     90a:	28 f0       	brcs	.+10     	; 0x916 <DIO_writepin+0x26>
     90c:	92 30       	cpi	r25, 0x02	; 2
     90e:	f9 f0       	breq	.+62     	; 0x94e <DIO_writepin+0x5e>
     910:	93 30       	cpi	r25, 0x03	; 3
     912:	59 f1       	breq	.+86     	; 0x96a <DIO_writepin+0x7a>
     914:	7e c0       	rjmp	.+252    	; 0xa12 <DIO_writepin+0x122>
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
     916:	4b b3       	in	r20, 0x1b	; 27
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	b9 01       	movw	r22, r18
     91e:	02 c0       	rjmp	.+4      	; 0x924 <DIO_writepin+0x34>
     920:	66 0f       	add	r22, r22
     922:	77 1f       	adc	r23, r23
     924:	8a 95       	dec	r24
     926:	e2 f7       	brpl	.-8      	; 0x920 <DIO_writepin+0x30>
     928:	cb 01       	movw	r24, r22
     92a:	84 2b       	or	r24, r20
     92c:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     92e:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  SET_BIT(PORTA,pin_num);
				  break;
     930:	08 95       	ret
				  case PB:

				  SET_BIT(PORTB,pin_num);
     932:	48 b3       	in	r20, 0x18	; 24
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	b9 01       	movw	r22, r18
     93a:	02 c0       	rjmp	.+4      	; 0x940 <DIO_writepin+0x50>
     93c:	66 0f       	add	r22, r22
     93e:	77 1f       	adc	r23, r23
     940:	8a 95       	dec	r24
     942:	e2 f7       	brpl	.-8      	; 0x93c <DIO_writepin+0x4c>
     944:	cb 01       	movw	r24, r22
     946:	84 2b       	or	r24, r20
     948:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     94a:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  SET_BIT(PORTB,pin_num);
				  break;
     94c:	08 95       	ret
				  case PC:

				  SET_BIT(PORTC,pin_num);
     94e:	45 b3       	in	r20, 0x15	; 21
     950:	21 e0       	ldi	r18, 0x01	; 1
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	b9 01       	movw	r22, r18
     956:	02 c0       	rjmp	.+4      	; 0x95c <DIO_writepin+0x6c>
     958:	66 0f       	add	r22, r22
     95a:	77 1f       	adc	r23, r23
     95c:	8a 95       	dec	r24
     95e:	e2 f7       	brpl	.-8      	; 0x958 <DIO_writepin+0x68>
     960:	cb 01       	movw	r24, r22
     962:	84 2b       	or	r24, r20
     964:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     966:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  SET_BIT(PORTC,pin_num);
				  break;
     968:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
     96a:	42 b3       	in	r20, 0x12	; 18
     96c:	21 e0       	ldi	r18, 0x01	; 1
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	b9 01       	movw	r22, r18
     972:	02 c0       	rjmp	.+4      	; 0x978 <DIO_writepin+0x88>
     974:	66 0f       	add	r22, r22
     976:	77 1f       	adc	r23, r23
     978:	8a 95       	dec	r24
     97a:	e2 f7       	brpl	.-8      	; 0x974 <DIO_writepin+0x84>
     97c:	cb 01       	movw	r24, r22
     97e:	84 2b       	or	r24, r20
     980:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     982:	80 e0       	ldi	r24, 0x00	; 0
				  SET_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
     984:	08 95       	ret
			  }
			  break;

			  case LOW:

			  switch(port)
     986:	91 30       	cpi	r25, 0x01	; 1
     988:	a9 f0       	breq	.+42     	; 0x9b4 <DIO_writepin+0xc4>
     98a:	28 f0       	brcs	.+10     	; 0x996 <DIO_writepin+0xa6>
     98c:	92 30       	cpi	r25, 0x02	; 2
     98e:	09 f1       	breq	.+66     	; 0x9d2 <DIO_writepin+0xe2>
     990:	93 30       	cpi	r25, 0x03	; 3
     992:	71 f1       	breq	.+92     	; 0x9f0 <DIO_writepin+0x100>
     994:	40 c0       	rjmp	.+128    	; 0xa16 <DIO_writepin+0x126>
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
     996:	4b b3       	in	r20, 0x1b	; 27
     998:	21 e0       	ldi	r18, 0x01	; 1
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	b9 01       	movw	r22, r18
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <DIO_writepin+0xb4>
     9a0:	66 0f       	add	r22, r22
     9a2:	77 1f       	adc	r23, r23
     9a4:	8a 95       	dec	r24
     9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <DIO_writepin+0xb0>
     9a8:	cb 01       	movw	r24, r22
     9aa:	80 95       	com	r24
     9ac:	84 23       	and	r24, r20
     9ae:	8b bb       	out	0x1b, r24	; 27
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
			  switch(port)
			  {
				  case PA:

				  CLR_BIT(PORTA,pin_num);
				  break;
     9b2:	08 95       	ret
				  case PB:

				  CLR_BIT(PORTB,pin_num);
     9b4:	48 b3       	in	r20, 0x18	; 24
     9b6:	21 e0       	ldi	r18, 0x01	; 1
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	b9 01       	movw	r22, r18
     9bc:	02 c0       	rjmp	.+4      	; 0x9c2 <DIO_writepin+0xd2>
     9be:	66 0f       	add	r22, r22
     9c0:	77 1f       	adc	r23, r23
     9c2:	8a 95       	dec	r24
     9c4:	e2 f7       	brpl	.-8      	; 0x9be <DIO_writepin+0xce>
     9c6:	cb 01       	movw	r24, r22
     9c8:	80 95       	com	r24
     9ca:	84 23       	and	r24, r20
     9cc:	88 bb       	out	0x18, r24	; 24
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     9ce:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTA,pin_num);
				  break;
				  case PB:

				  CLR_BIT(PORTB,pin_num);
				  break;
     9d0:	08 95       	ret
				  case PC:

				  CLR_BIT(PORTC,pin_num);
     9d2:	45 b3       	in	r20, 0x15	; 21
     9d4:	21 e0       	ldi	r18, 0x01	; 1
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	b9 01       	movw	r22, r18
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <DIO_writepin+0xf0>
     9dc:	66 0f       	add	r22, r22
     9de:	77 1f       	adc	r23, r23
     9e0:	8a 95       	dec	r24
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <DIO_writepin+0xec>
     9e4:	cb 01       	movw	r24, r22
     9e6:	80 95       	com	r24
     9e8:	84 23       	and	r24, r20
     9ea:	85 bb       	out	0x15, r24	; 21
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     9ec:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTB,pin_num);
				  break;
				  case PC:

				  CLR_BIT(PORTC,pin_num);
				  break;
     9ee:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
     9f0:	42 b3       	in	r20, 0x12	; 18
     9f2:	21 e0       	ldi	r18, 0x01	; 1
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	b9 01       	movw	r22, r18
     9f8:	02 c0       	rjmp	.+4      	; 0x9fe <DIO_writepin+0x10e>
     9fa:	66 0f       	add	r22, r22
     9fc:	77 1f       	adc	r23, r23
     9fe:	8a 95       	dec	r24
     a00:	e2 f7       	brpl	.-8      	; 0x9fa <DIO_writepin+0x10a>
     a02:	cb 01       	movw	r24, r22
     a04:	80 95       	com	r24
     a06:	84 23       	and	r24, r20
     a08:	82 bb       	out	0x12, r24	; 18
  }
   en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
  {
	  DIO_Port_type port = pin/8 ;
	  u8 pin_num =pin % 8;
	  en_dioError_t error= DIO_OK;
     a0a:	80 e0       	ldi	r24, 0x00	; 0
				  CLR_BIT(PORTC,pin_num);
				  break;
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
     a0c:	08 95       	ret
			  }

			  break;

			  default:
			  error = WRONG_VALUE;
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	08 95       	ret
				  case PD:

				  SET_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	08 95       	ret
				  case PD:

				  CLR_BIT(PORTD,pin_num);
				  break;
				  default:
				  error = WRONG_PORT_NUMBER;
     a16:	81 e0       	ldi	r24, 0x01	; 1
	  {
		  error = WRONG_PIN_NUMBER;
	  }
	  return error;

  }
     a18:	08 95       	ret

00000a1a <__vector_1>:




ISR(INT0_vect)
{
     a1a:	1f 92       	push	r1
     a1c:	0f 92       	push	r0
     a1e:	0f b6       	in	r0, 0x3f	; 63
     a20:	0f 92       	push	r0
     a22:	11 24       	eor	r1, r1
     a24:	2f 93       	push	r18
     a26:	3f 93       	push	r19
     a28:	4f 93       	push	r20
     a2a:	5f 93       	push	r21
     a2c:	6f 93       	push	r22
     a2e:	7f 93       	push	r23
     a30:	8f 93       	push	r24
     a32:	9f 93       	push	r25
     a34:	af 93       	push	r26
     a36:	bf 93       	push	r27
     a38:	ef 93       	push	r30
     a3a:	ff 93       	push	r31
	if (INT0_Fptr!=NULLPTR)
     a3c:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <INT0_Fptr>
     a40:	f0 91 12 01 	lds	r31, 0x0112	; 0x800112 <INT0_Fptr+0x1>
     a44:	30 97       	sbiw	r30, 0x00	; 0
     a46:	09 f0       	breq	.+2      	; 0xa4a <__vector_1+0x30>
	{
		INT0_Fptr();
     a48:	09 95       	icall
	}
}
     a4a:	ff 91       	pop	r31
     a4c:	ef 91       	pop	r30
     a4e:	bf 91       	pop	r27
     a50:	af 91       	pop	r26
     a52:	9f 91       	pop	r25
     a54:	8f 91       	pop	r24
     a56:	7f 91       	pop	r23
     a58:	6f 91       	pop	r22
     a5a:	5f 91       	pop	r21
     a5c:	4f 91       	pop	r20
     a5e:	3f 91       	pop	r19
     a60:	2f 91       	pop	r18
     a62:	0f 90       	pop	r0
     a64:	0f be       	out	0x3f, r0	; 63
     a66:	0f 90       	pop	r0
     a68:	1f 90       	pop	r1
     a6a:	18 95       	reti

00000a6c <__vector_2>:
ISR(INT1_vect)
{
     a6c:	1f 92       	push	r1
     a6e:	0f 92       	push	r0
     a70:	0f b6       	in	r0, 0x3f	; 63
     a72:	0f 92       	push	r0
     a74:	11 24       	eor	r1, r1
     a76:	2f 93       	push	r18
     a78:	3f 93       	push	r19
     a7a:	4f 93       	push	r20
     a7c:	5f 93       	push	r21
     a7e:	6f 93       	push	r22
     a80:	7f 93       	push	r23
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
     a86:	af 93       	push	r26
     a88:	bf 93       	push	r27
     a8a:	ef 93       	push	r30
     a8c:	ff 93       	push	r31
	if (INT1_Fptr!=NULLPTR)
     a8e:	e0 91 0f 01 	lds	r30, 0x010F	; 0x80010f <INT1_Fptr>
     a92:	f0 91 10 01 	lds	r31, 0x0110	; 0x800110 <INT1_Fptr+0x1>
     a96:	30 97       	sbiw	r30, 0x00	; 0
     a98:	09 f0       	breq	.+2      	; 0xa9c <__vector_2+0x30>
	{
		INT1_Fptr();
     a9a:	09 95       	icall
	}
}
     a9c:	ff 91       	pop	r31
     a9e:	ef 91       	pop	r30
     aa0:	bf 91       	pop	r27
     aa2:	af 91       	pop	r26
     aa4:	9f 91       	pop	r25
     aa6:	8f 91       	pop	r24
     aa8:	7f 91       	pop	r23
     aaa:	6f 91       	pop	r22
     aac:	5f 91       	pop	r21
     aae:	4f 91       	pop	r20
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__vector_3>:
ISR(INT2_vect)
{
     abe:	1f 92       	push	r1
     ac0:	0f 92       	push	r0
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	0f 92       	push	r0
     ac6:	11 24       	eor	r1, r1
     ac8:	2f 93       	push	r18
     aca:	3f 93       	push	r19
     acc:	4f 93       	push	r20
     ace:	5f 93       	push	r21
     ad0:	6f 93       	push	r22
     ad2:	7f 93       	push	r23
     ad4:	8f 93       	push	r24
     ad6:	9f 93       	push	r25
     ad8:	af 93       	push	r26
     ada:	bf 93       	push	r27
     adc:	ef 93       	push	r30
     ade:	ff 93       	push	r31
	if (INT2_Fptr!=NULLPTR)
     ae0:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <INT2_Fptr>
     ae4:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <INT2_Fptr+0x1>
     ae8:	30 97       	sbiw	r30, 0x00	; 0
     aea:	09 f0       	breq	.+2      	; 0xaee <__vector_3+0x30>
	{
		INT2_Fptr();
     aec:	09 95       	icall
	}
}
     aee:	ff 91       	pop	r31
     af0:	ef 91       	pop	r30
     af2:	bf 91       	pop	r27
     af4:	af 91       	pop	r26
     af6:	9f 91       	pop	r25
     af8:	8f 91       	pop	r24
     afa:	7f 91       	pop	r23
     afc:	6f 91       	pop	r22
     afe:	5f 91       	pop	r21
     b00:	4f 91       	pop	r20
     b02:	3f 91       	pop	r19
     b04:	2f 91       	pop	r18
     b06:	0f 90       	pop	r0
     b08:	0f be       	out	0x3f, r0	; 63
     b0a:	0f 90       	pop	r0
     b0c:	1f 90       	pop	r1
     b0e:	18 95       	reti

00000b10 <UART_Init>:
	{
		LCD_SetCursor(1,i);
		LCD_WriteChar(u8_g_RX_STR[i]);
		
		i++;
		RX_flag--;
     b10:	10 bc       	out	0x20, r1	; 32
     b12:	83 e3       	ldi	r24, 0x33	; 51
     b14:	89 b9       	out	0x09, r24	; 9
     b16:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <UART_cfg>
     b1a:	81 30       	cpi	r24, 0x01	; 1
     b1c:	41 f0       	breq	.+16     	; 0xb2e <UART_Init+0x1e>
     b1e:	18 f0       	brcs	.+6      	; 0xb26 <UART_Init+0x16>
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	49 f0       	breq	.+18     	; 0xb36 <UART_Init+0x26>
     b24:	0a c0       	rjmp	.+20     	; 0xb3a <UART_Init+0x2a>
     b26:	8a b1       	in	r24, 0x0a	; 10
     b28:	88 60       	ori	r24, 0x08	; 8
     b2a:	8a b9       	out	0x0a, r24	; 10
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <UART_Init+0x2a>
     b2e:	8a b1       	in	r24, 0x0a	; 10
     b30:	80 61       	ori	r24, 0x10	; 16
     b32:	8a b9       	out	0x0a, r24	; 10
     b34:	02 c0       	rjmp	.+4      	; 0xb3a <UART_Init+0x2a>
     b36:	88 e1       	ldi	r24, 0x18	; 24
     b38:	8a b9       	out	0x0a, r24	; 10
     b3a:	80 b5       	in	r24, 0x20	; 32
     b3c:	84 60       	ori	r24, 0x04	; 4
     b3e:	80 bd       	out	0x20, r24	; 32
     b40:	80 b5       	in	r24, 0x20	; 32
     b42:	82 60       	ori	r24, 0x02	; 2
     b44:	80 bd       	out	0x20, r24	; 32
     b46:	80 b5       	in	r24, 0x20	; 32
     b48:	8f 7d       	andi	r24, 0xDF	; 223
     b4a:	80 bd       	out	0x20, r24	; 32
     b4c:	80 b5       	in	r24, 0x20	; 32
     b4e:	8f 7e       	andi	r24, 0xEF	; 239
     b50:	80 bd       	out	0x20, r24	; 32
     b52:	80 b5       	in	r24, 0x20	; 32
     b54:	87 7f       	andi	r24, 0xF7	; 247
     b56:	80 bd       	out	0x20, r24	; 32
     b58:	08 95       	ret

00000b5a <UART_RX_InterruptEnable>:
     b5a:	8a b1       	in	r24, 0x0a	; 10
     b5c:	80 68       	ori	r24, 0x80	; 128
     b5e:	8a b9       	out	0x0a, r24	; 10
     b60:	08 95       	ret

00000b62 <UART_RX_SetCallBack>:
     b62:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <UART_RX_Fptr+0x1>
     b66:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <UART_RX_Fptr>
     b6a:	08 95       	ret

00000b6c <UART_RecieveByteNoBlock>:
     b6c:	2c b1       	in	r18, 0x0c	; 12
     b6e:	fc 01       	movw	r30, r24
     b70:	20 83       	st	Z, r18
     b72:	08 95       	ret

00000b74 <__vector_13>:
     b74:	1f 92       	push	r1
     b76:	0f 92       	push	r0
     b78:	0f b6       	in	r0, 0x3f	; 63
     b7a:	0f 92       	push	r0
     b7c:	11 24       	eor	r1, r1
     b7e:	2f 93       	push	r18
     b80:	3f 93       	push	r19
     b82:	4f 93       	push	r20
     b84:	5f 93       	push	r21
     b86:	6f 93       	push	r22
     b88:	7f 93       	push	r23
     b8a:	8f 93       	push	r24
     b8c:	9f 93       	push	r25
     b8e:	af 93       	push	r26
     b90:	bf 93       	push	r27
     b92:	ef 93       	push	r30
     b94:	ff 93       	push	r31
     b96:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <UART_RX_Fptr>
     b9a:	f0 91 19 01 	lds	r31, 0x0119	; 0x800119 <UART_RX_Fptr+0x1>
     b9e:	30 97       	sbiw	r30, 0x00	; 0
     ba0:	09 f0       	breq	.+2      	; 0xba4 <__vector_13+0x30>
     ba2:	09 95       	icall
     ba4:	ff 91       	pop	r31
     ba6:	ef 91       	pop	r30
     ba8:	bf 91       	pop	r27
     baa:	af 91       	pop	r26
     bac:	9f 91       	pop	r25
     bae:	8f 91       	pop	r24
     bb0:	7f 91       	pop	r23
     bb2:	6f 91       	pop	r22
     bb4:	5f 91       	pop	r21
     bb6:	4f 91       	pop	r20
     bb8:	3f 91       	pop	r19
     bba:	2f 91       	pop	r18
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <__vector_15>:
     bc6:	1f 92       	push	r1
     bc8:	0f 92       	push	r0
     bca:	0f b6       	in	r0, 0x3f	; 63
     bcc:	0f 92       	push	r0
     bce:	11 24       	eor	r1, r1
     bd0:	2f 93       	push	r18
     bd2:	3f 93       	push	r19
     bd4:	4f 93       	push	r20
     bd6:	5f 93       	push	r21
     bd8:	6f 93       	push	r22
     bda:	7f 93       	push	r23
     bdc:	8f 93       	push	r24
     bde:	9f 93       	push	r25
     be0:	af 93       	push	r26
     be2:	bf 93       	push	r27
     be4:	ef 93       	push	r30
     be6:	ff 93       	push	r31
     be8:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <UART_TX_Fptr>
     bec:	f0 91 17 01 	lds	r31, 0x0117	; 0x800117 <UART_TX_Fptr+0x1>
     bf0:	30 97       	sbiw	r30, 0x00	; 0
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <__vector_15+0x30>
     bf4:	09 95       	icall
     bf6:	ff 91       	pop	r31
     bf8:	ef 91       	pop	r30
     bfa:	bf 91       	pop	r27
     bfc:	af 91       	pop	r26
     bfe:	9f 91       	pop	r25
     c00:	8f 91       	pop	r24
     c02:	7f 91       	pop	r23
     c04:	6f 91       	pop	r22
     c06:	5f 91       	pop	r21
     c08:	4f 91       	pop	r20
     c0a:	3f 91       	pop	r19
     c0c:	2f 91       	pop	r18
     c0e:	0f 90       	pop	r0
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	0f 90       	pop	r0
     c14:	1f 90       	pop	r1
     c16:	18 95       	reti

00000c18 <UART_RX_FUN>:
     c18:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1928>
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	8d 56       	subi	r24, 0x6D	; 109
     c20:	9e 4f       	sbci	r25, 0xFE	; 254
     c22:	0e 94 b6 05 	call	0xb6c	; 0xb6c <UART_RecieveByteNoBlock>
     c26:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <i.1928>
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <i.1928>
     c30:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <RX_flag>
     c34:	8f 5f       	subi	r24, 0xFF	; 255
     c36:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RX_flag>
     c3a:	08 95       	ret

00000c3c <UART_ReceiveStringAshync_V3>:
/*	Pu8_RX_STR=u8_g_RX_STR;*/
	
}

en_UARTError_t UART_ReceiveStringAshync_V3 (u8 *str) //just for testing
{
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	bc 01       	movw	r22, r24
	static u8 u8StringCounter=0,u8ReceiveCounter=0;
	 en_UARTError_t status=0;
	if (RX_flag>0)
     c42:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <RX_flag>
     c46:	99 23       	and	r25, r25
     c48:	09 f4       	brne	.+2      	; 0xc4c <UART_ReceiveStringAshync_V3+0x10>
     c4a:	47 c0       	rjmp	.+142    	; 0xcda <UART_ReceiveStringAshync_V3+0x9e>
	{
		if (u8_g_RX_STR[u8ReceiveCounter]==0)
     c4c:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <u8ReceiveCounter.1941>
     c50:	29 2f       	mov	r18, r25
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	ed 56       	subi	r30, 0x6D	; 109
     c58:	fe 4f       	sbci	r31, 0xFE	; 254
     c5a:	40 81       	ld	r20, Z
     c5c:	41 11       	cpse	r20, r1
     c5e:	10 c0       	rjmp	.+32     	; 0xc80 <UART_ReceiveStringAshync_V3+0x44>
		{    
			
			u8StringCounter=0;
     c60:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <u8StringCounter.1940>
			u8ReceiveCounter++;
     c64:	9f 5f       	subi	r25, 0xFF	; 255
     c66:	90 93 14 01 	sts	0x0114, r25	; 0x800114 <u8ReceiveCounter.1941>
			RX_flag--;
     c6a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <RX_flag>
     c6e:	81 50       	subi	r24, 0x01	; 1
     c70:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RX_flag>
			TGL_BIT(PORTB,0);
     c74:	98 b3       	in	r25, 0x18	; 24
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	89 27       	eor	r24, r25
     c7a:	88 bb       	out	0x18, r24	; 24
			status = UART_FREE;     //string complete
     c7c:	88 e0       	ldi	r24, 0x08	; 8
     c7e:	2e c0       	rjmp	.+92     	; 0xcdc <UART_ReceiveStringAshync_V3+0xa0>
     c80:	eb 01       	movw	r28, r22
		}
      else
	  {
		 
		 str[u8StringCounter] = u8_g_RX_STR[u8ReceiveCounter] ;
     c82:	60 91 13 01 	lds	r22, 0x0113	; 0x800113 <u8StringCounter.1940>
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	fe 01       	movw	r30, r28
     c8a:	e6 0f       	add	r30, r22
     c8c:	f7 1f       	adc	r31, r23
     c8e:	d9 01       	movw	r26, r18
     c90:	ad 56       	subi	r26, 0x6D	; 109
     c92:	be 4f       	sbci	r27, 0xFE	; 254
     c94:	8c 91       	ld	r24, X
     c96:	80 83       	st	Z, r24
			 
     	    LCD_SetCursor(1,u8StringCounter);
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_SetCursor>
		    LCD_WriteChar(str[u8StringCounter]);
     ca0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <u8StringCounter.1940>
     ca4:	c8 0f       	add	r28, r24
     ca6:	d1 1d       	adc	r29, r1
     ca8:	88 81       	ld	r24, Y
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_WriteChar>
		    LCD_WriteString("   ");  
     cb0:	88 e7       	ldi	r24, 0x78	; 120
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCD_WriteString>
		 	u8StringCounter++;
     cb8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <u8StringCounter.1940>
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <u8StringCounter.1940>
			u8ReceiveCounter++;
     cc2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <u8ReceiveCounter.1941>
     cc6:	8f 5f       	subi	r24, 0xFF	; 255
     cc8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <u8ReceiveCounter.1941>
			
		 	RX_flag--;  
     ccc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <RX_flag>
     cd0:	81 50       	subi	r24, 0x01	; 1
     cd2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <RX_flag>
		    status=UART_RECIEVEING;    //receive string 
     cd6:	89 e0       	ldi	r24, 0x09	; 9
     cd8:	01 c0       	rjmp	.+2      	; 0xcdc <UART_ReceiveStringAshync_V3+0xa0>
}

en_UARTError_t UART_ReceiveStringAshync_V3 (u8 *str) //just for testing
{
	static u8 u8StringCounter=0,u8ReceiveCounter=0;
	 en_UARTError_t status=0;
     cda:	80 e0       	ldi	r24, 0x00	; 0

	}
	
	return status;
	
}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	08 95       	ret

00000ce2 <__mulsi3>:
     ce2:	db 01       	movw	r26, r22
     ce4:	8f 93       	push	r24
     ce6:	9f 93       	push	r25
     ce8:	0e 94 90 06 	call	0xd20	; 0xd20 <__muluhisi3>
     cec:	bf 91       	pop	r27
     cee:	af 91       	pop	r26
     cf0:	a2 9f       	mul	r26, r18
     cf2:	80 0d       	add	r24, r0
     cf4:	91 1d       	adc	r25, r1
     cf6:	a3 9f       	mul	r26, r19
     cf8:	90 0d       	add	r25, r0
     cfa:	b2 9f       	mul	r27, r18
     cfc:	90 0d       	add	r25, r0
     cfe:	11 24       	eor	r1, r1
     d00:	08 95       	ret

00000d02 <__umulhisi3>:
     d02:	a2 9f       	mul	r26, r18
     d04:	b0 01       	movw	r22, r0
     d06:	b3 9f       	mul	r27, r19
     d08:	c0 01       	movw	r24, r0
     d0a:	a3 9f       	mul	r26, r19
     d0c:	70 0d       	add	r23, r0
     d0e:	81 1d       	adc	r24, r1
     d10:	11 24       	eor	r1, r1
     d12:	91 1d       	adc	r25, r1
     d14:	b2 9f       	mul	r27, r18
     d16:	70 0d       	add	r23, r0
     d18:	81 1d       	adc	r24, r1
     d1a:	11 24       	eor	r1, r1
     d1c:	91 1d       	adc	r25, r1
     d1e:	08 95       	ret

00000d20 <__muluhisi3>:
     d20:	0e 94 81 06 	call	0xd02	; 0xd02 <__umulhisi3>
     d24:	a5 9f       	mul	r26, r21
     d26:	90 0d       	add	r25, r0
     d28:	b4 9f       	mul	r27, r20
     d2a:	90 0d       	add	r25, r0
     d2c:	a4 9f       	mul	r26, r20
     d2e:	80 0d       	add	r24, r0
     d30:	91 1d       	adc	r25, r1
     d32:	11 24       	eor	r1, r1
     d34:	08 95       	ret

00000d36 <__udivmodsi4>:
     d36:	a1 e2       	ldi	r26, 0x21	; 33
     d38:	1a 2e       	mov	r1, r26
     d3a:	aa 1b       	sub	r26, r26
     d3c:	bb 1b       	sub	r27, r27
     d3e:	fd 01       	movw	r30, r26
     d40:	0d c0       	rjmp	.+26     	; 0xd5c <__udivmodsi4_ep>

00000d42 <__udivmodsi4_loop>:
     d42:	aa 1f       	adc	r26, r26
     d44:	bb 1f       	adc	r27, r27
     d46:	ee 1f       	adc	r30, r30
     d48:	ff 1f       	adc	r31, r31
     d4a:	a2 17       	cp	r26, r18
     d4c:	b3 07       	cpc	r27, r19
     d4e:	e4 07       	cpc	r30, r20
     d50:	f5 07       	cpc	r31, r21
     d52:	20 f0       	brcs	.+8      	; 0xd5c <__udivmodsi4_ep>
     d54:	a2 1b       	sub	r26, r18
     d56:	b3 0b       	sbc	r27, r19
     d58:	e4 0b       	sbc	r30, r20
     d5a:	f5 0b       	sbc	r31, r21

00000d5c <__udivmodsi4_ep>:
     d5c:	66 1f       	adc	r22, r22
     d5e:	77 1f       	adc	r23, r23
     d60:	88 1f       	adc	r24, r24
     d62:	99 1f       	adc	r25, r25
     d64:	1a 94       	dec	r1
     d66:	69 f7       	brne	.-38     	; 0xd42 <__udivmodsi4_loop>
     d68:	60 95       	com	r22
     d6a:	70 95       	com	r23
     d6c:	80 95       	com	r24
     d6e:	90 95       	com	r25
     d70:	9b 01       	movw	r18, r22
     d72:	ac 01       	movw	r20, r24
     d74:	bd 01       	movw	r22, r26
     d76:	cf 01       	movw	r24, r30
     d78:	08 95       	ret

00000d7a <strtol>:
     d7a:	a0 e0       	ldi	r26, 0x00	; 0
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	e3 ec       	ldi	r30, 0xC3	; 195
     d80:	f6 e0       	ldi	r31, 0x06	; 6
     d82:	0c 94 a9 0a 	jmp	0x1552	; 0x1552 <__prologue_saves__+0x2>
     d86:	5c 01       	movw	r10, r24
     d88:	6b 01       	movw	r12, r22
     d8a:	7a 01       	movw	r14, r20
     d8c:	61 15       	cp	r22, r1
     d8e:	71 05       	cpc	r23, r1
     d90:	19 f0       	breq	.+6      	; 0xd98 <strtol+0x1e>
     d92:	fb 01       	movw	r30, r22
     d94:	91 83       	std	Z+1, r25	; 0x01
     d96:	80 83       	st	Z, r24
     d98:	e1 14       	cp	r14, r1
     d9a:	f1 04       	cpc	r15, r1
     d9c:	29 f0       	breq	.+10     	; 0xda8 <strtol+0x2e>
     d9e:	c7 01       	movw	r24, r14
     da0:	02 97       	sbiw	r24, 0x02	; 2
     da2:	83 97       	sbiw	r24, 0x23	; 35
     da4:	08 f0       	brcs	.+2      	; 0xda8 <strtol+0x2e>
     da6:	e5 c0       	rjmp	.+458    	; 0xf72 <strtol+0x1f8>
     da8:	e5 01       	movw	r28, r10
     daa:	21 96       	adiw	r28, 0x01	; 1
     dac:	f5 01       	movw	r30, r10
     dae:	10 81       	ld	r17, Z
     db0:	81 2f       	mov	r24, r17
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <isspace>
     db8:	89 2b       	or	r24, r25
     dba:	11 f0       	breq	.+4      	; 0xdc0 <strtol+0x46>
     dbc:	5e 01       	movw	r10, r28
     dbe:	f4 cf       	rjmp	.-24     	; 0xda8 <strtol+0x2e>
     dc0:	1d 32       	cpi	r17, 0x2D	; 45
     dc2:	29 f4       	brne	.+10     	; 0xdce <strtol+0x54>
     dc4:	21 96       	adiw	r28, 0x01	; 1
     dc6:	f5 01       	movw	r30, r10
     dc8:	11 81       	ldd	r17, Z+1	; 0x01
     dca:	01 e0       	ldi	r16, 0x01	; 1
     dcc:	07 c0       	rjmp	.+14     	; 0xddc <strtol+0x62>
     dce:	1b 32       	cpi	r17, 0x2B	; 43
     dd0:	21 f4       	brne	.+8      	; 0xdda <strtol+0x60>
     dd2:	e5 01       	movw	r28, r10
     dd4:	22 96       	adiw	r28, 0x02	; 2
     dd6:	f5 01       	movw	r30, r10
     dd8:	11 81       	ldd	r17, Z+1	; 0x01
     dda:	00 e0       	ldi	r16, 0x00	; 0
     ddc:	e1 14       	cp	r14, r1
     dde:	f1 04       	cpc	r15, r1
     de0:	09 f1       	breq	.+66     	; 0xe24 <strtol+0xaa>
     de2:	f0 e1       	ldi	r31, 0x10	; 16
     de4:	ef 16       	cp	r14, r31
     de6:	f1 04       	cpc	r15, r1
     de8:	29 f4       	brne	.+10     	; 0xdf4 <strtol+0x7a>
     dea:	3f c0       	rjmp	.+126    	; 0xe6a <strtol+0xf0>
     dec:	10 e3       	ldi	r17, 0x30	; 48
     dee:	e1 14       	cp	r14, r1
     df0:	f1 04       	cpc	r15, r1
     df2:	21 f1       	breq	.+72     	; 0xe3c <strtol+0xc2>
     df4:	28 e0       	ldi	r18, 0x08	; 8
     df6:	e2 16       	cp	r14, r18
     df8:	f1 04       	cpc	r15, r1
     dfa:	01 f1       	breq	.+64     	; 0xe3c <strtol+0xc2>
     dfc:	54 f4       	brge	.+20     	; 0xe12 <strtol+0x98>
     dfe:	e2 e0       	ldi	r30, 0x02	; 2
     e00:	ee 16       	cp	r14, r30
     e02:	f1 04       	cpc	r15, r1
     e04:	21 f5       	brne	.+72     	; 0xe4e <strtol+0xd4>
     e06:	81 2c       	mov	r8, r1
     e08:	91 2c       	mov	r9, r1
     e0a:	a1 2c       	mov	r10, r1
     e0c:	b0 e4       	ldi	r27, 0x40	; 64
     e0e:	bb 2e       	mov	r11, r27
     e10:	3e c0       	rjmp	.+124    	; 0xe8e <strtol+0x114>
     e12:	fa e0       	ldi	r31, 0x0A	; 10
     e14:	ef 16       	cp	r14, r31
     e16:	f1 04       	cpc	r15, r1
     e18:	39 f0       	breq	.+14     	; 0xe28 <strtol+0xae>
     e1a:	20 e1       	ldi	r18, 0x10	; 16
     e1c:	e2 16       	cp	r14, r18
     e1e:	f1 04       	cpc	r15, r1
     e20:	b1 f4       	brne	.+44     	; 0xe4e <strtol+0xd4>
     e22:	30 c0       	rjmp	.+96     	; 0xe84 <strtol+0x10a>
     e24:	10 33       	cpi	r17, 0x30	; 48
     e26:	19 f1       	breq	.+70     	; 0xe6e <strtol+0xf4>
     e28:	fa e0       	ldi	r31, 0x0A	; 10
     e2a:	ef 2e       	mov	r14, r31
     e2c:	f1 2c       	mov	r15, r1
     e2e:	ac ec       	ldi	r26, 0xCC	; 204
     e30:	8a 2e       	mov	r8, r26
     e32:	98 2c       	mov	r9, r8
     e34:	a8 2c       	mov	r10, r8
     e36:	ac e0       	ldi	r26, 0x0C	; 12
     e38:	ba 2e       	mov	r11, r26
     e3a:	29 c0       	rjmp	.+82     	; 0xe8e <strtol+0x114>
     e3c:	78 e0       	ldi	r23, 0x08	; 8
     e3e:	e7 2e       	mov	r14, r23
     e40:	f1 2c       	mov	r15, r1
     e42:	81 2c       	mov	r8, r1
     e44:	91 2c       	mov	r9, r1
     e46:	a1 2c       	mov	r10, r1
     e48:	e0 e1       	ldi	r30, 0x10	; 16
     e4a:	be 2e       	mov	r11, r30
     e4c:	20 c0       	rjmp	.+64     	; 0xe8e <strtol+0x114>
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e8       	ldi	r25, 0x80	; 128
     e56:	97 01       	movw	r18, r14
     e58:	0f 2c       	mov	r0, r15
     e5a:	00 0c       	add	r0, r0
     e5c:	44 0b       	sbc	r20, r20
     e5e:	55 0b       	sbc	r21, r21
     e60:	0e 94 9b 06 	call	0xd36	; 0xd36 <__udivmodsi4>
     e64:	49 01       	movw	r8, r18
     e66:	5a 01       	movw	r10, r20
     e68:	12 c0       	rjmp	.+36     	; 0xe8e <strtol+0x114>
     e6a:	10 33       	cpi	r17, 0x30	; 48
     e6c:	59 f4       	brne	.+22     	; 0xe84 <strtol+0x10a>
     e6e:	88 81       	ld	r24, Y
     e70:	8f 7d       	andi	r24, 0xDF	; 223
     e72:	88 35       	cpi	r24, 0x58	; 88
     e74:	09 f0       	breq	.+2      	; 0xe78 <strtol+0xfe>
     e76:	ba cf       	rjmp	.-140    	; 0xdec <strtol+0x72>
     e78:	19 81       	ldd	r17, Y+1	; 0x01
     e7a:	22 96       	adiw	r28, 0x02	; 2
     e7c:	02 60       	ori	r16, 0x02	; 2
     e7e:	80 e1       	ldi	r24, 0x10	; 16
     e80:	e8 2e       	mov	r14, r24
     e82:	f1 2c       	mov	r15, r1
     e84:	81 2c       	mov	r8, r1
     e86:	91 2c       	mov	r9, r1
     e88:	a1 2c       	mov	r10, r1
     e8a:	68 e0       	ldi	r22, 0x08	; 8
     e8c:	b6 2e       	mov	r11, r22
     e8e:	40 e0       	ldi	r20, 0x00	; 0
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	70 e0       	ldi	r23, 0x00	; 0
     e94:	cb 01       	movw	r24, r22
     e96:	27 01       	movw	r4, r14
     e98:	0f 2c       	mov	r0, r15
     e9a:	00 0c       	add	r0, r0
     e9c:	66 08       	sbc	r6, r6
     e9e:	77 08       	sbc	r7, r7
     ea0:	fe 01       	movw	r30, r28
     ea2:	50 ed       	ldi	r21, 0xD0	; 208
     ea4:	35 2e       	mov	r3, r21
     ea6:	31 0e       	add	r3, r17
     ea8:	29 e0       	ldi	r18, 0x09	; 9
     eaa:	23 15       	cp	r18, r3
     eac:	70 f4       	brcc	.+28     	; 0xeca <strtol+0x150>
     eae:	2f eb       	ldi	r18, 0xBF	; 191
     eb0:	21 0f       	add	r18, r17
     eb2:	2a 31       	cpi	r18, 0x1A	; 26
     eb4:	18 f4       	brcc	.+6      	; 0xebc <strtol+0x142>
     eb6:	39 ec       	ldi	r19, 0xC9	; 201
     eb8:	33 2e       	mov	r3, r19
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <strtol+0x14e>
     ebc:	2f e9       	ldi	r18, 0x9F	; 159
     ebe:	21 0f       	add	r18, r17
     ec0:	2a 31       	cpi	r18, 0x1A	; 26
     ec2:	18 f5       	brcc	.+70     	; 0xf0a <strtol+0x190>
     ec4:	29 ea       	ldi	r18, 0xA9	; 169
     ec6:	32 2e       	mov	r3, r18
     ec8:	31 0e       	add	r3, r17
     eca:	23 2d       	mov	r18, r3
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	2e 15       	cp	r18, r14
     ed0:	3f 05       	cpc	r19, r15
     ed2:	dc f4       	brge	.+54     	; 0xf0a <strtol+0x190>
     ed4:	47 fd       	sbrc	r20, 7
     ed6:	16 c0       	rjmp	.+44     	; 0xf04 <strtol+0x18a>
     ed8:	86 16       	cp	r8, r22
     eda:	97 06       	cpc	r9, r23
     edc:	a8 06       	cpc	r10, r24
     ede:	b9 06       	cpc	r11, r25
     ee0:	70 f0       	brcs	.+28     	; 0xefe <strtol+0x184>
     ee2:	a3 01       	movw	r20, r6
     ee4:	92 01       	movw	r18, r4
     ee6:	0e 94 71 06 	call	0xce2	; 0xce2 <__mulsi3>
     eea:	63 0d       	add	r22, r3
     eec:	71 1d       	adc	r23, r1
     eee:	81 1d       	adc	r24, r1
     ef0:	91 1d       	adc	r25, r1
     ef2:	61 30       	cpi	r22, 0x01	; 1
     ef4:	71 05       	cpc	r23, r1
     ef6:	81 05       	cpc	r24, r1
     ef8:	20 e8       	ldi	r18, 0x80	; 128
     efa:	92 07       	cpc	r25, r18
     efc:	10 f0       	brcs	.+4      	; 0xf02 <strtol+0x188>
     efe:	4f ef       	ldi	r20, 0xFF	; 255
     f00:	01 c0       	rjmp	.+2      	; 0xf04 <strtol+0x18a>
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	21 96       	adiw	r28, 0x01	; 1
     f06:	10 81       	ld	r17, Z
     f08:	cb cf       	rjmp	.-106    	; 0xea0 <strtol+0x126>
     f0a:	20 2f       	mov	r18, r16
     f0c:	21 70       	andi	r18, 0x01	; 1
     f0e:	c1 14       	cp	r12, r1
     f10:	d1 04       	cpc	r13, r1
     f12:	71 f0       	breq	.+28     	; 0xf30 <strtol+0x1b6>
     f14:	44 23       	and	r20, r20
     f16:	29 f0       	breq	.+10     	; 0xf22 <strtol+0x1a8>
     f18:	21 97       	sbiw	r28, 0x01	; 1
     f1a:	f6 01       	movw	r30, r12
     f1c:	d1 83       	std	Z+1, r29	; 0x01
     f1e:	c0 83       	st	Z, r28
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <strtol+0x1b6>
     f22:	01 ff       	sbrs	r16, 1
     f24:	19 c0       	rjmp	.+50     	; 0xf58 <strtol+0x1de>
     f26:	22 97       	sbiw	r28, 0x02	; 2
     f28:	f6 01       	movw	r30, r12
     f2a:	d1 83       	std	Z+1, r29	; 0x01
     f2c:	c0 83       	st	Z, r28
     f2e:	14 c0       	rjmp	.+40     	; 0xf58 <strtol+0x1de>
     f30:	47 ff       	sbrs	r20, 7
     f32:	12 c0       	rjmp	.+36     	; 0xf58 <strtol+0x1de>
     f34:	22 23       	and	r18, r18
     f36:	29 f0       	breq	.+10     	; 0xf42 <strtol+0x1c8>
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e8       	ldi	r25, 0x80	; 128
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <strtol+0x1d0>
     f42:	6f ef       	ldi	r22, 0xFF	; 255
     f44:	7f ef       	ldi	r23, 0xFF	; 255
     f46:	8f ef       	ldi	r24, 0xFF	; 255
     f48:	9f e7       	ldi	r25, 0x7F	; 127
     f4a:	22 e2       	ldi	r18, 0x22	; 34
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	30 93 ac 01 	sts	0x01AC, r19	; 0x8001ac <errno+0x1>
     f52:	20 93 ab 01 	sts	0x01AB, r18	; 0x8001ab <errno>
     f56:	09 c0       	rjmp	.+18     	; 0xf6a <strtol+0x1f0>
     f58:	22 23       	and	r18, r18
     f5a:	81 f0       	breq	.+32     	; 0xf7c <strtol+0x202>
     f5c:	90 95       	com	r25
     f5e:	80 95       	com	r24
     f60:	70 95       	com	r23
     f62:	61 95       	neg	r22
     f64:	7f 4f       	sbci	r23, 0xFF	; 255
     f66:	8f 4f       	sbci	r24, 0xFF	; 255
     f68:	9f 4f       	sbci	r25, 0xFF	; 255
     f6a:	46 2f       	mov	r20, r22
     f6c:	37 2f       	mov	r19, r23
     f6e:	28 2f       	mov	r18, r24
     f70:	12 c0       	rjmp	.+36     	; 0xf96 <strtol+0x21c>
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0d c0       	rjmp	.+26     	; 0xf96 <strtol+0x21c>
     f7c:	97 ff       	sbrs	r25, 7
     f7e:	f5 cf       	rjmp	.-22     	; 0xf6a <strtol+0x1f0>
     f80:	82 e2       	ldi	r24, 0x22	; 34
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	90 93 ac 01 	sts	0x01AC, r25	; 0x8001ac <errno+0x1>
     f88:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <errno>
     f8c:	6f ef       	ldi	r22, 0xFF	; 255
     f8e:	7f ef       	ldi	r23, 0xFF	; 255
     f90:	8f ef       	ldi	r24, 0xFF	; 255
     f92:	9f e7       	ldi	r25, 0x7F	; 127
     f94:	ea cf       	rjmp	.-44     	; 0xf6a <strtol+0x1f0>
     f96:	64 2f       	mov	r22, r20
     f98:	73 2f       	mov	r23, r19
     f9a:	82 2f       	mov	r24, r18
     f9c:	cd b7       	in	r28, 0x3d	; 61
     f9e:	de b7       	in	r29, 0x3e	; 62
     fa0:	e1 e1       	ldi	r30, 0x11	; 17
     fa2:	0c 94 c5 0a 	jmp	0x158a	; 0x158a <__epilogue_restores__+0x2>

00000fa6 <isspace>:
     fa6:	91 11       	cpse	r25, r1
     fa8:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__ctype_isfalse>
     fac:	80 32       	cpi	r24, 0x20	; 32
     fae:	19 f0       	breq	.+6      	; 0xfb6 <isspace+0x10>
     fb0:	89 50       	subi	r24, 0x09	; 9
     fb2:	85 50       	subi	r24, 0x05	; 5
     fb4:	c8 f7       	brcc	.-14     	; 0xfa8 <isspace+0x2>
     fb6:	08 95       	ret

00000fb8 <printf>:
     fb8:	a0 e0       	ldi	r26, 0x00	; 0
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e2 ee       	ldi	r30, 0xE2	; 226
     fbe:	f7 e0       	ldi	r31, 0x07	; 7
     fc0:	0c 94 b8 0a 	jmp	0x1570	; 0x1570 <__prologue_saves__+0x20>
     fc4:	ae 01       	movw	r20, r28
     fc6:	4b 5f       	subi	r20, 0xFB	; 251
     fc8:	5f 4f       	sbci	r21, 0xFF	; 255
     fca:	fa 01       	movw	r30, r20
     fcc:	61 91       	ld	r22, Z+
     fce:	71 91       	ld	r23, Z+
     fd0:	af 01       	movw	r20, r30
     fd2:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <__iob+0x2>
     fd6:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <__iob+0x3>
     fda:	0e 94 14 08 	call	0x1028	; 0x1028 <vfprintf>
     fde:	e2 e0       	ldi	r30, 0x02	; 2
     fe0:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__epilogue_restores__+0x20>

00000fe4 <sprintf>:
     fe4:	ae e0       	ldi	r26, 0x0E	; 14
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e8 ef       	ldi	r30, 0xF8	; 248
     fea:	f7 e0       	ldi	r31, 0x07	; 7
     fec:	0c 94 b6 0a 	jmp	0x156c	; 0x156c <__prologue_saves__+0x1c>
     ff0:	0d 89       	ldd	r16, Y+21	; 0x15
     ff2:	1e 89       	ldd	r17, Y+22	; 0x16
     ff4:	86 e0       	ldi	r24, 0x06	; 6
     ff6:	8c 83       	std	Y+4, r24	; 0x04
     ff8:	1a 83       	std	Y+2, r17	; 0x02
     ffa:	09 83       	std	Y+1, r16	; 0x01
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	9f e7       	ldi	r25, 0x7F	; 127
    1000:	9e 83       	std	Y+6, r25	; 0x06
    1002:	8d 83       	std	Y+5, r24	; 0x05
    1004:	ae 01       	movw	r20, r28
    1006:	47 5e       	subi	r20, 0xE7	; 231
    1008:	5f 4f       	sbci	r21, 0xFF	; 255
    100a:	6f 89       	ldd	r22, Y+23	; 0x17
    100c:	78 8d       	ldd	r23, Y+24	; 0x18
    100e:	ce 01       	movw	r24, r28
    1010:	01 96       	adiw	r24, 0x01	; 1
    1012:	0e 94 14 08 	call	0x1028	; 0x1028 <vfprintf>
    1016:	ef 81       	ldd	r30, Y+7	; 0x07
    1018:	f8 85       	ldd	r31, Y+8	; 0x08
    101a:	e0 0f       	add	r30, r16
    101c:	f1 1f       	adc	r31, r17
    101e:	10 82       	st	Z, r1
    1020:	2e 96       	adiw	r28, 0x0e	; 14
    1022:	e4 e0       	ldi	r30, 0x04	; 4
    1024:	0c 94 d2 0a 	jmp	0x15a4	; 0x15a4 <__epilogue_restores__+0x1c>

00001028 <vfprintf>:
    1028:	ab e0       	ldi	r26, 0x0B	; 11
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	ea e1       	ldi	r30, 0x1A	; 26
    102e:	f8 e0       	ldi	r31, 0x08	; 8
    1030:	0c 94 a8 0a 	jmp	0x1550	; 0x1550 <__prologue_saves__>
    1034:	6c 01       	movw	r12, r24
    1036:	7b 01       	movw	r14, r22
    1038:	8a 01       	movw	r16, r20
    103a:	fc 01       	movw	r30, r24
    103c:	17 82       	std	Z+7, r1	; 0x07
    103e:	16 82       	std	Z+6, r1	; 0x06
    1040:	83 81       	ldd	r24, Z+3	; 0x03
    1042:	81 ff       	sbrs	r24, 1
    1044:	cc c1       	rjmp	.+920    	; 0x13de <vfprintf+0x3b6>
    1046:	ce 01       	movw	r24, r28
    1048:	01 96       	adiw	r24, 0x01	; 1
    104a:	3c 01       	movw	r6, r24
    104c:	f6 01       	movw	r30, r12
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	f7 01       	movw	r30, r14
    1052:	93 fd       	sbrc	r25, 3
    1054:	85 91       	lpm	r24, Z+
    1056:	93 ff       	sbrs	r25, 3
    1058:	81 91       	ld	r24, Z+
    105a:	7f 01       	movw	r14, r30
    105c:	88 23       	and	r24, r24
    105e:	09 f4       	brne	.+2      	; 0x1062 <vfprintf+0x3a>
    1060:	ba c1       	rjmp	.+884    	; 0x13d6 <vfprintf+0x3ae>
    1062:	85 32       	cpi	r24, 0x25	; 37
    1064:	39 f4       	brne	.+14     	; 0x1074 <vfprintf+0x4c>
    1066:	93 fd       	sbrc	r25, 3
    1068:	85 91       	lpm	r24, Z+
    106a:	93 ff       	sbrs	r25, 3
    106c:	81 91       	ld	r24, Z+
    106e:	7f 01       	movw	r14, r30
    1070:	85 32       	cpi	r24, 0x25	; 37
    1072:	29 f4       	brne	.+10     	; 0x107e <vfprintf+0x56>
    1074:	b6 01       	movw	r22, r12
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	0e 94 0e 0a 	call	0x141c	; 0x141c <fputc>
    107c:	e7 cf       	rjmp	.-50     	; 0x104c <vfprintf+0x24>
    107e:	91 2c       	mov	r9, r1
    1080:	21 2c       	mov	r2, r1
    1082:	31 2c       	mov	r3, r1
    1084:	ff e1       	ldi	r31, 0x1F	; 31
    1086:	f3 15       	cp	r31, r3
    1088:	d8 f0       	brcs	.+54     	; 0x10c0 <vfprintf+0x98>
    108a:	8b 32       	cpi	r24, 0x2B	; 43
    108c:	79 f0       	breq	.+30     	; 0x10ac <vfprintf+0x84>
    108e:	38 f4       	brcc	.+14     	; 0x109e <vfprintf+0x76>
    1090:	80 32       	cpi	r24, 0x20	; 32
    1092:	79 f0       	breq	.+30     	; 0x10b2 <vfprintf+0x8a>
    1094:	83 32       	cpi	r24, 0x23	; 35
    1096:	a1 f4       	brne	.+40     	; 0x10c0 <vfprintf+0x98>
    1098:	23 2d       	mov	r18, r3
    109a:	20 61       	ori	r18, 0x10	; 16
    109c:	1d c0       	rjmp	.+58     	; 0x10d8 <vfprintf+0xb0>
    109e:	8d 32       	cpi	r24, 0x2D	; 45
    10a0:	61 f0       	breq	.+24     	; 0x10ba <vfprintf+0x92>
    10a2:	80 33       	cpi	r24, 0x30	; 48
    10a4:	69 f4       	brne	.+26     	; 0x10c0 <vfprintf+0x98>
    10a6:	23 2d       	mov	r18, r3
    10a8:	21 60       	ori	r18, 0x01	; 1
    10aa:	16 c0       	rjmp	.+44     	; 0x10d8 <vfprintf+0xb0>
    10ac:	83 2d       	mov	r24, r3
    10ae:	82 60       	ori	r24, 0x02	; 2
    10b0:	38 2e       	mov	r3, r24
    10b2:	e3 2d       	mov	r30, r3
    10b4:	e4 60       	ori	r30, 0x04	; 4
    10b6:	3e 2e       	mov	r3, r30
    10b8:	2a c0       	rjmp	.+84     	; 0x110e <vfprintf+0xe6>
    10ba:	f3 2d       	mov	r31, r3
    10bc:	f8 60       	ori	r31, 0x08	; 8
    10be:	1d c0       	rjmp	.+58     	; 0x10fa <vfprintf+0xd2>
    10c0:	37 fc       	sbrc	r3, 7
    10c2:	2d c0       	rjmp	.+90     	; 0x111e <vfprintf+0xf6>
    10c4:	20 ed       	ldi	r18, 0xD0	; 208
    10c6:	28 0f       	add	r18, r24
    10c8:	2a 30       	cpi	r18, 0x0A	; 10
    10ca:	40 f0       	brcs	.+16     	; 0x10dc <vfprintf+0xb4>
    10cc:	8e 32       	cpi	r24, 0x2E	; 46
    10ce:	b9 f4       	brne	.+46     	; 0x10fe <vfprintf+0xd6>
    10d0:	36 fc       	sbrc	r3, 6
    10d2:	81 c1       	rjmp	.+770    	; 0x13d6 <vfprintf+0x3ae>
    10d4:	23 2d       	mov	r18, r3
    10d6:	20 64       	ori	r18, 0x40	; 64
    10d8:	32 2e       	mov	r3, r18
    10da:	19 c0       	rjmp	.+50     	; 0x110e <vfprintf+0xe6>
    10dc:	36 fe       	sbrs	r3, 6
    10de:	06 c0       	rjmp	.+12     	; 0x10ec <vfprintf+0xc4>
    10e0:	8a e0       	ldi	r24, 0x0A	; 10
    10e2:	98 9e       	mul	r9, r24
    10e4:	20 0d       	add	r18, r0
    10e6:	11 24       	eor	r1, r1
    10e8:	92 2e       	mov	r9, r18
    10ea:	11 c0       	rjmp	.+34     	; 0x110e <vfprintf+0xe6>
    10ec:	ea e0       	ldi	r30, 0x0A	; 10
    10ee:	2e 9e       	mul	r2, r30
    10f0:	20 0d       	add	r18, r0
    10f2:	11 24       	eor	r1, r1
    10f4:	22 2e       	mov	r2, r18
    10f6:	f3 2d       	mov	r31, r3
    10f8:	f0 62       	ori	r31, 0x20	; 32
    10fa:	3f 2e       	mov	r3, r31
    10fc:	08 c0       	rjmp	.+16     	; 0x110e <vfprintf+0xe6>
    10fe:	8c 36       	cpi	r24, 0x6C	; 108
    1100:	21 f4       	brne	.+8      	; 0x110a <vfprintf+0xe2>
    1102:	83 2d       	mov	r24, r3
    1104:	80 68       	ori	r24, 0x80	; 128
    1106:	38 2e       	mov	r3, r24
    1108:	02 c0       	rjmp	.+4      	; 0x110e <vfprintf+0xe6>
    110a:	88 36       	cpi	r24, 0x68	; 104
    110c:	41 f4       	brne	.+16     	; 0x111e <vfprintf+0xf6>
    110e:	f7 01       	movw	r30, r14
    1110:	93 fd       	sbrc	r25, 3
    1112:	85 91       	lpm	r24, Z+
    1114:	93 ff       	sbrs	r25, 3
    1116:	81 91       	ld	r24, Z+
    1118:	7f 01       	movw	r14, r30
    111a:	81 11       	cpse	r24, r1
    111c:	b3 cf       	rjmp	.-154    	; 0x1084 <vfprintf+0x5c>
    111e:	98 2f       	mov	r25, r24
    1120:	9f 7d       	andi	r25, 0xDF	; 223
    1122:	95 54       	subi	r25, 0x45	; 69
    1124:	93 30       	cpi	r25, 0x03	; 3
    1126:	28 f4       	brcc	.+10     	; 0x1132 <vfprintf+0x10a>
    1128:	0c 5f       	subi	r16, 0xFC	; 252
    112a:	1f 4f       	sbci	r17, 0xFF	; 255
    112c:	9f e3       	ldi	r25, 0x3F	; 63
    112e:	99 83       	std	Y+1, r25	; 0x01
    1130:	0d c0       	rjmp	.+26     	; 0x114c <vfprintf+0x124>
    1132:	83 36       	cpi	r24, 0x63	; 99
    1134:	31 f0       	breq	.+12     	; 0x1142 <vfprintf+0x11a>
    1136:	83 37       	cpi	r24, 0x73	; 115
    1138:	71 f0       	breq	.+28     	; 0x1156 <vfprintf+0x12e>
    113a:	83 35       	cpi	r24, 0x53	; 83
    113c:	09 f0       	breq	.+2      	; 0x1140 <vfprintf+0x118>
    113e:	59 c0       	rjmp	.+178    	; 0x11f2 <vfprintf+0x1ca>
    1140:	21 c0       	rjmp	.+66     	; 0x1184 <vfprintf+0x15c>
    1142:	f8 01       	movw	r30, r16
    1144:	80 81       	ld	r24, Z
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	0e 5f       	subi	r16, 0xFE	; 254
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
    114c:	88 24       	eor	r8, r8
    114e:	83 94       	inc	r8
    1150:	91 2c       	mov	r9, r1
    1152:	53 01       	movw	r10, r6
    1154:	13 c0       	rjmp	.+38     	; 0x117c <vfprintf+0x154>
    1156:	28 01       	movw	r4, r16
    1158:	f2 e0       	ldi	r31, 0x02	; 2
    115a:	4f 0e       	add	r4, r31
    115c:	51 1c       	adc	r5, r1
    115e:	f8 01       	movw	r30, r16
    1160:	a0 80       	ld	r10, Z
    1162:	b1 80       	ldd	r11, Z+1	; 0x01
    1164:	36 fe       	sbrs	r3, 6
    1166:	03 c0       	rjmp	.+6      	; 0x116e <vfprintf+0x146>
    1168:	69 2d       	mov	r22, r9
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <vfprintf+0x14a>
    116e:	6f ef       	ldi	r22, 0xFF	; 255
    1170:	7f ef       	ldi	r23, 0xFF	; 255
    1172:	c5 01       	movw	r24, r10
    1174:	0e 94 03 0a 	call	0x1406	; 0x1406 <strnlen>
    1178:	4c 01       	movw	r8, r24
    117a:	82 01       	movw	r16, r4
    117c:	f3 2d       	mov	r31, r3
    117e:	ff 77       	andi	r31, 0x7F	; 127
    1180:	3f 2e       	mov	r3, r31
    1182:	16 c0       	rjmp	.+44     	; 0x11b0 <vfprintf+0x188>
    1184:	28 01       	movw	r4, r16
    1186:	22 e0       	ldi	r18, 0x02	; 2
    1188:	42 0e       	add	r4, r18
    118a:	51 1c       	adc	r5, r1
    118c:	f8 01       	movw	r30, r16
    118e:	a0 80       	ld	r10, Z
    1190:	b1 80       	ldd	r11, Z+1	; 0x01
    1192:	36 fe       	sbrs	r3, 6
    1194:	03 c0       	rjmp	.+6      	; 0x119c <vfprintf+0x174>
    1196:	69 2d       	mov	r22, r9
    1198:	70 e0       	ldi	r23, 0x00	; 0
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <vfprintf+0x178>
    119c:	6f ef       	ldi	r22, 0xFF	; 255
    119e:	7f ef       	ldi	r23, 0xFF	; 255
    11a0:	c5 01       	movw	r24, r10
    11a2:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <strnlen_P>
    11a6:	4c 01       	movw	r8, r24
    11a8:	f3 2d       	mov	r31, r3
    11aa:	f0 68       	ori	r31, 0x80	; 128
    11ac:	3f 2e       	mov	r3, r31
    11ae:	82 01       	movw	r16, r4
    11b0:	33 fc       	sbrc	r3, 3
    11b2:	1b c0       	rjmp	.+54     	; 0x11ea <vfprintf+0x1c2>
    11b4:	82 2d       	mov	r24, r2
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	88 16       	cp	r8, r24
    11ba:	99 06       	cpc	r9, r25
    11bc:	b0 f4       	brcc	.+44     	; 0x11ea <vfprintf+0x1c2>
    11be:	b6 01       	movw	r22, r12
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	0e 94 0e 0a 	call	0x141c	; 0x141c <fputc>
    11c8:	2a 94       	dec	r2
    11ca:	f4 cf       	rjmp	.-24     	; 0x11b4 <vfprintf+0x18c>
    11cc:	f5 01       	movw	r30, r10
    11ce:	37 fc       	sbrc	r3, 7
    11d0:	85 91       	lpm	r24, Z+
    11d2:	37 fe       	sbrs	r3, 7
    11d4:	81 91       	ld	r24, Z+
    11d6:	5f 01       	movw	r10, r30
    11d8:	b6 01       	movw	r22, r12
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	0e 94 0e 0a 	call	0x141c	; 0x141c <fputc>
    11e0:	21 10       	cpse	r2, r1
    11e2:	2a 94       	dec	r2
    11e4:	21 e0       	ldi	r18, 0x01	; 1
    11e6:	82 1a       	sub	r8, r18
    11e8:	91 08       	sbc	r9, r1
    11ea:	81 14       	cp	r8, r1
    11ec:	91 04       	cpc	r9, r1
    11ee:	71 f7       	brne	.-36     	; 0x11cc <vfprintf+0x1a4>
    11f0:	e8 c0       	rjmp	.+464    	; 0x13c2 <vfprintf+0x39a>
    11f2:	84 36       	cpi	r24, 0x64	; 100
    11f4:	11 f0       	breq	.+4      	; 0x11fa <vfprintf+0x1d2>
    11f6:	89 36       	cpi	r24, 0x69	; 105
    11f8:	41 f5       	brne	.+80     	; 0x124a <vfprintf+0x222>
    11fa:	f8 01       	movw	r30, r16
    11fc:	37 fe       	sbrs	r3, 7
    11fe:	07 c0       	rjmp	.+14     	; 0x120e <vfprintf+0x1e6>
    1200:	60 81       	ld	r22, Z
    1202:	71 81       	ldd	r23, Z+1	; 0x01
    1204:	82 81       	ldd	r24, Z+2	; 0x02
    1206:	93 81       	ldd	r25, Z+3	; 0x03
    1208:	0c 5f       	subi	r16, 0xFC	; 252
    120a:	1f 4f       	sbci	r17, 0xFF	; 255
    120c:	08 c0       	rjmp	.+16     	; 0x121e <vfprintf+0x1f6>
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	07 2e       	mov	r0, r23
    1214:	00 0c       	add	r0, r0
    1216:	88 0b       	sbc	r24, r24
    1218:	99 0b       	sbc	r25, r25
    121a:	0e 5f       	subi	r16, 0xFE	; 254
    121c:	1f 4f       	sbci	r17, 0xFF	; 255
    121e:	f3 2d       	mov	r31, r3
    1220:	ff 76       	andi	r31, 0x6F	; 111
    1222:	3f 2e       	mov	r3, r31
    1224:	97 ff       	sbrs	r25, 7
    1226:	09 c0       	rjmp	.+18     	; 0x123a <vfprintf+0x212>
    1228:	90 95       	com	r25
    122a:	80 95       	com	r24
    122c:	70 95       	com	r23
    122e:	61 95       	neg	r22
    1230:	7f 4f       	sbci	r23, 0xFF	; 255
    1232:	8f 4f       	sbci	r24, 0xFF	; 255
    1234:	9f 4f       	sbci	r25, 0xFF	; 255
    1236:	f0 68       	ori	r31, 0x80	; 128
    1238:	3f 2e       	mov	r3, r31
    123a:	2a e0       	ldi	r18, 0x0A	; 10
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	a3 01       	movw	r20, r6
    1240:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__ultoa_invert>
    1244:	88 2e       	mov	r8, r24
    1246:	86 18       	sub	r8, r6
    1248:	45 c0       	rjmp	.+138    	; 0x12d4 <vfprintf+0x2ac>
    124a:	85 37       	cpi	r24, 0x75	; 117
    124c:	31 f4       	brne	.+12     	; 0x125a <vfprintf+0x232>
    124e:	23 2d       	mov	r18, r3
    1250:	2f 7e       	andi	r18, 0xEF	; 239
    1252:	b2 2e       	mov	r11, r18
    1254:	2a e0       	ldi	r18, 0x0A	; 10
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	25 c0       	rjmp	.+74     	; 0x12a4 <vfprintf+0x27c>
    125a:	93 2d       	mov	r25, r3
    125c:	99 7f       	andi	r25, 0xF9	; 249
    125e:	b9 2e       	mov	r11, r25
    1260:	8f 36       	cpi	r24, 0x6F	; 111
    1262:	c1 f0       	breq	.+48     	; 0x1294 <vfprintf+0x26c>
    1264:	18 f4       	brcc	.+6      	; 0x126c <vfprintf+0x244>
    1266:	88 35       	cpi	r24, 0x58	; 88
    1268:	79 f0       	breq	.+30     	; 0x1288 <vfprintf+0x260>
    126a:	b5 c0       	rjmp	.+362    	; 0x13d6 <vfprintf+0x3ae>
    126c:	80 37       	cpi	r24, 0x70	; 112
    126e:	19 f0       	breq	.+6      	; 0x1276 <vfprintf+0x24e>
    1270:	88 37       	cpi	r24, 0x78	; 120
    1272:	21 f0       	breq	.+8      	; 0x127c <vfprintf+0x254>
    1274:	b0 c0       	rjmp	.+352    	; 0x13d6 <vfprintf+0x3ae>
    1276:	e9 2f       	mov	r30, r25
    1278:	e0 61       	ori	r30, 0x10	; 16
    127a:	be 2e       	mov	r11, r30
    127c:	b4 fe       	sbrs	r11, 4
    127e:	0d c0       	rjmp	.+26     	; 0x129a <vfprintf+0x272>
    1280:	fb 2d       	mov	r31, r11
    1282:	f4 60       	ori	r31, 0x04	; 4
    1284:	bf 2e       	mov	r11, r31
    1286:	09 c0       	rjmp	.+18     	; 0x129a <vfprintf+0x272>
    1288:	34 fe       	sbrs	r3, 4
    128a:	0a c0       	rjmp	.+20     	; 0x12a0 <vfprintf+0x278>
    128c:	29 2f       	mov	r18, r25
    128e:	26 60       	ori	r18, 0x06	; 6
    1290:	b2 2e       	mov	r11, r18
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <vfprintf+0x278>
    1294:	28 e0       	ldi	r18, 0x08	; 8
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	05 c0       	rjmp	.+10     	; 0x12a4 <vfprintf+0x27c>
    129a:	20 e1       	ldi	r18, 0x10	; 16
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	02 c0       	rjmp	.+4      	; 0x12a4 <vfprintf+0x27c>
    12a0:	20 e1       	ldi	r18, 0x10	; 16
    12a2:	32 e0       	ldi	r19, 0x02	; 2
    12a4:	f8 01       	movw	r30, r16
    12a6:	b7 fe       	sbrs	r11, 7
    12a8:	07 c0       	rjmp	.+14     	; 0x12b8 <vfprintf+0x290>
    12aa:	60 81       	ld	r22, Z
    12ac:	71 81       	ldd	r23, Z+1	; 0x01
    12ae:	82 81       	ldd	r24, Z+2	; 0x02
    12b0:	93 81       	ldd	r25, Z+3	; 0x03
    12b2:	0c 5f       	subi	r16, 0xFC	; 252
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	06 c0       	rjmp	.+12     	; 0x12c4 <vfprintf+0x29c>
    12b8:	60 81       	ld	r22, Z
    12ba:	71 81       	ldd	r23, Z+1	; 0x01
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 5f       	subi	r16, 0xFE	; 254
    12c2:	1f 4f       	sbci	r17, 0xFF	; 255
    12c4:	a3 01       	movw	r20, r6
    12c6:	0e 94 4a 0a 	call	0x1494	; 0x1494 <__ultoa_invert>
    12ca:	88 2e       	mov	r8, r24
    12cc:	86 18       	sub	r8, r6
    12ce:	fb 2d       	mov	r31, r11
    12d0:	ff 77       	andi	r31, 0x7F	; 127
    12d2:	3f 2e       	mov	r3, r31
    12d4:	36 fe       	sbrs	r3, 6
    12d6:	0d c0       	rjmp	.+26     	; 0x12f2 <vfprintf+0x2ca>
    12d8:	23 2d       	mov	r18, r3
    12da:	2e 7f       	andi	r18, 0xFE	; 254
    12dc:	a2 2e       	mov	r10, r18
    12de:	89 14       	cp	r8, r9
    12e0:	58 f4       	brcc	.+22     	; 0x12f8 <vfprintf+0x2d0>
    12e2:	34 fe       	sbrs	r3, 4
    12e4:	0b c0       	rjmp	.+22     	; 0x12fc <vfprintf+0x2d4>
    12e6:	32 fc       	sbrc	r3, 2
    12e8:	09 c0       	rjmp	.+18     	; 0x12fc <vfprintf+0x2d4>
    12ea:	83 2d       	mov	r24, r3
    12ec:	8e 7e       	andi	r24, 0xEE	; 238
    12ee:	a8 2e       	mov	r10, r24
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <vfprintf+0x2d4>
    12f2:	b8 2c       	mov	r11, r8
    12f4:	a3 2c       	mov	r10, r3
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <vfprintf+0x2d6>
    12f8:	b8 2c       	mov	r11, r8
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <vfprintf+0x2d6>
    12fc:	b9 2c       	mov	r11, r9
    12fe:	a4 fe       	sbrs	r10, 4
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <vfprintf+0x2f8>
    1302:	fe 01       	movw	r30, r28
    1304:	e8 0d       	add	r30, r8
    1306:	f1 1d       	adc	r31, r1
    1308:	80 81       	ld	r24, Z
    130a:	80 33       	cpi	r24, 0x30	; 48
    130c:	21 f4       	brne	.+8      	; 0x1316 <vfprintf+0x2ee>
    130e:	9a 2d       	mov	r25, r10
    1310:	99 7e       	andi	r25, 0xE9	; 233
    1312:	a9 2e       	mov	r10, r25
    1314:	09 c0       	rjmp	.+18     	; 0x1328 <vfprintf+0x300>
    1316:	a2 fe       	sbrs	r10, 2
    1318:	06 c0       	rjmp	.+12     	; 0x1326 <vfprintf+0x2fe>
    131a:	b3 94       	inc	r11
    131c:	b3 94       	inc	r11
    131e:	04 c0       	rjmp	.+8      	; 0x1328 <vfprintf+0x300>
    1320:	8a 2d       	mov	r24, r10
    1322:	86 78       	andi	r24, 0x86	; 134
    1324:	09 f0       	breq	.+2      	; 0x1328 <vfprintf+0x300>
    1326:	b3 94       	inc	r11
    1328:	a3 fc       	sbrc	r10, 3
    132a:	11 c0       	rjmp	.+34     	; 0x134e <vfprintf+0x326>
    132c:	a0 fe       	sbrs	r10, 0
    132e:	06 c0       	rjmp	.+12     	; 0x133c <vfprintf+0x314>
    1330:	b2 14       	cp	r11, r2
    1332:	88 f4       	brcc	.+34     	; 0x1356 <vfprintf+0x32e>
    1334:	28 0c       	add	r2, r8
    1336:	92 2c       	mov	r9, r2
    1338:	9b 18       	sub	r9, r11
    133a:	0e c0       	rjmp	.+28     	; 0x1358 <vfprintf+0x330>
    133c:	b2 14       	cp	r11, r2
    133e:	60 f4       	brcc	.+24     	; 0x1358 <vfprintf+0x330>
    1340:	b6 01       	movw	r22, r12
    1342:	80 e2       	ldi	r24, 0x20	; 32
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	0e 94 0e 0a 	call	0x141c	; 0x141c <fputc>
    134a:	b3 94       	inc	r11
    134c:	f7 cf       	rjmp	.-18     	; 0x133c <vfprintf+0x314>
    134e:	b2 14       	cp	r11, r2
    1350:	18 f4       	brcc	.+6      	; 0x1358 <vfprintf+0x330>
    1352:	2b 18       	sub	r2, r11
    1354:	02 c0       	rjmp	.+4      	; 0x135a <vfprintf+0x332>
    1356:	98 2c       	mov	r9, r8
    1358:	21 2c       	mov	r2, r1
    135a:	a4 fe       	sbrs	r10, 4
    135c:	10 c0       	rjmp	.+32     	; 0x137e <vfprintf+0x356>
    135e:	b6 01       	movw	r22, r12
    1360:	80 e3       	ldi	r24, 0x30	; 48
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	0e 94 0e 0a 	call	0x141c	; 0x141c <fputc>
    1368:	a2 fe       	sbrs	r10, 2
    136a:	17 c0       	rjmp	.+46     	; 0x139a <vfprintf+0x372>
    136c:	a1 fc       	sbrc	r10, 1
    136e:	03 c0       	rjmp	.+6      	; 0x1376 <vfprintf+0x34e>
    1370:	88 e7       	ldi	r24, 0x78	; 120
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	02 c0       	rjmp	.+4      	; 0x137a <vfprintf+0x352>
    1376:	88 e5       	ldi	r24, 0x58	; 88
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	b6 01       	movw	r22, r12
    137c:	0c c0       	rjmp	.+24     	; 0x1396 <vfprintf+0x36e>
    137e:	8a 2d       	mov	r24, r10
    1380:	86 78       	andi	r24, 0x86	; 134
    1382:	59 f0       	breq	.+22     	; 0x139a <vfprintf+0x372>
    1384:	a1 fe       	sbrs	r10, 1
    1386:	02 c0       	rjmp	.+4      	; 0x138c <vfprintf+0x364>
    1388:	8b e2       	ldi	r24, 0x2B	; 43
    138a:	01 c0       	rjmp	.+2      	; 0x138e <vfprintf+0x366>
    138c:	80 e2       	ldi	r24, 0x20	; 32
    138e:	a7 fc       	sbrc	r10, 7
    1390:	8d e2       	ldi	r24, 0x2D	; 45
    1392:	b6 01       	movw	r22, r12
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	0e 94 0e 0a 	call	0x141c	; 0x141c <fputc>
    139a:	89 14       	cp	r8, r9
    139c:	38 f4       	brcc	.+14     	; 0x13ac <vfprintf+0x384>
    139e:	b6 01       	movw	r22, r12
    13a0:	80 e3       	ldi	r24, 0x30	; 48
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 0e 0a 	call	0x141c	; 0x141c <fputc>
    13a8:	9a 94       	dec	r9
    13aa:	f7 cf       	rjmp	.-18     	; 0x139a <vfprintf+0x372>
    13ac:	8a 94       	dec	r8
    13ae:	f3 01       	movw	r30, r6
    13b0:	e8 0d       	add	r30, r8
    13b2:	f1 1d       	adc	r31, r1
    13b4:	80 81       	ld	r24, Z
    13b6:	b6 01       	movw	r22, r12
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	0e 94 0e 0a 	call	0x141c	; 0x141c <fputc>
    13be:	81 10       	cpse	r8, r1
    13c0:	f5 cf       	rjmp	.-22     	; 0x13ac <vfprintf+0x384>
    13c2:	22 20       	and	r2, r2
    13c4:	09 f4       	brne	.+2      	; 0x13c8 <vfprintf+0x3a0>
    13c6:	42 ce       	rjmp	.-892    	; 0x104c <vfprintf+0x24>
    13c8:	b6 01       	movw	r22, r12
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 0e 0a 	call	0x141c	; 0x141c <fputc>
    13d2:	2a 94       	dec	r2
    13d4:	f6 cf       	rjmp	.-20     	; 0x13c2 <vfprintf+0x39a>
    13d6:	f6 01       	movw	r30, r12
    13d8:	86 81       	ldd	r24, Z+6	; 0x06
    13da:	97 81       	ldd	r25, Z+7	; 0x07
    13dc:	02 c0       	rjmp	.+4      	; 0x13e2 <vfprintf+0x3ba>
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	9f ef       	ldi	r25, 0xFF	; 255
    13e2:	2b 96       	adiw	r28, 0x0b	; 11
    13e4:	e2 e1       	ldi	r30, 0x12	; 18
    13e6:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__epilogue_restores__>

000013ea <__ctype_isfalse>:
    13ea:	99 27       	eor	r25, r25
    13ec:	88 27       	eor	r24, r24

000013ee <__ctype_istrue>:
    13ee:	08 95       	ret

000013f0 <strnlen_P>:
    13f0:	fc 01       	movw	r30, r24
    13f2:	05 90       	lpm	r0, Z+
    13f4:	61 50       	subi	r22, 0x01	; 1
    13f6:	70 40       	sbci	r23, 0x00	; 0
    13f8:	01 10       	cpse	r0, r1
    13fa:	d8 f7       	brcc	.-10     	; 0x13f2 <strnlen_P+0x2>
    13fc:	80 95       	com	r24
    13fe:	90 95       	com	r25
    1400:	8e 0f       	add	r24, r30
    1402:	9f 1f       	adc	r25, r31
    1404:	08 95       	ret

00001406 <strnlen>:
    1406:	fc 01       	movw	r30, r24
    1408:	61 50       	subi	r22, 0x01	; 1
    140a:	70 40       	sbci	r23, 0x00	; 0
    140c:	01 90       	ld	r0, Z+
    140e:	01 10       	cpse	r0, r1
    1410:	d8 f7       	brcc	.-10     	; 0x1408 <strnlen+0x2>
    1412:	80 95       	com	r24
    1414:	90 95       	com	r25
    1416:	8e 0f       	add	r24, r30
    1418:	9f 1f       	adc	r25, r31
    141a:	08 95       	ret

0000141c <fputc>:
    141c:	0f 93       	push	r16
    141e:	1f 93       	push	r17
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	fb 01       	movw	r30, r22
    1426:	23 81       	ldd	r18, Z+3	; 0x03
    1428:	21 fd       	sbrc	r18, 1
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <fputc+0x16>
    142c:	8f ef       	ldi	r24, 0xFF	; 255
    142e:	9f ef       	ldi	r25, 0xFF	; 255
    1430:	2c c0       	rjmp	.+88     	; 0x148a <fputc+0x6e>
    1432:	22 ff       	sbrs	r18, 2
    1434:	16 c0       	rjmp	.+44     	; 0x1462 <fputc+0x46>
    1436:	46 81       	ldd	r20, Z+6	; 0x06
    1438:	57 81       	ldd	r21, Z+7	; 0x07
    143a:	24 81       	ldd	r18, Z+4	; 0x04
    143c:	35 81       	ldd	r19, Z+5	; 0x05
    143e:	42 17       	cp	r20, r18
    1440:	53 07       	cpc	r21, r19
    1442:	44 f4       	brge	.+16     	; 0x1454 <fputc+0x38>
    1444:	a0 81       	ld	r26, Z
    1446:	b1 81       	ldd	r27, Z+1	; 0x01
    1448:	9d 01       	movw	r18, r26
    144a:	2f 5f       	subi	r18, 0xFF	; 255
    144c:	3f 4f       	sbci	r19, 0xFF	; 255
    144e:	31 83       	std	Z+1, r19	; 0x01
    1450:	20 83       	st	Z, r18
    1452:	8c 93       	st	X, r24
    1454:	26 81       	ldd	r18, Z+6	; 0x06
    1456:	37 81       	ldd	r19, Z+7	; 0x07
    1458:	2f 5f       	subi	r18, 0xFF	; 255
    145a:	3f 4f       	sbci	r19, 0xFF	; 255
    145c:	37 83       	std	Z+7, r19	; 0x07
    145e:	26 83       	std	Z+6, r18	; 0x06
    1460:	14 c0       	rjmp	.+40     	; 0x148a <fputc+0x6e>
    1462:	8b 01       	movw	r16, r22
    1464:	ec 01       	movw	r28, r24
    1466:	fb 01       	movw	r30, r22
    1468:	00 84       	ldd	r0, Z+8	; 0x08
    146a:	f1 85       	ldd	r31, Z+9	; 0x09
    146c:	e0 2d       	mov	r30, r0
    146e:	09 95       	icall
    1470:	89 2b       	or	r24, r25
    1472:	e1 f6       	brne	.-72     	; 0x142c <fputc+0x10>
    1474:	d8 01       	movw	r26, r16
    1476:	16 96       	adiw	r26, 0x06	; 6
    1478:	8d 91       	ld	r24, X+
    147a:	9c 91       	ld	r25, X
    147c:	17 97       	sbiw	r26, 0x07	; 7
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	17 96       	adiw	r26, 0x07	; 7
    1482:	9c 93       	st	X, r25
    1484:	8e 93       	st	-X, r24
    1486:	16 97       	sbiw	r26, 0x06	; 6
    1488:	ce 01       	movw	r24, r28
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	08 95       	ret

00001494 <__ultoa_invert>:
    1494:	fa 01       	movw	r30, r20
    1496:	aa 27       	eor	r26, r26
    1498:	28 30       	cpi	r18, 0x08	; 8
    149a:	51 f1       	breq	.+84     	; 0x14f0 <__ultoa_invert+0x5c>
    149c:	20 31       	cpi	r18, 0x10	; 16
    149e:	81 f1       	breq	.+96     	; 0x1500 <__ultoa_invert+0x6c>
    14a0:	e8 94       	clt
    14a2:	6f 93       	push	r22
    14a4:	6e 7f       	andi	r22, 0xFE	; 254
    14a6:	6e 5f       	subi	r22, 0xFE	; 254
    14a8:	7f 4f       	sbci	r23, 0xFF	; 255
    14aa:	8f 4f       	sbci	r24, 0xFF	; 255
    14ac:	9f 4f       	sbci	r25, 0xFF	; 255
    14ae:	af 4f       	sbci	r26, 0xFF	; 255
    14b0:	b1 e0       	ldi	r27, 0x01	; 1
    14b2:	3e d0       	rcall	.+124    	; 0x1530 <__ultoa_invert+0x9c>
    14b4:	b4 e0       	ldi	r27, 0x04	; 4
    14b6:	3c d0       	rcall	.+120    	; 0x1530 <__ultoa_invert+0x9c>
    14b8:	67 0f       	add	r22, r23
    14ba:	78 1f       	adc	r23, r24
    14bc:	89 1f       	adc	r24, r25
    14be:	9a 1f       	adc	r25, r26
    14c0:	a1 1d       	adc	r26, r1
    14c2:	68 0f       	add	r22, r24
    14c4:	79 1f       	adc	r23, r25
    14c6:	8a 1f       	adc	r24, r26
    14c8:	91 1d       	adc	r25, r1
    14ca:	a1 1d       	adc	r26, r1
    14cc:	6a 0f       	add	r22, r26
    14ce:	71 1d       	adc	r23, r1
    14d0:	81 1d       	adc	r24, r1
    14d2:	91 1d       	adc	r25, r1
    14d4:	a1 1d       	adc	r26, r1
    14d6:	20 d0       	rcall	.+64     	; 0x1518 <__ultoa_invert+0x84>
    14d8:	09 f4       	brne	.+2      	; 0x14dc <__ultoa_invert+0x48>
    14da:	68 94       	set
    14dc:	3f 91       	pop	r19
    14de:	2a e0       	ldi	r18, 0x0A	; 10
    14e0:	26 9f       	mul	r18, r22
    14e2:	11 24       	eor	r1, r1
    14e4:	30 19       	sub	r19, r0
    14e6:	30 5d       	subi	r19, 0xD0	; 208
    14e8:	31 93       	st	Z+, r19
    14ea:	de f6       	brtc	.-74     	; 0x14a2 <__ultoa_invert+0xe>
    14ec:	cf 01       	movw	r24, r30
    14ee:	08 95       	ret
    14f0:	46 2f       	mov	r20, r22
    14f2:	47 70       	andi	r20, 0x07	; 7
    14f4:	40 5d       	subi	r20, 0xD0	; 208
    14f6:	41 93       	st	Z+, r20
    14f8:	b3 e0       	ldi	r27, 0x03	; 3
    14fa:	0f d0       	rcall	.+30     	; 0x151a <__ultoa_invert+0x86>
    14fc:	c9 f7       	brne	.-14     	; 0x14f0 <__ultoa_invert+0x5c>
    14fe:	f6 cf       	rjmp	.-20     	; 0x14ec <__ultoa_invert+0x58>
    1500:	46 2f       	mov	r20, r22
    1502:	4f 70       	andi	r20, 0x0F	; 15
    1504:	40 5d       	subi	r20, 0xD0	; 208
    1506:	4a 33       	cpi	r20, 0x3A	; 58
    1508:	18 f0       	brcs	.+6      	; 0x1510 <__ultoa_invert+0x7c>
    150a:	49 5d       	subi	r20, 0xD9	; 217
    150c:	31 fd       	sbrc	r19, 1
    150e:	40 52       	subi	r20, 0x20	; 32
    1510:	41 93       	st	Z+, r20
    1512:	02 d0       	rcall	.+4      	; 0x1518 <__ultoa_invert+0x84>
    1514:	a9 f7       	brne	.-22     	; 0x1500 <__ultoa_invert+0x6c>
    1516:	ea cf       	rjmp	.-44     	; 0x14ec <__ultoa_invert+0x58>
    1518:	b4 e0       	ldi	r27, 0x04	; 4
    151a:	a6 95       	lsr	r26
    151c:	97 95       	ror	r25
    151e:	87 95       	ror	r24
    1520:	77 95       	ror	r23
    1522:	67 95       	ror	r22
    1524:	ba 95       	dec	r27
    1526:	c9 f7       	brne	.-14     	; 0x151a <__ultoa_invert+0x86>
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 05       	cpc	r22, r1
    152c:	71 05       	cpc	r23, r1
    152e:	08 95       	ret
    1530:	9b 01       	movw	r18, r22
    1532:	ac 01       	movw	r20, r24
    1534:	0a 2e       	mov	r0, r26
    1536:	06 94       	lsr	r0
    1538:	57 95       	ror	r21
    153a:	47 95       	ror	r20
    153c:	37 95       	ror	r19
    153e:	27 95       	ror	r18
    1540:	ba 95       	dec	r27
    1542:	c9 f7       	brne	.-14     	; 0x1536 <__ultoa_invert+0xa2>
    1544:	62 0f       	add	r22, r18
    1546:	73 1f       	adc	r23, r19
    1548:	84 1f       	adc	r24, r20
    154a:	95 1f       	adc	r25, r21
    154c:	a0 1d       	adc	r26, r0
    154e:	08 95       	ret

00001550 <__prologue_saves__>:
    1550:	2f 92       	push	r2
    1552:	3f 92       	push	r3
    1554:	4f 92       	push	r4
    1556:	5f 92       	push	r5
    1558:	6f 92       	push	r6
    155a:	7f 92       	push	r7
    155c:	8f 92       	push	r8
    155e:	9f 92       	push	r9
    1560:	af 92       	push	r10
    1562:	bf 92       	push	r11
    1564:	cf 92       	push	r12
    1566:	df 92       	push	r13
    1568:	ef 92       	push	r14
    156a:	ff 92       	push	r15
    156c:	0f 93       	push	r16
    156e:	1f 93       	push	r17
    1570:	cf 93       	push	r28
    1572:	df 93       	push	r29
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	ca 1b       	sub	r28, r26
    157a:	db 0b       	sbc	r29, r27
    157c:	0f b6       	in	r0, 0x3f	; 63
    157e:	f8 94       	cli
    1580:	de bf       	out	0x3e, r29	; 62
    1582:	0f be       	out	0x3f, r0	; 63
    1584:	cd bf       	out	0x3d, r28	; 61
    1586:	09 94       	ijmp

00001588 <__epilogue_restores__>:
    1588:	2a 88       	ldd	r2, Y+18	; 0x12
    158a:	39 88       	ldd	r3, Y+17	; 0x11
    158c:	48 88       	ldd	r4, Y+16	; 0x10
    158e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1590:	6e 84       	ldd	r6, Y+14	; 0x0e
    1592:	7d 84       	ldd	r7, Y+13	; 0x0d
    1594:	8c 84       	ldd	r8, Y+12	; 0x0c
    1596:	9b 84       	ldd	r9, Y+11	; 0x0b
    1598:	aa 84       	ldd	r10, Y+10	; 0x0a
    159a:	b9 84       	ldd	r11, Y+9	; 0x09
    159c:	c8 84       	ldd	r12, Y+8	; 0x08
    159e:	df 80       	ldd	r13, Y+7	; 0x07
    15a0:	ee 80       	ldd	r14, Y+6	; 0x06
    15a2:	fd 80       	ldd	r15, Y+5	; 0x05
    15a4:	0c 81       	ldd	r16, Y+4	; 0x04
    15a6:	1b 81       	ldd	r17, Y+3	; 0x03
    15a8:	aa 81       	ldd	r26, Y+2	; 0x02
    15aa:	b9 81       	ldd	r27, Y+1	; 0x01
    15ac:	ce 0f       	add	r28, r30
    15ae:	d1 1d       	adc	r29, r1
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	ed 01       	movw	r28, r26
    15bc:	08 95       	ret

000015be <_exit>:
    15be:	f8 94       	cli

000015c0 <__stop_program>:
    15c0:	ff cf       	rjmp	.-2      	; 0x15c0 <__stop_program>
