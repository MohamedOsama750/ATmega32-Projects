
Little Story.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000067c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  0000067c  000006f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000077a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001be9  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a47  00000000  00000000  00002501  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000da3  00000000  00000000  00002f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b8  00000000  00000000  00003cec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006f9  00000000  00000000  00003fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001747  00000000  00000000  0000469d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00005de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e7       	ldi	r30, 0x7C	; 124
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3e       	cpi	r26, 0xEA	; 234
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 40 01 	call	0x280	; 0x280 <main>
  7a:	0c 94 3c 03 	jmp	0x678	; 0x678 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <WriteIns>:
	}
	else if (line ==3)
	{
		WriteIns(0xd4+cell);
	}
}
  82:	cf 93       	push	r28
  84:	c8 2f       	mov	r28, r24
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	83 e0       	ldi	r24, 0x03	; 3
  8a:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
  8e:	6c 2f       	mov	r22, r28
  90:	66 1f       	adc	r22, r22
  92:	66 27       	eor	r22, r22
  94:	66 1f       	adc	r22, r22
  96:	8c e0       	ldi	r24, 0x0C	; 12
  98:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
  9c:	c6 fb       	bst	r28, 6
  9e:	66 27       	eor	r22, r22
  a0:	60 f9       	bld	r22, 0
  a2:	8a e0       	ldi	r24, 0x0A	; 10
  a4:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
  a8:	c5 fb       	bst	r28, 5
  aa:	66 27       	eor	r22, r22
  ac:	60 f9       	bld	r22, 0
  ae:	89 e0       	ldi	r24, 0x09	; 9
  b0:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
  b4:	c4 fb       	bst	r28, 4
  b6:	66 27       	eor	r22, r22
  b8:	60 f9       	bld	r22, 0
  ba:	88 e0       	ldi	r24, 0x08	; 8
  bc:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
  c8:	8f ec       	ldi	r24, 0xCF	; 207
  ca:	97 e0       	ldi	r25, 0x07	; 7
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <WriteIns+0x4a>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <WriteIns+0x50>
  d2:	00 00       	nop
  d4:	60 e0       	ldi	r22, 0x00	; 0
  d6:	82 e0       	ldi	r24, 0x02	; 2
  d8:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
  dc:	8f ec       	ldi	r24, 0xCF	; 207
  de:	97 e0       	ldi	r25, 0x07	; 7
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <WriteIns+0x5e>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <WriteIns+0x64>
  e6:	00 00       	nop
  e8:	c3 fb       	bst	r28, 3
  ea:	66 27       	eor	r22, r22
  ec:	60 f9       	bld	r22, 0
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
  f4:	c2 fb       	bst	r28, 2
  f6:	66 27       	eor	r22, r22
  f8:	60 f9       	bld	r22, 0
  fa:	8a e0       	ldi	r24, 0x0A	; 10
  fc:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 100:	c1 fb       	bst	r28, 1
 102:	66 27       	eor	r22, r22
 104:	60 f9       	bld	r22, 0
 106:	89 e0       	ldi	r24, 0x09	; 9
 108:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 10c:	6c 2f       	mov	r22, r28
 10e:	61 70       	andi	r22, 0x01	; 1
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 11e:	8f ec       	ldi	r24, 0xCF	; 207
 120:	97 e0       	ldi	r25, 0x07	; 7
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <WriteIns+0xa0>
 126:	00 c0       	rjmp	.+0      	; 0x128 <WriteIns+0xa6>
 128:	00 00       	nop
 12a:	60 e0       	ldi	r22, 0x00	; 0
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 132:	8f ec       	ldi	r24, 0xCF	; 207
 134:	97 e0       	ldi	r25, 0x07	; 7
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <WriteIns+0xb4>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <WriteIns+0xba>
 13c:	00 00       	nop
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <WriteData>:
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 14e:	6c 2f       	mov	r22, r28
 150:	66 1f       	adc	r22, r22
 152:	66 27       	eor	r22, r22
 154:	66 1f       	adc	r22, r22
 156:	8c e0       	ldi	r24, 0x0C	; 12
 158:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 15c:	c6 fb       	bst	r28, 6
 15e:	66 27       	eor	r22, r22
 160:	60 f9       	bld	r22, 0
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 168:	c5 fb       	bst	r28, 5
 16a:	66 27       	eor	r22, r22
 16c:	60 f9       	bld	r22, 0
 16e:	89 e0       	ldi	r24, 0x09	; 9
 170:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 174:	c4 fb       	bst	r28, 4
 176:	66 27       	eor	r22, r22
 178:	60 f9       	bld	r22, 0
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	82 e0       	ldi	r24, 0x02	; 2
 184:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 188:	8f ec       	ldi	r24, 0xCF	; 207
 18a:	97 e0       	ldi	r25, 0x07	; 7
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <WriteData+0x4a>
 190:	00 c0       	rjmp	.+0      	; 0x192 <WriteData+0x50>
 192:	00 00       	nop
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 19c:	8f ec       	ldi	r24, 0xCF	; 207
 19e:	97 e0       	ldi	r25, 0x07	; 7
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <WriteData+0x5e>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <WriteData+0x64>
 1a6:	00 00       	nop
 1a8:	c3 fb       	bst	r28, 3
 1aa:	66 27       	eor	r22, r22
 1ac:	60 f9       	bld	r22, 0
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 1b4:	c2 fb       	bst	r28, 2
 1b6:	66 27       	eor	r22, r22
 1b8:	60 f9       	bld	r22, 0
 1ba:	8a e0       	ldi	r24, 0x0A	; 10
 1bc:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 1c0:	c1 fb       	bst	r28, 1
 1c2:	66 27       	eor	r22, r22
 1c4:	60 f9       	bld	r22, 0
 1c6:	89 e0       	ldi	r24, 0x09	; 9
 1c8:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 1cc:	6c 2f       	mov	r22, r28
 1ce:	61 70       	andi	r22, 0x01	; 1
 1d0:	88 e0       	ldi	r24, 0x08	; 8
 1d2:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 1de:	8f ec       	ldi	r24, 0xCF	; 207
 1e0:	97 e0       	ldi	r25, 0x07	; 7
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <WriteData+0xa0>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <WriteData+0xa6>
 1e8:	00 00       	nop
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	0e 94 a7 02 	call	0x54e	; 0x54e <DIO_writepin>
 1f2:	8f ec       	ldi	r24, 0xCF	; 207
 1f4:	97 e0       	ldi	r25, 0x07	; 7
 1f6:	01 97       	sbiw	r24, 0x01	; 1
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <WriteData+0xb4>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <WriteData+0xba>
 1fc:	00 00       	nop
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <LCD_Init>:
 202:	2f e7       	ldi	r18, 0x7F	; 127
 204:	88 e3       	ldi	r24, 0x38	; 56
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <LCD_Init+0x6>
 210:	00 c0       	rjmp	.+0      	; 0x212 <LCD_Init+0x10>
 212:	00 00       	nop
 214:	82 e0       	ldi	r24, 0x02	; 2
 216:	0e 94 41 00 	call	0x82	; 0x82 <WriteIns>
 21a:	88 e2       	ldi	r24, 0x28	; 40
 21c:	0e 94 41 00 	call	0x82	; 0x82 <WriteIns>
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	0e 94 41 00 	call	0x82	; 0x82 <WriteIns>
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	0e 94 41 00 	call	0x82	; 0x82 <WriteIns>
 22c:	8f ec       	ldi	r24, 0xCF	; 207
 22e:	97 e0       	ldi	r25, 0x07	; 7
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <LCD_Init+0x2e>
 234:	00 c0       	rjmp	.+0      	; 0x236 <LCD_Init+0x34>
 236:	00 00       	nop
 238:	86 e0       	ldi	r24, 0x06	; 6
 23a:	0e 94 41 00 	call	0x82	; 0x82 <WriteIns>
 23e:	08 95       	ret

00000240 <LCD_WriteChar>:
 240:	0e 94 a1 00 	call	0x142	; 0x142 <WriteData>
 244:	08 95       	ret

00000246 <LCD_WriteString>:
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	8c 01       	movw	r16, r24
 24e:	c0 e0       	ldi	r28, 0x00	; 0
 250:	03 c0       	rjmp	.+6      	; 0x258 <LCD_WriteString+0x12>
 252:	0e 94 20 01 	call	0x240	; 0x240 <LCD_WriteChar>
 256:	cf 5f       	subi	r28, 0xFF	; 255
 258:	f8 01       	movw	r30, r16
 25a:	ec 0f       	add	r30, r28
 25c:	f1 1d       	adc	r31, r1
 25e:	80 81       	ld	r24, Z
 260:	81 11       	cpse	r24, r1
 262:	f7 cf       	rjmp	.-18     	; 0x252 <LCD_WriteString+0xc>
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	08 95       	ret

0000026c <LCD_Clear>:
void LCD_Clear(void)
{
	WriteIns(CLR_INS);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	0e 94 41 00 	call	0x82	; 0x82 <WriteIns>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 272:	8f ec       	ldi	r24, 0xCF	; 207
 274:	97 e0       	ldi	r25, 0x07	; 7
 276:	01 97       	sbiw	r24, 0x01	; 1
 278:	f1 f7       	brne	.-4      	; 0x276 <LCD_Clear+0xa>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <LCD_Clear+0x10>
 27c:	00 00       	nop
 27e:	08 95       	ret

00000280 <main>:
#include <util/delay.h>
#include <stdarg.h>
#include <stdlib.h>

int main(void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	ca 56       	subi	r28, 0x6A	; 106
 28a:	d1 09       	sbc	r29, r1
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
	
	DIO_Init();
 296:	0e 94 97 02 	call	0x52e	; 0x52e <DIO_Init>
	LCD_Init();
 29a:	0e 94 01 01 	call	0x202	; 0x202 <LCD_Init>

	char story[] = "Once upon a time, there was a boy named John.";
 29e:	8e e2       	ldi	r24, 0x2E	; 46
 2a0:	e0 e6       	ldi	r30, 0x60	; 96
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	de 01       	movw	r26, r28
 2a6:	11 96       	adiw	r26, 0x01	; 1
 2a8:	01 90       	ld	r0, Z+
 2aa:	0d 92       	st	X+, r0
 2ac:	8a 95       	dec	r24
 2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x28>
    char story1[] = " He loved to go on adventures in the forest near his house.";
 2b0:	8c e3       	ldi	r24, 0x3C	; 60
 2b2:	ee e8       	ldi	r30, 0x8E	; 142
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	de 01       	movw	r26, r28
 2b8:	9f 96       	adiw	r26, 0x2f	; 47
 2ba:	01 90       	ld	r0, Z+
 2bc:	0d 92       	st	X+, r0
 2be:	8a 95       	dec	r24
 2c0:	e1 f7       	brne	.-8      	; 0x2ba <main+0x3a>
	while(1)
	{
		LCD_Clear();
 2c2:	0e 94 36 01 	call	0x26c	; 0x26c <LCD_Clear>
		for(int i=0; i<strlen(story); i+=20)
 2c6:	00 e0       	ldi	r16, 0x00	; 0
 2c8:	10 e0       	ldi	r17, 0x00	; 0
 2ca:	13 c0       	rjmp	.+38     	; 0x2f2 <main+0x72>
		{
			LCD_WriteString(story);
 2cc:	ce 01       	movw	r24, r28
 2ce:	01 96       	adiw	r24, 0x01	; 1
 2d0:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WriteString>
			LCD_WriteString(story1);
 2d4:	ce 01       	movw	r24, r28
 2d6:	8f 96       	adiw	r24, 0x2f	; 47
 2d8:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WriteString>
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	89 e6       	ldi	r24, 0x69	; 105
 2e0:	98 e1       	ldi	r25, 0x18	; 24
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x62>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x6c>
 2ec:	00 00       	nop
	char story[] = "Once upon a time, there was a boy named John.";
    char story1[] = " He loved to go on adventures in the forest near his house.";
	while(1)
	{
		LCD_Clear();
		for(int i=0; i<strlen(story); i+=20)
 2ee:	0c 5e       	subi	r16, 0xEC	; 236
 2f0:	1f 4f       	sbci	r17, 0xFF	; 255
 2f2:	de 01       	movw	r26, r28
 2f4:	11 96       	adiw	r26, 0x01	; 1
 2f6:	fd 01       	movw	r30, r26
 2f8:	01 90       	ld	r0, Z+
 2fa:	00 20       	and	r0, r0
 2fc:	e9 f7       	brne	.-6      	; 0x2f8 <main+0x78>
 2fe:	31 97       	sbiw	r30, 0x01	; 1
 300:	ea 1b       	sub	r30, r26
 302:	fb 0b       	sbc	r31, r27
 304:	0e 17       	cp	r16, r30
 306:	1f 07       	cpc	r17, r31
 308:	08 f3       	brcs	.-62     	; 0x2cc <main+0x4c>
 30a:	db cf       	rjmp	.-74     	; 0x2c2 <main+0x42>

0000030c <DIO_initpin>:
		DIO_initpin(i,PinsStatusArray[i]);
	}
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
 30c:	98 2f       	mov	r25, r24
 30e:	96 95       	lsr	r25
 310:	96 95       	lsr	r25
 312:	96 95       	lsr	r25
	u8 pin_num =pin % 8;
 314:	87 70       	andi	r24, 0x07	; 7
	en_dioError_t error = DIO_OK;
	
	if (pin_num < 8)
	{

		switch(status)
 316:	61 30       	cpi	r22, 0x01	; 1
 318:	09 f4       	brne	.+2      	; 0x31c <DIO_initpin+0x10>
 31a:	59 c0       	rjmp	.+178    	; 0x3ce <DIO_initpin+0xc2>
 31c:	20 f0       	brcs	.+8      	; 0x326 <DIO_initpin+0x1a>
 31e:	62 30       	cpi	r22, 0x02	; 2
 320:	09 f4       	brne	.+2      	; 0x324 <DIO_initpin+0x18>
 322:	a9 c0       	rjmp	.+338    	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 324:	fc c0       	rjmp	.+504    	; 0x51e <__EEPROM_REGION_LENGTH__+0x11e>
		{
			case OUTPUT:
			switch(port)
 326:	91 30       	cpi	r25, 0x01	; 1
 328:	c9 f0       	breq	.+50     	; 0x35c <DIO_initpin+0x50>
 32a:	28 f0       	brcs	.+10     	; 0x336 <DIO_initpin+0x2a>
 32c:	92 30       	cpi	r25, 0x02	; 2
 32e:	49 f1       	breq	.+82     	; 0x382 <DIO_initpin+0x76>
 330:	93 30       	cpi	r25, 0x03	; 3
 332:	d1 f1       	breq	.+116    	; 0x3a8 <DIO_initpin+0x9c>
 334:	f6 c0       	rjmp	.+492    	; 0x522 <__EEPROM_REGION_LENGTH__+0x122>
			{
				case PA:
				SET_BIT( DDRA,pin_num);
 336:	4a b3       	in	r20, 0x1a	; 26
 338:	21 e0       	ldi	r18, 0x01	; 1
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	b9 01       	movw	r22, r18
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_initpin+0x38>
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_initpin+0x34>
 348:	cb 01       	movw	r24, r22
 34a:	94 2f       	mov	r25, r20
 34c:	98 2b       	or	r25, r24
 34e:	9a bb       	out	0x1a, r25	; 26
				CLR_BIT(PORTA,pin_num);
 350:	9b b3       	in	r25, 0x1b	; 27
 352:	80 95       	com	r24
 354:	89 23       	and	r24, r25
 356:	8b bb       	out	0x1b, r24	; 27
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 358:	80 e0       	ldi	r24, 0x00	; 0
			switch(port)
			{
				case PA:
				SET_BIT( DDRA,pin_num);
				CLR_BIT(PORTA,pin_num);
				break;
 35a:	08 95       	ret
				case PB:
				SET_BIT( DDRB,pin_num);
 35c:	47 b3       	in	r20, 0x17	; 23
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	b9 01       	movw	r22, r18
 364:	02 c0       	rjmp	.+4      	; 0x36a <DIO_initpin+0x5e>
 366:	66 0f       	add	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	8a 95       	dec	r24
 36c:	e2 f7       	brpl	.-8      	; 0x366 <DIO_initpin+0x5a>
 36e:	cb 01       	movw	r24, r22
 370:	94 2f       	mov	r25, r20
 372:	98 2b       	or	r25, r24
 374:	97 bb       	out	0x17, r25	; 23
				CLR_BIT(PORTB,pin_num);
 376:	98 b3       	in	r25, 0x18	; 24
 378:	80 95       	com	r24
 37a:	89 23       	and	r24, r25
 37c:	88 bb       	out	0x18, r24	; 24
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 37e:	80 e0       	ldi	r24, 0x00	; 0
				CLR_BIT(PORTA,pin_num);
				break;
				case PB:
				SET_BIT( DDRB,pin_num);
				CLR_BIT(PORTB,pin_num);
				break;
 380:	08 95       	ret
				case PC:
				SET_BIT( DDRC,pin_num);
 382:	44 b3       	in	r20, 0x14	; 20
 384:	21 e0       	ldi	r18, 0x01	; 1
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	b9 01       	movw	r22, r18
 38a:	02 c0       	rjmp	.+4      	; 0x390 <DIO_initpin+0x84>
 38c:	66 0f       	add	r22, r22
 38e:	77 1f       	adc	r23, r23
 390:	8a 95       	dec	r24
 392:	e2 f7       	brpl	.-8      	; 0x38c <DIO_initpin+0x80>
 394:	cb 01       	movw	r24, r22
 396:	94 2f       	mov	r25, r20
 398:	98 2b       	or	r25, r24
 39a:	94 bb       	out	0x14, r25	; 20
				CLR_BIT(PORTC,pin_num);
 39c:	95 b3       	in	r25, 0x15	; 21
 39e:	80 95       	com	r24
 3a0:	89 23       	and	r24, r25
 3a2:	85 bb       	out	0x15, r24	; 21
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 3a4:	80 e0       	ldi	r24, 0x00	; 0
				CLR_BIT(PORTB,pin_num);
				break;
				case PC:
				SET_BIT( DDRC,pin_num);
				CLR_BIT(PORTC,pin_num);
				break;
 3a6:	08 95       	ret
				case PD:
				SET_BIT( DDRD,pin_num);
 3a8:	41 b3       	in	r20, 0x11	; 17
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	b9 01       	movw	r22, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_initpin+0xaa>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	8a 95       	dec	r24
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_initpin+0xa6>
 3ba:	cb 01       	movw	r24, r22
 3bc:	94 2f       	mov	r25, r20
 3be:	98 2b       	or	r25, r24
 3c0:	91 bb       	out	0x11, r25	; 17
				CLR_BIT(PORTD,pin_num);
 3c2:	92 b3       	in	r25, 0x12	; 18
 3c4:	80 95       	com	r24
 3c6:	89 23       	and	r24, r25
 3c8:	82 bb       	out	0x12, r24	; 18
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
				CLR_BIT(PORTC,pin_num);
				break;
				case PD:
				SET_BIT( DDRD,pin_num);
				CLR_BIT(PORTD,pin_num);
				break;
 3cc:	08 95       	ret
				error = WRONG_PORT_NUMBER;
				break;
			}
			break;
			case INFREE:
			switch(port)
 3ce:	91 30       	cpi	r25, 0x01	; 1
 3d0:	c9 f0       	breq	.+50     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3d2:	28 f0       	brcs	.+10     	; 0x3de <DIO_initpin+0xd2>
 3d4:	92 30       	cpi	r25, 0x02	; 2
 3d6:	49 f1       	breq	.+82     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 3d8:	93 30       	cpi	r25, 0x03	; 3
 3da:	d1 f1       	breq	.+116    	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 3dc:	a4 c0       	rjmp	.+328    	; 0x526 <__EEPROM_REGION_LENGTH__+0x126>
			{
				case PA:
				CLR_BIT(DDRA,pin_num);
 3de:	4a b3       	in	r20, 0x1a	; 26
 3e0:	21 e0       	ldi	r18, 0x01	; 1
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	b9 01       	movw	r22, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_initpin+0xe0>
 3e8:	66 0f       	add	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	8a 95       	dec	r24
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_initpin+0xdc>
 3f0:	cb 01       	movw	r24, r22
 3f2:	80 95       	com	r24
 3f4:	94 2f       	mov	r25, r20
 3f6:	98 23       	and	r25, r24
 3f8:	9a bb       	out	0x1a, r25	; 26
				CLR_BIT(PORTA,pin_num);
 3fa:	9b b3       	in	r25, 0x1b	; 27
 3fc:	89 23       	and	r24, r25
 3fe:	8b bb       	out	0x1b, r24	; 27
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 400:	80 e0       	ldi	r24, 0x00	; 0
			switch(port)
			{
				case PA:
				CLR_BIT(DDRA,pin_num);
				CLR_BIT(PORTA,pin_num);
				break;
 402:	08 95       	ret
				case PB:
				CLR_BIT(DDRB,pin_num);
 404:	47 b3       	in	r20, 0x17	; 23
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	b9 01       	movw	r22, r18
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	66 0f       	add	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	8a 95       	dec	r24
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	cb 01       	movw	r24, r22
 418:	80 95       	com	r24
 41a:	94 2f       	mov	r25, r20
 41c:	98 23       	and	r25, r24
 41e:	97 bb       	out	0x17, r25	; 23
				CLR_BIT(PORTB,pin_num);
 420:	98 b3       	in	r25, 0x18	; 24
 422:	89 23       	and	r24, r25
 424:	88 bb       	out	0x18, r24	; 24
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 426:	80 e0       	ldi	r24, 0x00	; 0
				CLR_BIT(PORTA,pin_num);
				break;
				case PB:
				CLR_BIT(DDRB,pin_num);
				CLR_BIT(PORTB,pin_num);
				break;
 428:	08 95       	ret
				case PC:
				CLR_BIT(DDRC,pin_num);
 42a:	44 b3       	in	r20, 0x14	; 20
 42c:	21 e0       	ldi	r18, 0x01	; 1
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	b9 01       	movw	r22, r18
 432:	02 c0       	rjmp	.+4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 434:	66 0f       	add	r22, r22
 436:	77 1f       	adc	r23, r23
 438:	8a 95       	dec	r24
 43a:	e2 f7       	brpl	.-8      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43c:	cb 01       	movw	r24, r22
 43e:	80 95       	com	r24
 440:	94 2f       	mov	r25, r20
 442:	98 23       	and	r25, r24
 444:	94 bb       	out	0x14, r25	; 20
				CLR_BIT(PORTC,pin_num);
 446:	95 b3       	in	r25, 0x15	; 21
 448:	89 23       	and	r24, r25
 44a:	85 bb       	out	0x15, r24	; 21
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 44c:	80 e0       	ldi	r24, 0x00	; 0
				CLR_BIT(PORTB,pin_num);
				break;
				case PC:
				CLR_BIT(DDRC,pin_num);
				CLR_BIT(PORTC,pin_num);
				break;
 44e:	08 95       	ret
				case PD:
				CLR_BIT(DDRD,pin_num);
 450:	41 b3       	in	r20, 0x11	; 17
 452:	21 e0       	ldi	r18, 0x01	; 1
 454:	30 e0       	ldi	r19, 0x00	; 0
 456:	b9 01       	movw	r22, r18
 458:	02 c0       	rjmp	.+4      	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 45a:	66 0f       	add	r22, r22
 45c:	77 1f       	adc	r23, r23
 45e:	8a 95       	dec	r24
 460:	e2 f7       	brpl	.-8      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 462:	cb 01       	movw	r24, r22
 464:	80 95       	com	r24
 466:	94 2f       	mov	r25, r20
 468:	98 23       	and	r25, r24
 46a:	91 bb       	out	0x11, r25	; 17
				CLR_BIT(PORTD,pin_num);
 46c:	92 b3       	in	r25, 0x12	; 18
 46e:	89 23       	and	r24, r25
 470:	82 bb       	out	0x12, r24	; 18
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 472:	80 e0       	ldi	r24, 0x00	; 0
				CLR_BIT(PORTC,pin_num);
				break;
				case PD:
				CLR_BIT(DDRD,pin_num);
				CLR_BIT(PORTD,pin_num);
				break;
 474:	08 95       	ret
				break;
			}
			break;

			case INPULL:
			switch(port)
 476:	91 30       	cpi	r25, 0x01	; 1
 478:	c9 f0       	breq	.+50     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 47a:	28 f0       	brcs	.+10     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 47c:	92 30       	cpi	r25, 0x02	; 2
 47e:	49 f1       	breq	.+82     	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 480:	93 30       	cpi	r25, 0x03	; 3
 482:	d1 f1       	breq	.+116    	; 0x4f8 <__EEPROM_REGION_LENGTH__+0xf8>
 484:	52 c0       	rjmp	.+164    	; 0x52a <__EEPROM_REGION_LENGTH__+0x12a>
			{
				case PA:
				CLR_BIT(DDRA,pin_num);
 486:	4a b3       	in	r20, 0x1a	; 26
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__EEPROM_REGION_LENGTH__+0x94>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	8a 95       	dec	r24
 496:	e2 f7       	brpl	.-8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 498:	cb 01       	movw	r24, r22
 49a:	96 2f       	mov	r25, r22
 49c:	90 95       	com	r25
 49e:	94 23       	and	r25, r20
 4a0:	9a bb       	out	0x1a, r25	; 26
				SET_BIT(PORTA,pin_num);
 4a2:	9b b3       	in	r25, 0x1b	; 27
 4a4:	89 2b       	or	r24, r25
 4a6:	8b bb       	out	0x1b, r24	; 27
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 4a8:	80 e0       	ldi	r24, 0x00	; 0
			switch(port)
			{
				case PA:
				CLR_BIT(DDRA,pin_num);
				SET_BIT(PORTA,pin_num);
				break;
 4aa:	08 95       	ret
				case PB:
				CLR_BIT(DDRB,pin_num);
 4ac:	47 b3       	in	r20, 0x17	; 23
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	b9 01       	movw	r22, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	8a 95       	dec	r24
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4be:	cb 01       	movw	r24, r22
 4c0:	96 2f       	mov	r25, r22
 4c2:	90 95       	com	r25
 4c4:	94 23       	and	r25, r20
 4c6:	97 bb       	out	0x17, r25	; 23
				SET_BIT(PORTB,pin_num);
 4c8:	98 b3       	in	r25, 0x18	; 24
 4ca:	89 2b       	or	r24, r25
 4cc:	88 bb       	out	0x18, r24	; 24
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
				SET_BIT(PORTA,pin_num);
				break;
				case PB:
				CLR_BIT(DDRB,pin_num);
				SET_BIT(PORTB,pin_num);
				break;
 4d0:	08 95       	ret
				case PC:
				CLR_BIT(DDRC,pin_num);
 4d2:	44 b3       	in	r20, 0x14	; 20
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	b9 01       	movw	r22, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	8a 95       	dec	r24
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
 4e4:	cb 01       	movw	r24, r22
 4e6:	96 2f       	mov	r25, r22
 4e8:	90 95       	com	r25
 4ea:	94 23       	and	r25, r20
 4ec:	94 bb       	out	0x14, r25	; 20
				SET_BIT(PORTC,pin_num);
 4ee:	95 b3       	in	r25, 0x15	; 21
 4f0:	89 2b       	or	r24, r25
 4f2:	85 bb       	out	0x15, r24	; 21
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 4f4:	80 e0       	ldi	r24, 0x00	; 0
				SET_BIT(PORTB,pin_num);
				break;
				case PC:
				CLR_BIT(DDRC,pin_num);
				SET_BIT(PORTC,pin_num);
				break;
 4f6:	08 95       	ret
				case PD:
				CLR_BIT(DDRD,pin_num);
 4f8:	41 b3       	in	r20, 0x11	; 17
 4fa:	21 e0       	ldi	r18, 0x01	; 1
 4fc:	30 e0       	ldi	r19, 0x00	; 0
 4fe:	b9 01       	movw	r22, r18
 500:	02 c0       	rjmp	.+4      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	8a 95       	dec	r24
 508:	e2 f7       	brpl	.-8      	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
 50a:	cb 01       	movw	r24, r22
 50c:	96 2f       	mov	r25, r22
 50e:	90 95       	com	r25
 510:	94 23       	and	r25, r20
 512:	91 bb       	out	0x11, r25	; 17
				SET_BIT(PORTD,pin_num);
 514:	92 b3       	in	r25, 0x12	; 18
 516:	89 2b       	or	r24, r25
 518:	82 bb       	out	0x12, r24	; 18
}   
 en_dioError_t  DIO_initpin  (DIO_Pin_type pin,DIO_PinStatus_type status)
{
	DIO_Port_type port = pin/8 ;
	u8 pin_num =pin % 8;
	en_dioError_t error = DIO_OK;
 51a:	80 e0       	ldi	r24, 0x00	; 0
				SET_BIT(PORTC,pin_num);
				break;
				case PD:
				CLR_BIT(DDRD,pin_num);
				SET_BIT(PORTD,pin_num);
				break;
 51c:	08 95       	ret
				error = WRONG_PORT_NUMBER;
				break;
			}
			break;
			default:
			error = WRONG_PORT_NUMBER;
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	08 95       	ret
				case PD:
				SET_BIT( DDRD,pin_num);
				CLR_BIT(PORTD,pin_num);
				break;
				default:
				error = WRONG_PORT_NUMBER;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	08 95       	ret
				case PD:
				CLR_BIT(DDRD,pin_num);
				CLR_BIT(PORTD,pin_num);
				break;
				default:
				error = WRONG_PORT_NUMBER;
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	08 95       	ret
				case PD:
				CLR_BIT(DDRD,pin_num);
				SET_BIT(PORTD,pin_num);
				break;
				default:
				error = WRONG_PORT_NUMBER;
 52a:	81 e0       	ldi	r24, 0x01	; 1
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;

}
 52c:	08 95       	ret

0000052e <DIO_Init>:
#include "dio.h" 
#include "dio_private.h"


void DIO_Init(void)
{
 52e:	cf 93       	push	r28
	DIO_Pin_type i;
	for (i=PINA0; i<TOTAL_PINS; i++)
 530:	c0 e0       	ldi	r28, 0x00	; 0
 532:	09 c0       	rjmp	.+18     	; 0x546 <DIO_Init+0x18>
	{
		DIO_initpin(i,PinsStatusArray[i]);
 534:	ec 2f       	mov	r30, r28
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	e6 53       	subi	r30, 0x36	; 54
 53a:	ff 4f       	sbci	r31, 0xFF	; 255
 53c:	60 81       	ld	r22, Z
 53e:	8c 2f       	mov	r24, r28
 540:	0e 94 86 01 	call	0x30c	; 0x30c <DIO_initpin>


void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0; i<TOTAL_PINS; i++)
 544:	cf 5f       	subi	r28, 0xFF	; 255
 546:	c0 32       	cpi	r28, 0x20	; 32
 548:	a8 f3       	brcs	.-22     	; 0x534 <DIO_Init+0x6>
	{
		DIO_initpin(i,PinsStatusArray[i]);
	}
}   
 54a:	cf 91       	pop	r28
 54c:	08 95       	ret

0000054e <DIO_writepin>:

}
 en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
 {  
   /* to make it work just with pin num*/
	 DIO_Port_type port = pin/8 ;
 54e:	98 2f       	mov	r25, r24
 550:	96 95       	lsr	r25
 552:	96 95       	lsr	r25
 554:	96 95       	lsr	r25
	 u8 pin_num =pin % 8;
 556:	87 70       	andi	r24, 0x07	; 7
	 en_dioError_t error= DIO_OK;
	 if (pin_num<8)
	 {
		 switch (volt)
 558:	66 23       	and	r22, r22
 55a:	09 f4       	brne	.+2      	; 0x55e <DIO_writepin+0x10>
 55c:	43 c0       	rjmp	.+134    	; 0x5e4 <DIO_writepin+0x96>
 55e:	61 30       	cpi	r22, 0x01	; 1
 560:	09 f0       	breq	.+2      	; 0x564 <DIO_writepin+0x16>
 562:	84 c0       	rjmp	.+264    	; 0x66c <DIO_writepin+0x11e>
		 {
			 case HIGH:

			 switch(port)
 564:	91 30       	cpi	r25, 0x01	; 1
 566:	a1 f0       	breq	.+40     	; 0x590 <DIO_writepin+0x42>
 568:	28 f0       	brcs	.+10     	; 0x574 <DIO_writepin+0x26>
 56a:	92 30       	cpi	r25, 0x02	; 2
 56c:	f9 f0       	breq	.+62     	; 0x5ac <DIO_writepin+0x5e>
 56e:	93 30       	cpi	r25, 0x03	; 3
 570:	59 f1       	breq	.+86     	; 0x5c8 <DIO_writepin+0x7a>
 572:	7e c0       	rjmp	.+252    	; 0x670 <DIO_writepin+0x122>
			 {
				 case PA:

				 SET_BIT(PORTA,pin_num);
 574:	4b b3       	in	r20, 0x1b	; 27
 576:	21 e0       	ldi	r18, 0x01	; 1
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	b9 01       	movw	r22, r18
 57c:	02 c0       	rjmp	.+4      	; 0x582 <DIO_writepin+0x34>
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	8a 95       	dec	r24
 584:	e2 f7       	brpl	.-8      	; 0x57e <DIO_writepin+0x30>
 586:	cb 01       	movw	r24, r22
 588:	84 2b       	or	r24, r20
 58a:	8b bb       	out	0x1b, r24	; 27
 en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
 {  
   /* to make it work just with pin num*/
	 DIO_Port_type port = pin/8 ;
	 u8 pin_num =pin % 8;
	 en_dioError_t error= DIO_OK;
 58c:	80 e0       	ldi	r24, 0x00	; 0
			 switch(port)
			 {
				 case PA:

				 SET_BIT(PORTA,pin_num);
				 break;
 58e:	08 95       	ret
				 case PB:

				 SET_BIT(PORTB,pin_num);
 590:	48 b3       	in	r20, 0x18	; 24
 592:	21 e0       	ldi	r18, 0x01	; 1
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	b9 01       	movw	r22, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <DIO_writepin+0x50>
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	8a 95       	dec	r24
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <DIO_writepin+0x4c>
 5a2:	cb 01       	movw	r24, r22
 5a4:	84 2b       	or	r24, r20
 5a6:	88 bb       	out	0x18, r24	; 24
 en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
 {  
   /* to make it work just with pin num*/
	 DIO_Port_type port = pin/8 ;
	 u8 pin_num =pin % 8;
	 en_dioError_t error= DIO_OK;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
				 SET_BIT(PORTA,pin_num);
				 break;
				 case PB:

				 SET_BIT(PORTB,pin_num);
				 break;
 5aa:	08 95       	ret
				 case PC:

				 SET_BIT(PORTC,pin_num);
 5ac:	45 b3       	in	r20, 0x15	; 21
 5ae:	21 e0       	ldi	r18, 0x01	; 1
 5b0:	30 e0       	ldi	r19, 0x00	; 0
 5b2:	b9 01       	movw	r22, r18
 5b4:	02 c0       	rjmp	.+4      	; 0x5ba <DIO_writepin+0x6c>
 5b6:	66 0f       	add	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	8a 95       	dec	r24
 5bc:	e2 f7       	brpl	.-8      	; 0x5b6 <DIO_writepin+0x68>
 5be:	cb 01       	movw	r24, r22
 5c0:	84 2b       	or	r24, r20
 5c2:	85 bb       	out	0x15, r24	; 21
 en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
 {  
   /* to make it work just with pin num*/
	 DIO_Port_type port = pin/8 ;
	 u8 pin_num =pin % 8;
	 en_dioError_t error= DIO_OK;
 5c4:	80 e0       	ldi	r24, 0x00	; 0
				 SET_BIT(PORTB,pin_num);
				 break;
				 case PC:

				 SET_BIT(PORTC,pin_num);
				 break;
 5c6:	08 95       	ret
				 case PD:

				 SET_BIT(PORTD,pin_num);
 5c8:	42 b3       	in	r20, 0x12	; 18
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	b9 01       	movw	r22, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_writepin+0x88>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	8a 95       	dec	r24
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_writepin+0x84>
 5da:	cb 01       	movw	r24, r22
 5dc:	84 2b       	or	r24, r20
 5de:	82 bb       	out	0x12, r24	; 18
 en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
 {  
   /* to make it work just with pin num*/
	 DIO_Port_type port = pin/8 ;
	 u8 pin_num =pin % 8;
	 en_dioError_t error= DIO_OK;
 5e0:	80 e0       	ldi	r24, 0x00	; 0
				 SET_BIT(PORTC,pin_num);
				 break;
				 case PD:

				 SET_BIT(PORTD,pin_num);
				 break;
 5e2:	08 95       	ret
			 }
			 break;

			 case LOW:

			 switch(port)
 5e4:	91 30       	cpi	r25, 0x01	; 1
 5e6:	a9 f0       	breq	.+42     	; 0x612 <DIO_writepin+0xc4>
 5e8:	28 f0       	brcs	.+10     	; 0x5f4 <DIO_writepin+0xa6>
 5ea:	92 30       	cpi	r25, 0x02	; 2
 5ec:	09 f1       	breq	.+66     	; 0x630 <DIO_writepin+0xe2>
 5ee:	93 30       	cpi	r25, 0x03	; 3
 5f0:	71 f1       	breq	.+92     	; 0x64e <DIO_writepin+0x100>
 5f2:	40 c0       	rjmp	.+128    	; 0x674 <DIO_writepin+0x126>
			 {
				 case PA:

				 CLR_BIT(PORTA,pin_num);
 5f4:	4b b3       	in	r20, 0x1b	; 27
 5f6:	21 e0       	ldi	r18, 0x01	; 1
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	b9 01       	movw	r22, r18
 5fc:	02 c0       	rjmp	.+4      	; 0x602 <DIO_writepin+0xb4>
 5fe:	66 0f       	add	r22, r22
 600:	77 1f       	adc	r23, r23
 602:	8a 95       	dec	r24
 604:	e2 f7       	brpl	.-8      	; 0x5fe <DIO_writepin+0xb0>
 606:	cb 01       	movw	r24, r22
 608:	80 95       	com	r24
 60a:	84 23       	and	r24, r20
 60c:	8b bb       	out	0x1b, r24	; 27
 en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
 {  
   /* to make it work just with pin num*/
	 DIO_Port_type port = pin/8 ;
	 u8 pin_num =pin % 8;
	 en_dioError_t error= DIO_OK;
 60e:	80 e0       	ldi	r24, 0x00	; 0
			 switch(port)
			 {
				 case PA:

				 CLR_BIT(PORTA,pin_num);
				 break;
 610:	08 95       	ret
				 case PB:

				 CLR_BIT(PORTB,pin_num);
 612:	48 b3       	in	r20, 0x18	; 24
 614:	21 e0       	ldi	r18, 0x01	; 1
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	b9 01       	movw	r22, r18
 61a:	02 c0       	rjmp	.+4      	; 0x620 <DIO_writepin+0xd2>
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	8a 95       	dec	r24
 622:	e2 f7       	brpl	.-8      	; 0x61c <DIO_writepin+0xce>
 624:	cb 01       	movw	r24, r22
 626:	80 95       	com	r24
 628:	84 23       	and	r24, r20
 62a:	88 bb       	out	0x18, r24	; 24
 en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
 {  
   /* to make it work just with pin num*/
	 DIO_Port_type port = pin/8 ;
	 u8 pin_num =pin % 8;
	 en_dioError_t error= DIO_OK;
 62c:	80 e0       	ldi	r24, 0x00	; 0
				 CLR_BIT(PORTA,pin_num);
				 break;
				 case PB:

				 CLR_BIT(PORTB,pin_num);
				 break;
 62e:	08 95       	ret
				 case PC:

				 CLR_BIT(PORTC,pin_num);
 630:	45 b3       	in	r20, 0x15	; 21
 632:	21 e0       	ldi	r18, 0x01	; 1
 634:	30 e0       	ldi	r19, 0x00	; 0
 636:	b9 01       	movw	r22, r18
 638:	02 c0       	rjmp	.+4      	; 0x63e <DIO_writepin+0xf0>
 63a:	66 0f       	add	r22, r22
 63c:	77 1f       	adc	r23, r23
 63e:	8a 95       	dec	r24
 640:	e2 f7       	brpl	.-8      	; 0x63a <DIO_writepin+0xec>
 642:	cb 01       	movw	r24, r22
 644:	80 95       	com	r24
 646:	84 23       	and	r24, r20
 648:	85 bb       	out	0x15, r24	; 21
 en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
 {  
   /* to make it work just with pin num*/
	 DIO_Port_type port = pin/8 ;
	 u8 pin_num =pin % 8;
	 en_dioError_t error= DIO_OK;
 64a:	80 e0       	ldi	r24, 0x00	; 0
				 CLR_BIT(PORTB,pin_num);
				 break;
				 case PC:

				 CLR_BIT(PORTC,pin_num);
				 break;
 64c:	08 95       	ret
				 case PD:

				 CLR_BIT(PORTD,pin_num);
 64e:	42 b3       	in	r20, 0x12	; 18
 650:	21 e0       	ldi	r18, 0x01	; 1
 652:	30 e0       	ldi	r19, 0x00	; 0
 654:	b9 01       	movw	r22, r18
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_writepin+0x10e>
 658:	66 0f       	add	r22, r22
 65a:	77 1f       	adc	r23, r23
 65c:	8a 95       	dec	r24
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_writepin+0x10a>
 660:	cb 01       	movw	r24, r22
 662:	80 95       	com	r24
 664:	84 23       	and	r24, r20
 666:	82 bb       	out	0x12, r24	; 18
 en_dioError_t  DIO_writepin (DIO_Pin_type pin,DIO_PinVoltage_type volt)
 {  
   /* to make it work just with pin num*/
	 DIO_Port_type port = pin/8 ;
	 u8 pin_num =pin % 8;
	 en_dioError_t error= DIO_OK;
 668:	80 e0       	ldi	r24, 0x00	; 0
				 CLR_BIT(PORTC,pin_num);
				 break;
				 case PD:

				 CLR_BIT(PORTD,pin_num);
				 break;
 66a:	08 95       	ret
			 }

			 break;

			 default:
			 error = WRONG_VALUE;
 66c:	83 e0       	ldi	r24, 0x03	; 3
 66e:	08 95       	ret
				 case PD:

				 SET_BIT(PORTD,pin_num);
				 break;
				 default:
				 error = WRONG_PORT_NUMBER;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	08 95       	ret
				 case PD:

				 CLR_BIT(PORTD,pin_num);
				 break;
				 default:
				 error = WRONG_PORT_NUMBER;
 674:	81 e0       	ldi	r24, 0x01	; 1
	 {
		 error = WRONG_PIN_NUMBER;
	 }
	 return error;

 }
 676:	08 95       	ret

00000678 <_exit>:
 678:	f8 94       	cli

0000067a <__stop_program>:
 67a:	ff cf       	rjmp	.-2      	; 0x67a <__stop_program>
