
Tennis Game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bdc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00800060  00000bdc  00000c50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000c9c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000d08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d48  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000097e  00000000  00000000  00002b60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e56  00000000  00000000  000034de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c8  00000000  00000000  00004334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006a7  00000000  00000000  000045fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000013c2  00000000  00000000  00004ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d0  00000000  00000000  00006065  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ed       	ldi	r30, 0xDC	; 220
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3a       	cpi	r26, 0xAC	; 172
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <main>
  7a:	0c 94 ec 05 	jmp	0xbd8	; 0xbd8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KPD_u8GetPressedKey>:

#include "../../lib/STD_types.h"
#include "../../mcal/dio_interface.h"
#include "Keypad_Interface.h"

u8 KPD_u8GetPressedKey(){
  82:	af 92       	push	r10
  84:	bf 92       	push	r11
  86:	cf 92       	push	r12
  88:	df 92       	push	r13
  8a:	ef 92       	push	r14
  8c:	ff 92       	push	r15
  8e:	0f 93       	push	r16
  90:	1f 93       	push	r17
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	68 97       	sbiw	r28, 0x18	; 24
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	f8 94       	cli
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_PRESSED_KEY;
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
  a6:	80 e1       	ldi	r24, 0x10	; 16
  a8:	e5 e6       	ldi	r30, 0x65	; 101
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	de 01       	movw	r26, r28
  ae:	11 96       	adiw	r26, 0x01	; 1
  b0:	01 90       	ld	r0, Z+
  b2:	0d 92       	st	X+, r0
  b4:	8a 95       	dec	r24
  b6:	e1 f7       	brne	.-8      	; 0xb0 <KPD_u8GetPressedKey+0x2e>
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
  b8:	87 e0       	ldi	r24, 0x07	; 7
  ba:	89 8b       	std	Y+17, r24	; 0x11
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	8a 8b       	std	Y+18, r24	; 0x12
  c0:	95 e0       	ldi	r25, 0x05	; 5
  c2:	9b 8b       	std	Y+19, r25	; 0x13
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
  c8:	9d 8b       	std	Y+21, r25	; 0x15
  ca:	94 e0       	ldi	r25, 0x04	; 4
  cc:	9e 8b       	std	Y+22, r25	; 0x16
  ce:	8f 8b       	std	Y+23, r24	; 0x17
  d0:	82 e0       	ldi	r24, 0x02	; 2
  d2:	88 8f       	std	Y+24, r24	; 0x18
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
  d4:	b1 2c       	mov	r11, r1
  d6:	43 c0       	rjmp	.+134    	; 0x15e <KPD_u8GetPressedKey+0xdc>
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);
  d8:	cb 2c       	mov	r12, r11
  da:	d1 2c       	mov	r13, r1
  dc:	e1 e1       	ldi	r30, 0x11	; 17
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	ec 0f       	add	r30, r28
  e2:	fd 1f       	adc	r31, r29
  e4:	ec 0d       	add	r30, r12
  e6:	fd 1d       	adc	r31, r13
  e8:	a0 80       	ld	r10, Z
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	6a 2d       	mov	r22, r10
  ee:	84 e0       	ldi	r24, 0x04	; 4
  f0:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	2b c0       	rjmp	.+86     	; 0x14e <KPD_u8GetPressedKey+0xcc>
			if(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
  f8:	e1 2e       	mov	r14, r17
  fa:	f1 2c       	mov	r15, r1
  fc:	e5 e1       	ldi	r30, 0x15	; 21
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	ec 0f       	add	r30, r28
 102:	fd 1f       	adc	r31, r29
 104:	ee 0d       	add	r30, r14
 106:	ff 1d       	adc	r31, r15
 108:	00 81       	ld	r16, Z
 10a:	60 2f       	mov	r22, r16
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_u8GetPinValue>
 112:	81 11       	cpse	r24, r1
 114:	1b c0       	rjmp	.+54     	; 0x14c <KPD_u8GetPressedKey+0xca>
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIndex][Local_u8ColIndex];
 116:	ee 0c       	add	r14, r14
 118:	ff 1c       	adc	r15, r15
 11a:	ee 0c       	add	r14, r14
 11c:	ff 1c       	adc	r15, r15
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	8c 0f       	add	r24, r28
 124:	9d 1f       	adc	r25, r29
 126:	e8 0e       	add	r14, r24
 128:	f9 1e       	adc	r15, r25
 12a:	f7 01       	movw	r30, r14
 12c:	ec 0d       	add	r30, r12
 12e:	fd 1d       	adc	r31, r13
 130:	10 81       	ld	r17, Z
				while(DIO_u8GetPinValue(KPD_ROW_PORT,Local_u8RowArr[Local_u8RowIndex]) == Low){
 132:	60 2f       	mov	r22, r16
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	0e 94 31 05 	call	0xa62	; 0xa62 <DIO_u8GetPinValue>
 13a:	88 23       	and	r24, r24
 13c:	d1 f3       	breq	.-12     	; 0x132 <KPD_u8GetPressedKey+0xb0>

				}
				DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
 13e:	41 e0       	ldi	r20, 0x01	; 1
 140:	6a 2d       	mov	r22, r10
 142:	84 e0       	ldi	r24, 0x04	; 4
 144:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
				return Local_u8PressedKey;
 148:	81 2f       	mov	r24, r17
 14a:	0e c0       	rjmp	.+28     	; 0x168 <KPD_u8GetPressedKey+0xe6>
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
		/*Activate current column by clearing it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],Low);

		for(Local_u8RowIndex = 0; Local_u8RowIndex < ROW_NUMBER; Local_u8RowIndex++){
 14c:	1f 5f       	subi	r17, 0xFF	; 255
 14e:	14 30       	cpi	r17, 0x04	; 4
 150:	98 f2       	brcs	.-90     	; 0xf8 <KPD_u8GetPressedKey+0x76>
				return Local_u8PressedKey;
			}
		}

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);
 152:	41 e0       	ldi	r20, 0x01	; 1
 154:	6a 2d       	mov	r22, r10
 156:	84 e0       	ldi	r24, 0x04	; 4
 158:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
	u8 Local_u8ColIndex;
	u8 Local_u8RowIndex;
	u8 Local_u8KPDArr[ROW_NUMBER][COL_NUMBER] = {KPD_ARR_VAL};
	u8 Local_u8ColArr[COL_NUMBER] = {KPD_COL0_PIN, KPD_COL1_PIN, KPD_COL2_PIN, KPD_COL3_PIN};
	u8 Local_u8RowArr[ROW_NUMBER] = {KPD_ROW0_PIN, KPD_ROW1_PIN, KPD_ROW2_PIN, KPD_ROW3_PIN};
	for(Local_u8ColIndex = 0; Local_u8ColIndex < COL_NUMBER; Local_u8ColIndex++){
 15c:	b3 94       	inc	r11
 15e:	93 e0       	ldi	r25, 0x03	; 3
 160:	9b 15       	cp	r25, r11
 162:	08 f0       	brcs	.+2      	; 0x166 <KPD_u8GetPressedKey+0xe4>
 164:	b9 cf       	rjmp	.-142    	; 0xd8 <KPD_u8GetPressedKey+0x56>

		/*Deactivate current column by setting it*/
		DIO_voidSetPinValue(KPD_COL_PORT,Local_u8ColArr[Local_u8ColIndex],High);

	}
	return Local_u8PressedKey;
 166:	8f ef       	ldi	r24, 0xFF	; 255
}
 168:	68 96       	adiw	r28, 0x18	; 24
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
 174:	df 91       	pop	r29
 176:	cf 91       	pop	r28
 178:	1f 91       	pop	r17
 17a:	0f 91       	pop	r16
 17c:	ff 90       	pop	r15
 17e:	ef 90       	pop	r14
 180:	df 90       	pop	r13
 182:	cf 90       	pop	r12
 184:	bf 90       	pop	r11
 186:	af 90       	pop	r10
 188:	08 95       	ret

0000018a <LCD_voidSendCommand>:
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
 18a:	cf 93       	push	r28
 18c:	c8 2f       	mov	r28, r24
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	63 e0       	ldi	r22, 0x03	; 3
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	62 e0       	ldi	r22, 0x02	; 2
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 1a2:	c4 fb       	bst	r28, 4
 1a4:	44 27       	eor	r20, r20
 1a6:	40 f9       	bld	r20, 0
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 1b0:	c5 fb       	bst	r28, 5
 1b2:	44 27       	eor	r20, r20
 1b4:	40 f9       	bld	r20, 0
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 1be:	c6 fb       	bst	r28, 6
 1c0:	44 27       	eor	r20, r20
 1c2:	40 f9       	bld	r20, 0
 1c4:	62 e0       	ldi	r22, 0x02	; 2
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 1cc:	4c 2f       	mov	r20, r28
 1ce:	44 1f       	adc	r20, r20
 1d0:	44 27       	eor	r20, r20
 1d2:	44 1f       	adc	r20, r20
 1d4:	64 e0       	ldi	r22, 0x04	; 4
 1d6:	82 e0       	ldi	r24, 0x02	; 2
 1d8:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 1dc:	40 e0       	ldi	r20, 0x00	; 0
 1de:	62 e0       	ldi	r22, 0x02	; 2
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 1e6:	41 e0       	ldi	r20, 0x01	; 1
 1e8:	62 e0       	ldi	r22, 0x02	; 2
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 1f0:	4c 2f       	mov	r20, r28
 1f2:	41 70       	andi	r20, 0x01	; 1
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 1fc:	c1 fb       	bst	r28, 1
 1fe:	44 27       	eor	r20, r20
 200:	40 f9       	bld	r20, 0
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 20a:	c2 fb       	bst	r28, 2
 20c:	44 27       	eor	r20, r20
 20e:	40 f9       	bld	r20, 0
 210:	62 e0       	ldi	r22, 0x02	; 2
 212:	82 e0       	ldi	r24, 0x02	; 2
 214:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 218:	c3 fb       	bst	r28, 3
 21a:	44 27       	eor	r20, r20
 21c:	40 f9       	bld	r20, 0
 21e:	64 e0       	ldi	r22, 0x04	; 4
 220:	82 e0       	ldi	r24, 0x02	; 2
 222:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	62 e0       	ldi	r22, 0x02	; 2
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 230:	81 ee       	ldi	r24, 0xE1	; 225
 232:	94 e0       	ldi	r25, 0x04	; 4
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_voidSendCommand+0xaa>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_voidSendCommand+0xb0>
 23a:	00 00       	nop
 23c:	cf 91       	pop	r28
 23e:	08 95       	ret

00000240 <LCD_voidSendInitCommand>:
 240:	cf 93       	push	r28
 242:	c8 2f       	mov	r28, r24
 244:	40 e0       	ldi	r20, 0x00	; 0
 246:	63 e0       	ldi	r22, 0x03	; 3
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 24e:	41 e0       	ldi	r20, 0x01	; 1
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 258:	c4 fb       	bst	r28, 4
 25a:	44 27       	eor	r20, r20
 25c:	40 f9       	bld	r20, 0
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 266:	c5 fb       	bst	r28, 5
 268:	44 27       	eor	r20, r20
 26a:	40 f9       	bld	r20, 0
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 274:	c6 fb       	bst	r28, 6
 276:	44 27       	eor	r20, r20
 278:	40 f9       	bld	r20, 0
 27a:	62 e0       	ldi	r22, 0x02	; 2
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 282:	4c 2f       	mov	r20, r28
 284:	44 1f       	adc	r20, r20
 286:	44 27       	eor	r20, r20
 288:	44 1f       	adc	r20, r20
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	82 e0       	ldi	r24, 0x02	; 2
 28e:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 292:	40 e0       	ldi	r20, 0x00	; 0
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 29c:	81 ee       	ldi	r24, 0xE1	; 225
 29e:	94 e0       	ldi	r25, 0x04	; 4
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <LCD_voidSendInitCommand+0x60>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <LCD_voidSendInitCommand+0x66>
 2a6:	00 00       	nop
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <LCD_voidInit>:
 2ac:	8d e2       	ldi	r24, 0x2D	; 45
 2ae:	92 e2       	ldi	r25, 0x22	; 34
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_voidInit+0x4>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_voidInit+0xa>
 2b6:	00 00       	nop
 2b8:	80 e3       	ldi	r24, 0x30	; 48
 2ba:	0e 94 20 01 	call	0x240	; 0x240 <LCD_voidSendInitCommand>
 2be:	81 ee       	ldi	r24, 0xE1	; 225
 2c0:	94 e0       	ldi	r25, 0x04	; 4
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <LCD_voidInit+0x16>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <LCD_voidInit+0x1c>
 2c8:	00 00       	nop
 2ca:	80 e3       	ldi	r24, 0x30	; 48
 2cc:	0e 94 20 01 	call	0x240	; 0x240 <LCD_voidSendInitCommand>
 2d0:	89 ef       	ldi	r24, 0xF9	; 249
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_voidInit+0x28>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_voidInit+0x2e>
 2da:	00 00       	nop
 2dc:	80 e3       	ldi	r24, 0x30	; 48
 2de:	0e 94 20 01 	call	0x240	; 0x240 <LCD_voidSendInitCommand>
 2e2:	89 ef       	ldi	r24, 0xF9	; 249
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_voidInit+0x3a>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_voidInit+0x40>
 2ec:	00 00       	nop
 2ee:	80 e2       	ldi	r24, 0x20	; 32
 2f0:	0e 94 20 01 	call	0x240	; 0x240 <LCD_voidSendInitCommand>
 2f4:	89 ef       	ldi	r24, 0xF9	; 249
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	01 97       	sbiw	r24, 0x01	; 1
 2fa:	f1 f7       	brne	.-4      	; 0x2f8 <LCD_voidInit+0x4c>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <LCD_voidInit+0x52>
 2fe:	00 00       	nop
 300:	88 e2       	ldi	r24, 0x28	; 40
 302:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
 306:	89 ef       	ldi	r24, 0xF9	; 249
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_voidInit+0x5e>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_voidInit+0x64>
 310:	00 00       	nop
 312:	88 e0       	ldi	r24, 0x08	; 8
 314:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
 318:	89 ef       	ldi	r24, 0xF9	; 249
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <LCD_voidInit+0x70>
 320:	00 c0       	rjmp	.+0      	; 0x322 <LCD_voidInit+0x76>
 322:	00 00       	nop
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
 32a:	81 ee       	ldi	r24, 0xE1	; 225
 32c:	94 e0       	ldi	r25, 0x04	; 4
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_voidInit+0x82>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_voidInit+0x88>
 334:	00 00       	nop
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
 33c:	89 ef       	ldi	r24, 0xF9	; 249
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LCD_voidInit+0x94>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LCD_voidInit+0x9a>
 346:	00 00       	nop
 348:	86 e0       	ldi	r24, 0x06	; 6
 34a:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
 34e:	89 ef       	ldi	r24, 0xF9	; 249
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <LCD_voidInit+0xa6>
 356:	00 c0       	rjmp	.+0      	; 0x358 <LCD_voidInit+0xac>
 358:	00 00       	nop
 35a:	08 95       	ret

0000035c <LCD_voidWriteChar>:
 35c:	cf 93       	push	r28
 35e:	c8 2f       	mov	r28, r24
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	63 e0       	ldi	r22, 0x03	; 3
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 36a:	41 e0       	ldi	r20, 0x01	; 1
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 374:	c4 fb       	bst	r28, 4
 376:	44 27       	eor	r20, r20
 378:	40 f9       	bld	r20, 0
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 382:	c5 fb       	bst	r28, 5
 384:	44 27       	eor	r20, r20
 386:	40 f9       	bld	r20, 0
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	82 e0       	ldi	r24, 0x02	; 2
 38c:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 390:	c6 fb       	bst	r28, 6
 392:	44 27       	eor	r20, r20
 394:	40 f9       	bld	r20, 0
 396:	62 e0       	ldi	r22, 0x02	; 2
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 39e:	4c 2f       	mov	r20, r28
 3a0:	44 1f       	adc	r20, r20
 3a2:	44 27       	eor	r20, r20
 3a4:	44 1f       	adc	r20, r20
 3a6:	64 e0       	ldi	r22, 0x04	; 4
 3a8:	82 e0       	ldi	r24, 0x02	; 2
 3aa:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 3ae:	40 e0       	ldi	r20, 0x00	; 0
 3b0:	62 e0       	ldi	r22, 0x02	; 2
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	62 e0       	ldi	r22, 0x02	; 2
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 3c2:	4c 2f       	mov	r20, r28
 3c4:	41 70       	andi	r20, 0x01	; 1
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 3ce:	c1 fb       	bst	r28, 1
 3d0:	44 27       	eor	r20, r20
 3d2:	40 f9       	bld	r20, 0
 3d4:	61 e0       	ldi	r22, 0x01	; 1
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 3dc:	c2 fb       	bst	r28, 2
 3de:	44 27       	eor	r20, r20
 3e0:	40 f9       	bld	r20, 0
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 3ea:	c3 fb       	bst	r28, 3
 3ec:	44 27       	eor	r20, r20
 3ee:	40 f9       	bld	r20, 0
 3f0:	64 e0       	ldi	r22, 0x04	; 4
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 3f8:	40 e0       	ldi	r20, 0x00	; 0
 3fa:	62 e0       	ldi	r22, 0x02	; 2
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 402:	81 ee       	ldi	r24, 0xE1	; 225
 404:	94 e0       	ldi	r25, 0x04	; 4
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	cf 91       	pop	r28
 410:	08 95       	ret

00000412 <LCD_voidWriteString>:
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	8c 01       	movw	r16, r24
 41a:	c0 e0       	ldi	r28, 0x00	; 0
 41c:	03 c0       	rjmp	.+6      	; 0x424 <LCD_voidWriteString+0x12>
 41e:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_voidWriteChar>
 422:	cf 5f       	subi	r28, 0xFF	; 255
 424:	f8 01       	movw	r30, r16
 426:	ec 0f       	add	r30, r28
 428:	f1 1d       	adc	r31, r1
 42a:	80 81       	ld	r24, Z
 42c:	81 11       	cpse	r24, r1
 42e:	f7 cf       	rjmp	.-18     	; 0x41e <LCD_voidWriteString+0xc>
 430:	cf 91       	pop	r28
 432:	1f 91       	pop	r17
 434:	0f 91       	pop	r16
 436:	08 95       	ret

00000438 <IntToString>:
 438:	8f 92       	push	r8
 43a:	9f 92       	push	r9
 43c:	af 92       	push	r10
 43e:	bf 92       	push	r11
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	8a 01       	movw	r16, r20
 452:	fa 01       	movw	r30, r20
 454:	13 8a       	std	Z+19, r1	; 0x13
 456:	99 23       	and	r25, r25
 458:	64 f4       	brge	.+24     	; 0x472 <IntToString+0x3a>
 45a:	90 95       	com	r25
 45c:	80 95       	com	r24
 45e:	70 95       	com	r23
 460:	61 95       	neg	r22
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	81 2c       	mov	r8, r1
 46a:	91 2c       	mov	r9, r1
 46c:	54 01       	movw	r10, r8
 46e:	83 94       	inc	r8
 470:	03 c0       	rjmp	.+6      	; 0x478 <IntToString+0x40>
 472:	81 2c       	mov	r8, r1
 474:	91 2c       	mov	r9, r1
 476:	54 01       	movw	r10, r8
 478:	0f 2e       	mov	r0, r31
 47a:	f2 e1       	ldi	r31, 0x12	; 18
 47c:	cf 2e       	mov	r12, r31
 47e:	d1 2c       	mov	r13, r1
 480:	e1 2c       	mov	r14, r1
 482:	f1 2c       	mov	r15, r1
 484:	f0 2d       	mov	r31, r0
 486:	14 c0       	rjmp	.+40     	; 0x4b0 <IntToString+0x78>
 488:	e8 01       	movw	r28, r16
 48a:	cc 0d       	add	r28, r12
 48c:	dd 1d       	adc	r29, r13
 48e:	2a e0       	ldi	r18, 0x0A	; 10
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	40 e0       	ldi	r20, 0x00	; 0
 494:	50 e0       	ldi	r21, 0x00	; 0
 496:	0e 94 ab 05 	call	0xb56	; 0xb56 <__divmodsi4>
 49a:	60 5d       	subi	r22, 0xD0	; 208
 49c:	68 83       	st	Y, r22
 49e:	62 2f       	mov	r22, r18
 4a0:	73 2f       	mov	r23, r19
 4a2:	84 2f       	mov	r24, r20
 4a4:	95 2f       	mov	r25, r21
 4a6:	f1 e0       	ldi	r31, 0x01	; 1
 4a8:	cf 1a       	sub	r12, r31
 4aa:	d1 08       	sbc	r13, r1
 4ac:	e1 08       	sbc	r14, r1
 4ae:	f1 08       	sbc	r15, r1
 4b0:	61 15       	cp	r22, r1
 4b2:	71 05       	cpc	r23, r1
 4b4:	81 05       	cpc	r24, r1
 4b6:	91 05       	cpc	r25, r1
 4b8:	39 f7       	brne	.-50     	; 0x488 <IntToString+0x50>
 4ba:	89 28       	or	r8, r9
 4bc:	8a 28       	or	r8, r10
 4be:	8b 28       	or	r8, r11
 4c0:	51 f0       	breq	.+20     	; 0x4d6 <IntToString+0x9e>
 4c2:	f8 01       	movw	r30, r16
 4c4:	ec 0d       	add	r30, r12
 4c6:	fd 1d       	adc	r31, r13
 4c8:	8d e2       	ldi	r24, 0x2D	; 45
 4ca:	80 83       	st	Z, r24
 4cc:	21 e0       	ldi	r18, 0x01	; 1
 4ce:	c2 1a       	sub	r12, r18
 4d0:	d1 08       	sbc	r13, r1
 4d2:	e1 08       	sbc	r14, r1
 4d4:	f1 08       	sbc	r15, r1
 4d6:	8f ef       	ldi	r24, 0xFF	; 255
 4d8:	c8 1a       	sub	r12, r24
 4da:	d8 0a       	sbc	r13, r24
 4dc:	e8 0a       	sbc	r14, r24
 4de:	f8 0a       	sbc	r15, r24
 4e0:	c8 01       	movw	r24, r16
 4e2:	8c 0d       	add	r24, r12
 4e4:	9d 1d       	adc	r25, r13
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	1f 91       	pop	r17
 4ec:	0f 91       	pop	r16
 4ee:	ff 90       	pop	r15
 4f0:	ef 90       	pop	r14
 4f2:	df 90       	pop	r13
 4f4:	cf 90       	pop	r12
 4f6:	bf 90       	pop	r11
 4f8:	af 90       	pop	r10
 4fa:	9f 90       	pop	r9
 4fc:	8f 90       	pop	r8
 4fe:	08 95       	ret

00000500 <LCD_voidWriteIntData>:
 500:	cf 93       	push	r28
 502:	df 93       	push	r29
 504:	cd b7       	in	r28, 0x3d	; 61
 506:	de b7       	in	r29, 0x3e	; 62
 508:	64 97       	sbiw	r28, 0x14	; 20
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	f8 94       	cli
 50e:	de bf       	out	0x3e, r29	; 62
 510:	0f be       	out	0x3f, r0	; 63
 512:	cd bf       	out	0x3d, r28	; 61
 514:	61 15       	cp	r22, r1
 516:	71 05       	cpc	r23, r1
 518:	81 05       	cpc	r24, r1
 51a:	91 05       	cpc	r25, r1
 51c:	41 f0       	breq	.+16     	; 0x52e <LCD_voidWriteIntData+0x2e>
 51e:	ae 01       	movw	r20, r28
 520:	4f 5f       	subi	r20, 0xFF	; 255
 522:	5f 4f       	sbci	r21, 0xFF	; 255
 524:	0e 94 1c 02 	call	0x438	; 0x438 <IntToString>
 528:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
 52c:	03 c0       	rjmp	.+6      	; 0x534 <LCD_voidWriteIntData+0x34>
 52e:	80 e3       	ldi	r24, 0x30	; 48
 530:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_voidWriteChar>
 534:	64 96       	adiw	r28, 0x14	; 20
 536:	0f b6       	in	r0, 0x3f	; 63
 538:	f8 94       	cli
 53a:	de bf       	out	0x3e, r29	; 62
 53c:	0f be       	out	0x3f, r0	; 63
 53e:	cd bf       	out	0x3d, r28	; 61
 540:	df 91       	pop	r29
 542:	cf 91       	pop	r28
 544:	08 95       	ret

00000546 <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
	u8 Local_Address = FIRST_LINE_ADDRESS;

	if(X_Position == 0){
 546:	81 11       	cpse	r24, r1
 548:	03 c0       	rjmp	.+6      	; 0x550 <LCD_voidGoToPosition+0xa>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
 54a:	80 e8       	ldi	r24, 0x80	; 128
 54c:	86 0f       	add	r24, r22
 54e:	10 c0       	rjmp	.+32     	; 0x570 <LCD_voidGoToPosition+0x2a>
	}
	else if(X_Position == 1){
 550:	81 30       	cpi	r24, 0x01	; 1
 552:	19 f4       	brne	.+6      	; 0x55a <LCD_voidGoToPosition+0x14>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
 554:	80 ec       	ldi	r24, 0xC0	; 192
 556:	86 0f       	add	r24, r22
 558:	0b c0       	rjmp	.+22     	; 0x570 <LCD_voidGoToPosition+0x2a>
	}
	else if(X_Position == 2){
 55a:	82 30       	cpi	r24, 0x02	; 2
 55c:	19 f4       	brne	.+6      	; 0x564 <LCD_voidGoToPosition+0x1e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
 55e:	84 e9       	ldi	r24, 0x94	; 148
 560:	86 0f       	add	r24, r22
 562:	06 c0       	rjmp	.+12     	; 0x570 <LCD_voidGoToPosition+0x2a>
	}
	else if(X_Position == 3){
 564:	83 30       	cpi	r24, 0x03	; 3
 566:	19 f4       	brne	.+6      	; 0x56e <LCD_voidGoToPosition+0x28>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
 568:	84 ed       	ldi	r24, 0xD4	; 212
 56a:	86 0f       	add	r24, r22
 56c:	01 c0       	rjmp	.+2      	; 0x570 <LCD_voidGoToPosition+0x2a>
		counter2++;
	}
}

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
	u8 Local_Address = FIRST_LINE_ADDRESS;
 56e:	80 e8       	ldi	r24, 0x80	; 128
	else if(X_Position == 3){
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
	}

	SET_BIT(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
	LCD_voidSendCommand(Local_Address);
 570:	80 68       	ori	r24, 0x80	; 128
 572:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
 576:	08 95       	ret

00000578 <LCD_voidDisplaySpecialChar>:
}

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
 578:	0f 93       	push	r16
 57a:	1f 93       	push	r17
 57c:	cf 93       	push	r28
 57e:	8c 01       	movw	r16, r24
 580:	c6 2f       	mov	r28, r22
 582:	84 2f       	mov	r24, r20
	LCD_voidGoToPosition(row,column);
 584:	62 2f       	mov	r22, r18
 586:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
 58a:	8c 2f       	mov	r24, r28
 58c:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_voidWriteChar>
	u8 address = 0;
	u8 index = 0;
	if(CGRam_index < 8){
 590:	c8 30       	cpi	r28, 0x08	; 8
 592:	98 f4       	brcc	.+38     	; 0x5ba <LCD_voidDisplaySpecialChar+0x42>
		address = CGRam_index * 8;
 594:	8c 2f       	mov	r24, r28
 596:	88 0f       	add	r24, r24
 598:	88 0f       	add	r24, r24
 59a:	88 0f       	add	r24, r24
 59c:	8f 77       	andi	r24, 0x7F	; 127
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
 59e:	80 64       	ori	r24, 0x40	; 64
 5a0:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
 5a4:	c0 e0       	ldi	r28, 0x00	; 0
 5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <LCD_voidDisplaySpecialChar+0x3e>
			LCD_voidWriteChar(char_ptr[index]);
 5a8:	f8 01       	movw	r30, r16
 5aa:	ec 0f       	add	r30, r28
 5ac:	f1 1d       	adc	r31, r1
 5ae:	80 81       	ld	r24, Z
 5b0:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		SET_BIT(address,6);
		CLR_BIT(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
 5b4:	cf 5f       	subi	r28, 0xFF	; 255
 5b6:	c8 30       	cpi	r28, 0x08	; 8
 5b8:	b8 f3       	brcs	.-18     	; 0x5a8 <LCD_voidDisplaySpecialChar+0x30>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
 5ba:	82 e0       	ldi	r24, 0x02	; 2
 5bc:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
 5c0:	cf 91       	pop	r28
 5c2:	1f 91       	pop	r17
 5c4:	0f 91       	pop	r16
 5c6:	08 95       	ret

000005c8 <AdjustMovements>:
	return 0;
}

void AdjustMovements(){
	u8 buttonPressed = NO_PRESSED_KEY;
	buttonPressed = KPD_u8GetPressedKey();
 5c8:	0e 94 41 00 	call	0x82	; 0x82 <KPD_u8GetPressedKey>
	if(buttonPressed != NO_PRESSED_KEY){
 5cc:	8f 3f       	cpi	r24, 0xFF	; 255
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <AdjustMovements+0xa>
 5d0:	72 c0       	rjmp	.+228    	; 0x6b6 <AdjustMovements+0xee>
		if(buttonPressed == 4){
 5d2:	84 30       	cpi	r24, 0x04	; 4
 5d4:	e1 f4       	brne	.+56     	; 0x60e <AdjustMovements+0x46>
			if(moveLeft){
 5d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 5da:	88 23       	and	r24, r24
 5dc:	61 f0       	breq	.+24     	; 0x5f6 <AdjustMovements+0x2e>
				pad1X++;
 5de:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pad1X>
 5e2:	8f 5f       	subi	r24, 0xFF	; 255
 5e4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pad1X>
				if(pad1X > 3){
 5e8:	84 30       	cpi	r24, 0x04	; 4
 5ea:	08 f4       	brcc	.+2      	; 0x5ee <AdjustMovements+0x26>
 5ec:	64 c0       	rjmp	.+200    	; 0x6b6 <AdjustMovements+0xee>
					pad1X =1;
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pad1X>
 5f4:	08 95       	ret
				}
			}
			else{
				ballX++;
 5f6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ballX>
 5fa:	8f 5f       	subi	r24, 0xFF	; 255
 5fc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ballX>
				if(ballX > 3){
 600:	84 30       	cpi	r24, 0x04	; 4
 602:	08 f4       	brcc	.+2      	; 0x606 <AdjustMovements+0x3e>
 604:	58 c0       	rjmp	.+176    	; 0x6b6 <AdjustMovements+0xee>
					ballX = 1;
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ballX>
 60c:	08 95       	ret
				}
			}
		}
		else if(buttonPressed == '*'){
 60e:	8a 32       	cpi	r24, 0x2A	; 42
 610:	d9 f4       	brne	.+54     	; 0x648 <AdjustMovements+0x80>
			if(moveLeft == 0){
 612:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 616:	81 11       	cpse	r24, r1
 618:	0c c0       	rjmp	.+24     	; 0x632 <AdjustMovements+0x6a>
				pad2X++;
 61a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <pad2X>
 61e:	8f 5f       	subi	r24, 0xFF	; 255
 620:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <pad2X>
				if(pad2X > 3){
 624:	84 30       	cpi	r24, 0x04	; 4
 626:	08 f4       	brcc	.+2      	; 0x62a <AdjustMovements+0x62>
 628:	46 c0       	rjmp	.+140    	; 0x6b6 <AdjustMovements+0xee>
					pad2X =1;
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <pad2X>
 630:	08 95       	ret
				}
			}
			else{
				ballX++;
 632:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ballX>
 636:	8f 5f       	subi	r24, 0xFF	; 255
 638:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ballX>
				if(ballX > 3){
 63c:	84 30       	cpi	r24, 0x04	; 4
 63e:	d8 f1       	brcs	.+118    	; 0x6b6 <AdjustMovements+0xee>
					ballX =1;
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ballX>
 646:	08 95       	ret
				}
			}
		}
		else if(buttonPressed == 7){
 648:	87 30       	cpi	r24, 0x07	; 7
 64a:	d1 f4       	brne	.+52     	; 0x680 <AdjustMovements+0xb8>
			if(moveLeft == 1){
 64c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 650:	81 30       	cpi	r24, 0x01	; 1
 652:	59 f4       	brne	.+22     	; 0x66a <AdjustMovements+0xa2>
				pad1X--;
 654:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pad1X>
 658:	81 50       	subi	r24, 0x01	; 1
 65a:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pad1X>
				if(pad1X < 1){
 65e:	81 11       	cpse	r24, r1
 660:	2a c0       	rjmp	.+84     	; 0x6b6 <AdjustMovements+0xee>
					pad1X =3;
 662:	83 e0       	ldi	r24, 0x03	; 3
 664:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pad1X>
 668:	08 95       	ret
				}
			}
			else{
				ballX--;
 66a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ballX>
 66e:	81 50       	subi	r24, 0x01	; 1
 670:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ballX>
				if(ballX < 1){
 674:	81 11       	cpse	r24, r1
 676:	1f c0       	rjmp	.+62     	; 0x6b6 <AdjustMovements+0xee>
					ballX =3;
 678:	83 e0       	ldi	r24, 0x03	; 3
 67a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ballX>
 67e:	08 95       	ret
				}
			}
		}
		else if(buttonPressed == '/'){
 680:	8f 32       	cpi	r24, 0x2F	; 47
 682:	c9 f4       	brne	.+50     	; 0x6b6 <AdjustMovements+0xee>
			if(moveLeft == 0){
 684:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 688:	81 11       	cpse	r24, r1
 68a:	0b c0       	rjmp	.+22     	; 0x6a2 <AdjustMovements+0xda>
				pad2X--;
 68c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <pad2X>
 690:	81 50       	subi	r24, 0x01	; 1
 692:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <pad2X>
				if(pad2X < 1){
 696:	81 11       	cpse	r24, r1
 698:	0e c0       	rjmp	.+28     	; 0x6b6 <AdjustMovements+0xee>
					pad2X =3;
 69a:	83 e0       	ldi	r24, 0x03	; 3
 69c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <pad2X>
 6a0:	08 95       	ret
				}
			}
			else{
				ballX--;
 6a2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ballX>
 6a6:	81 50       	subi	r24, 0x01	; 1
 6a8:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ballX>
				if(ballX < 1){
 6ac:	81 11       	cpse	r24, r1
 6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <AdjustMovements+0xee>
					ballX =3;
 6b0:	83 e0       	ldi	r24, 0x03	; 3
 6b2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ballX>
 6b6:	08 95       	ret

000006b8 <main>:
u8 pad2X = 1;
u8 moveLeft = 1;

void AdjustMovements();

int main(){
 6b8:	cf 93       	push	r28
 6ba:	df 93       	push	r29
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
 6c0:	a9 97       	sbiw	r28, 0x29	; 41
 6c2:	0f b6       	in	r0, 0x3f	; 63
 6c4:	f8 94       	cli
 6c6:	de bf       	out	0x3e, r29	; 62
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	cd bf       	out	0x3d, r28	; 61
	DIO_voidInit();
 6cc:	0e 94 83 05 	call	0xb06	; 0xb06 <DIO_voidInit>
	DIO_voidSetPortValue(DIO_PortC, 0xFF);
 6d0:	6f ef       	ldi	r22, 0xFF	; 255
 6d2:	83 e0       	ldi	r24, 0x03	; 3
 6d4:	0e 94 94 05 	call	0xb28	; 0xb28 <DIO_voidSetPortValue>
	LCD_voidInit();
 6d8:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_voidInit>
	u8 pad1[] = {PAD1};
 6dc:	88 e0       	ldi	r24, 0x08	; 8
 6de:	e5 e7       	ldi	r30, 0x75	; 117
 6e0:	f0 e0       	ldi	r31, 0x00	; 0
 6e2:	de 01       	movw	r26, r28
 6e4:	11 96       	adiw	r26, 0x01	; 1
 6e6:	01 90       	ld	r0, Z+
 6e8:	0d 92       	st	X+, r0
 6ea:	8a 95       	dec	r24
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <main+0x2e>
	u8 pad2[] = {PAD2};
 6ee:	88 e0       	ldi	r24, 0x08	; 8
 6f0:	ed e7       	ldi	r30, 0x7D	; 125
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	de 01       	movw	r26, r28
 6f6:	19 96       	adiw	r26, 0x09	; 9
 6f8:	01 90       	ld	r0, Z+
 6fa:	0d 92       	st	X+, r0
 6fc:	8a 95       	dec	r24
 6fe:	e1 f7       	brne	.-8      	; 0x6f8 <main+0x40>
	u8 ball[] = {BALL};
 700:	88 e0       	ldi	r24, 0x08	; 8
 702:	e5 e8       	ldi	r30, 0x85	; 133
 704:	f0 e0       	ldi	r31, 0x00	; 0
 706:	de 01       	movw	r26, r28
 708:	51 96       	adiw	r26, 0x11	; 17
 70a:	01 90       	ld	r0, Z+
 70c:	0d 92       	st	X+, r0
 70e:	8a 95       	dec	r24
 710:	e1 f7       	brne	.-8      	; 0x70a <main+0x52>
	u8 player1[] = "Mohamed ";
 712:	89 e0       	ldi	r24, 0x09	; 9
 714:	eb e9       	ldi	r30, 0x9B	; 155
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	de 01       	movw	r26, r28
 71a:	59 96       	adiw	r26, 0x19	; 25
 71c:	01 90       	ld	r0, Z+
 71e:	0d 92       	st	X+, r0
 720:	8a 95       	dec	r24
 722:	e1 f7       	brne	.-8      	; 0x71c <main+0x64>
	u8 player2[] = " Osama ";
 724:	88 e0       	ldi	r24, 0x08	; 8
 726:	e4 ea       	ldi	r30, 0xA4	; 164
 728:	f0 e0       	ldi	r31, 0x00	; 0
 72a:	de 01       	movw	r26, r28
 72c:	92 96       	adiw	r26, 0x22	; 34
 72e:	01 90       	ld	r0, Z+
 730:	0d 92       	st	X+, r0
 732:	8a 95       	dec	r24
 734:	e1 f7       	brne	.-8      	; 0x72e <main+0x76>

	u8 player1Score = 0;
	u8 player2Score = 0;
	DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	66 e0       	ldi	r22, 0x06	; 6
 73a:	83 e0       	ldi	r24, 0x03	; 3
 73c:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
	LCD_voidGoToPosition(0,0);
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_voidGoToPosition>
	u8 ball[] = {BALL};
	u8 player1[] = "Mohamed ";
	u8 player2[] = " Osama ";

	u8 player1Score = 0;
	u8 player2Score = 0;
 748:	00 e0       	ldi	r16, 0x00	; 0
	u8 pad2[] = {PAD2};
	u8 ball[] = {BALL};
	u8 player1[] = "Mohamed ";
	u8 player2[] = " Osama ";

	u8 player1Score = 0;
 74a:	10 e0       	ldi	r17, 0x00	; 0
	u8 player2Score = 0;
	DIO_voidSetPinValue(DIO_PortC, DIO_PIN6, Low);
	LCD_voidGoToPosition(0,0);

	while(1){
		LCD_voidSendCommand(LCD_ClearDisplay);
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
		LCD_voidGoToPosition(0,0);
 752:	60 e0       	ldi	r22, 0x00	; 0
 754:	80 e0       	ldi	r24, 0x00	; 0
 756:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_voidGoToPosition>
		LCD_voidWriteString(player1);
 75a:	ce 01       	movw	r24, r28
 75c:	49 96       	adiw	r24, 0x19	; 25
 75e:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
		LCD_voidWriteChar(':');
 762:	8a e3       	ldi	r24, 0x3A	; 58
 764:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_voidWriteChar>
		LCD_voidWriteIntData(player1Score);
 768:	61 2f       	mov	r22, r17
 76a:	70 e0       	ldi	r23, 0x00	; 0
 76c:	80 e0       	ldi	r24, 0x00	; 0
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	0e 94 80 02 	call	0x500	; 0x500 <LCD_voidWriteIntData>
		LCD_voidGoToPosition(0,0x80 + 10);
 774:	6a e8       	ldi	r22, 0x8A	; 138
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_voidGoToPosition>
		LCD_voidWriteString(player2);
 77c:	ce 01       	movw	r24, r28
 77e:	82 96       	adiw	r24, 0x22	; 34
 780:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
		LCD_voidWriteChar(':');
 784:	8a e3       	ldi	r24, 0x3A	; 58
 786:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_voidWriteChar>
		LCD_voidWriteIntData(player2Score);
 78a:	60 2f       	mov	r22, r16
 78c:	70 e0       	ldi	r23, 0x00	; 0
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 80 02 	call	0x500	; 0x500 <LCD_voidWriteIntData>
		LCD_voidDisplaySpecialChar(pad1,7,pad1X,START);
 796:	20 e8       	ldi	r18, 0x80	; 128
 798:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <pad1X>
 79c:	67 e0       	ldi	r22, 0x07	; 7
 79e:	ce 01       	movw	r24, r28
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_voidDisplaySpecialChar>
		LCD_voidDisplaySpecialChar(pad2,6,pad2X,END);
 7a6:	23 e9       	ldi	r18, 0x93	; 147
 7a8:	40 91 61 00 	lds	r20, 0x0061	; 0x800061 <pad2X>
 7ac:	66 e0       	ldi	r22, 0x06	; 6
 7ae:	ce 01       	movw	r24, r28
 7b0:	09 96       	adiw	r24, 0x09	; 9
 7b2:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_voidDisplaySpecialChar>
		LCD_voidDisplaySpecialChar(ball,5,ballX,ballY);
 7b6:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <ballY>
 7ba:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <ballX>
 7be:	65 e0       	ldi	r22, 0x05	; 5
 7c0:	ce 01       	movw	r24, r28
 7c2:	41 96       	adiw	r24, 0x11	; 17
 7c4:	0e 94 bc 02 	call	0x578	; 0x578 <LCD_voidDisplaySpecialChar>
		if(moveLeft){
 7c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 7cc:	88 23       	and	r24, r24
 7ce:	09 f4       	brne	.+2      	; 0x7d2 <main+0x11a>
 7d0:	61 c0       	rjmp	.+194    	; 0x894 <__stack+0x35>
			ballY--;
 7d2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ballY>
 7d6:	81 50       	subi	r24, 0x01	; 1
 7d8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ballY>
			if(ballY == START){
 7dc:	80 38       	cpi	r24, 0x80	; 128
 7de:	09 f0       	breq	.+2      	; 0x7e2 <main+0x12a>
 7e0:	b9 c0       	rjmp	.+370    	; 0x954 <__stack+0xf5>
				if(ballX == pad1X){
 7e2:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <ballX>
 7e6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <pad1X>
 7ea:	29 13       	cpse	r18, r25
 7ec:	06 c0       	rjmp	.+12     	; 0x7fa <main+0x142>
					ballY+=2;
 7ee:	8e 5f       	subi	r24, 0xFE	; 254
 7f0:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ballY>
					moveLeft = 0;
 7f4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 7f8:	ad c0       	rjmp	.+346    	; 0x954 <__stack+0xf5>
				}
				else{
					DIO_voidSetPinValue(DIO_PortC,DIO_PIN6, High);
 7fa:	41 e0       	ldi	r20, 0x01	; 1
 7fc:	66 e0       	ldi	r22, 0x06	; 6
 7fe:	83 e0       	ldi	r24, 0x03	; 3
 800:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
					player2Score++;
 804:	0f 5f       	subi	r16, 0xFF	; 255
					ballY = START + 10;
 806:	8a e8       	ldi	r24, 0x8A	; 138
 808:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ballY>
					ballX = 2;
 80c:	82 e0       	ldi	r24, 0x02	; 2
 80e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ballX>

					LCD_voidSendCommand(LCD_ClearDisplay);
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
					LCD_voidGoToPosition(1, START + 5);
 818:	65 e8       	ldi	r22, 0x85	; 133
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_voidGoToPosition>
					LCD_voidWriteString(player2);
 820:	ce 01       	movw	r24, r28
 822:	82 96       	adiw	r24, 0x22	; 34
 824:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
					LCD_voidWriteString((u8*)"Scored!");
 828:	8d e8       	ldi	r24, 0x8D	; 141
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 830:	8f e4       	ldi	r24, 0x4F	; 79
 832:	93 ec       	ldi	r25, 0xC3	; 195
 834:	01 97       	sbiw	r24, 0x01	; 1
 836:	f1 f7       	brne	.-4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 838:	00 c0       	rjmp	.+0      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 83a:	00 00       	nop
					_delay_ms(200);
					DIO_voidSetPinValue(DIO_PortC,DIO_PIN6, Low);
 83c:	40 e0       	ldi	r20, 0x00	; 0
 83e:	66 e0       	ldi	r22, 0x06	; 6
 840:	83 e0       	ldi	r24, 0x03	; 3
 842:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 846:	9f ef       	ldi	r25, 0xFF	; 255
 848:	20 e7       	ldi	r18, 0x70	; 112
 84a:	82 e0       	ldi	r24, 0x02	; 2
 84c:	91 50       	subi	r25, 0x01	; 1
 84e:	20 40       	sbci	r18, 0x00	; 0
 850:	80 40       	sbci	r24, 0x00	; 0
 852:	e1 f7       	brne	.-8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 854:	00 c0       	rjmp	.+0      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 856:	00 00       	nop
					_delay_ms(800);
					if(player2Score == 3){
 858:	03 30       	cpi	r16, 0x03	; 3
 85a:	09 f0       	breq	.+2      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 85c:	7b c0       	rjmp	.+246    	; 0x954 <__stack+0xf5>
						LCD_voidSendCommand(LCD_ClearDisplay);
 85e:	81 e0       	ldi	r24, 0x01	; 1
 860:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
						LCD_voidGoToPosition(1, START + 5);
 864:	65 e8       	ldi	r22, 0x85	; 133
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_voidGoToPosition>
						LCD_voidWriteString(player2);
 86c:	ce 01       	movw	r24, r28
 86e:	82 96       	adiw	r24, 0x22	; 34
 870:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
						LCD_voidWriteString((u8*)"Wins!");
 874:	85 e9       	ldi	r24, 0x95	; 149
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
 87c:	9f e3       	ldi	r25, 0x3F	; 63
 87e:	2d e0       	ldi	r18, 0x0D	; 13
 880:	83 e0       	ldi	r24, 0x03	; 3
 882:	91 50       	subi	r25, 0x01	; 1
 884:	20 40       	sbci	r18, 0x00	; 0
 886:	80 40       	sbci	r24, 0x00	; 0
 888:	e1 f7       	brne	.-8      	; 0x882 <__stack+0x23>
 88a:	00 c0       	rjmp	.+0      	; 0x88c <__stack+0x2d>
 88c:	00 00       	nop
						player1Score = 0;
						player2Score = 0;
 88e:	00 e0       	ldi	r16, 0x00	; 0
					if(player2Score == 3){
						LCD_voidSendCommand(LCD_ClearDisplay);
						LCD_voidGoToPosition(1, START + 5);
						LCD_voidWriteString(player2);
						LCD_voidWriteString((u8*)"Wins!");
						player1Score = 0;
 890:	10 e0       	ldi	r17, 0x00	; 0
 892:	60 c0       	rjmp	.+192    	; 0x954 <__stack+0xf5>
					}
				}
			}
		}
		else{
			ballY++;
 894:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <ballY>
 898:	8f 5f       	subi	r24, 0xFF	; 255
 89a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ballY>
			if(ballY == END){
 89e:	83 39       	cpi	r24, 0x93	; 147
 8a0:	09 f0       	breq	.+2      	; 0x8a4 <__stack+0x45>
 8a2:	58 c0       	rjmp	.+176    	; 0x954 <__stack+0xf5>
				if(ballX == pad2X){
 8a4:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <ballX>
 8a8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <pad2X>
 8ac:	29 13       	cpse	r18, r25
 8ae:	07 c0       	rjmp	.+14     	; 0x8be <__stack+0x5f>
					ballY-=2;
 8b0:	82 50       	subi	r24, 0x02	; 2
 8b2:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ballY>
					moveLeft = 1;
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 8bc:	4b c0       	rjmp	.+150    	; 0x954 <__stack+0xf5>
				}
				else{
					DIO_voidSetPinValue(DIO_PortC,DIO_PIN6, High);
 8be:	41 e0       	ldi	r20, 0x01	; 1
 8c0:	66 e0       	ldi	r22, 0x06	; 6
 8c2:	83 e0       	ldi	r24, 0x03	; 3
 8c4:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
					player1Score++;
 8c8:	1f 5f       	subi	r17, 0xFF	; 255
					ballY = START + 10;
 8ca:	8a e8       	ldi	r24, 0x8A	; 138
 8cc:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <ballY>
					ballX = 2;
 8d0:	82 e0       	ldi	r24, 0x02	; 2
 8d2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ballX>

					LCD_voidSendCommand(LCD_ClearDisplay);
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
					LCD_voidGoToPosition(1, START + 5);
 8dc:	65 e8       	ldi	r22, 0x85	; 133
 8de:	81 e0       	ldi	r24, 0x01	; 1
 8e0:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_voidGoToPosition>
					LCD_voidWriteString(player1);
 8e4:	ce 01       	movw	r24, r28
 8e6:	49 96       	adiw	r24, 0x19	; 25
 8e8:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
					LCD_voidWriteString((u8*)"Scored!");
 8ec:	8d e8       	ldi	r24, 0x8D	; 141
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
 8f4:	8f e4       	ldi	r24, 0x4F	; 79
 8f6:	93 ec       	ldi	r25, 0xC3	; 195
 8f8:	01 97       	sbiw	r24, 0x01	; 1
 8fa:	f1 f7       	brne	.-4      	; 0x8f8 <__stack+0x99>
 8fc:	00 c0       	rjmp	.+0      	; 0x8fe <__stack+0x9f>
 8fe:	00 00       	nop
					_delay_ms(200);
					DIO_voidSetPinValue(DIO_PortC,DIO_PIN6, Low);
 900:	40 e0       	ldi	r20, 0x00	; 0
 902:	66 e0       	ldi	r22, 0x06	; 6
 904:	83 e0       	ldi	r24, 0x03	; 3
 906:	0e 94 b3 04 	call	0x966	; 0x966 <DIO_voidSetPinValue>
 90a:	9f ef       	ldi	r25, 0xFF	; 255
 90c:	20 e7       	ldi	r18, 0x70	; 112
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	91 50       	subi	r25, 0x01	; 1
 912:	20 40       	sbci	r18, 0x00	; 0
 914:	80 40       	sbci	r24, 0x00	; 0
 916:	e1 f7       	brne	.-8      	; 0x910 <__stack+0xb1>
 918:	00 c0       	rjmp	.+0      	; 0x91a <__stack+0xbb>
 91a:	00 00       	nop
					_delay_ms(800);
					if(player1Score == 3){
 91c:	13 30       	cpi	r17, 0x03	; 3
 91e:	89 f4       	brne	.+34     	; 0x942 <__stack+0xe3>
						LCD_voidSendCommand(LCD_ClearDisplay);
 920:	81 e0       	ldi	r24, 0x01	; 1
 922:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_voidSendCommand>
						LCD_voidGoToPosition(1, START + 5);
 926:	65 e8       	ldi	r22, 0x85	; 133
 928:	81 e0       	ldi	r24, 0x01	; 1
 92a:	0e 94 a3 02 	call	0x546	; 0x546 <LCD_voidGoToPosition>
						LCD_voidWriteString(player1);
 92e:	ce 01       	movw	r24, r28
 930:	49 96       	adiw	r24, 0x19	; 25
 932:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
						LCD_voidWriteString((u8*)"Wins!");
 936:	85 e9       	ldi	r24, 0x95	; 149
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	0e 94 09 02 	call	0x412	; 0x412 <LCD_voidWriteString>
						player1Score = 0;
						player2Score = 0;
 93e:	00 e0       	ldi	r16, 0x00	; 0
					if(player1Score == 3){
						LCD_voidSendCommand(LCD_ClearDisplay);
						LCD_voidGoToPosition(1, START + 5);
						LCD_voidWriteString(player1);
						LCD_voidWriteString((u8*)"Wins!");
						player1Score = 0;
 940:	10 e0       	ldi	r17, 0x00	; 0
 942:	9f e3       	ldi	r25, 0x3F	; 63
 944:	2d e0       	ldi	r18, 0x0D	; 13
 946:	83 e0       	ldi	r24, 0x03	; 3
 948:	91 50       	subi	r25, 0x01	; 1
 94a:	20 40       	sbci	r18, 0x00	; 0
 94c:	80 40       	sbci	r24, 0x00	; 0
 94e:	e1 f7       	brne	.-8      	; 0x948 <__stack+0xe9>
 950:	00 c0       	rjmp	.+0      	; 0x952 <__stack+0xf3>
 952:	00 00       	nop
					}
					_delay_ms(1000);
				}
			}
		}
		AdjustMovements();
 954:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <AdjustMovements>
 958:	83 e2       	ldi	r24, 0x23	; 35
 95a:	94 ef       	ldi	r25, 0xF4	; 244
 95c:	01 97       	sbiw	r24, 0x01	; 1
 95e:	f1 f7       	brne	.-4      	; 0x95c <__stack+0xfd>
 960:	00 c0       	rjmp	.+0      	; 0x962 <__stack+0x103>
 962:	00 00       	nop
 964:	f3 ce       	rjmp	.-538    	; 0x74c <main+0x94>

00000966 <DIO_voidSetPinValue>:
				break;
				case DIO_PortC:
				Toggle_Bit(DIO_PORTC,Local_PinNumber);
				break;
				case DIO_PortD:
				Toggle_Bit(DIO_PORTD,Local_PinNumber);
 966:	9f ef       	ldi	r25, 0xFF	; 255
 968:	98 0f       	add	r25, r24
 96a:	94 30       	cpi	r25, 0x04	; 4
 96c:	08 f0       	brcs	.+2      	; 0x970 <DIO_voidSetPinValue+0xa>
 96e:	78 c0       	rjmp	.+240    	; 0xa60 <DIO_voidSetPinValue+0xfa>
 970:	68 30       	cpi	r22, 0x08	; 8
 972:	08 f0       	brcs	.+2      	; 0x976 <DIO_voidSetPinValue+0x10>
 974:	75 c0       	rjmp	.+234    	; 0xa60 <DIO_voidSetPinValue+0xfa>
 976:	41 30       	cpi	r20, 0x01	; 1
 978:	b9 f5       	brne	.+110    	; 0x9e8 <DIO_voidSetPinValue+0x82>
 97a:	82 30       	cpi	r24, 0x02	; 2
 97c:	a1 f0       	breq	.+40     	; 0x9a6 <DIO_voidSetPinValue+0x40>
 97e:	18 f4       	brcc	.+6      	; 0x986 <DIO_voidSetPinValue+0x20>
 980:	81 30       	cpi	r24, 0x01	; 1
 982:	31 f0       	breq	.+12     	; 0x990 <DIO_voidSetPinValue+0x2a>
 984:	08 95       	ret
 986:	83 30       	cpi	r24, 0x03	; 3
 988:	c9 f0       	breq	.+50     	; 0x9bc <DIO_voidSetPinValue+0x56>
 98a:	84 30       	cpi	r24, 0x04	; 4
 98c:	11 f1       	breq	.+68     	; 0x9d2 <DIO_voidSetPinValue+0x6c>
 98e:	08 95       	ret
 990:	2b b3       	in	r18, 0x1b	; 27
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	02 c0       	rjmp	.+4      	; 0x99c <DIO_voidSetPinValue+0x36>
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	6a 95       	dec	r22
 99e:	e2 f7       	brpl	.-8      	; 0x998 <DIO_voidSetPinValue+0x32>
 9a0:	82 2b       	or	r24, r18
 9a2:	8b bb       	out	0x1b, r24	; 27
 9a4:	08 95       	ret
 9a6:	28 b3       	in	r18, 0x18	; 24
 9a8:	81 e0       	ldi	r24, 0x01	; 1
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <DIO_voidSetPinValue+0x4c>
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	6a 95       	dec	r22
 9b4:	e2 f7       	brpl	.-8      	; 0x9ae <DIO_voidSetPinValue+0x48>
 9b6:	82 2b       	or	r24, r18
 9b8:	88 bb       	out	0x18, r24	; 24
 9ba:	08 95       	ret
 9bc:	25 b3       	in	r18, 0x15	; 21
 9be:	81 e0       	ldi	r24, 0x01	; 1
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	02 c0       	rjmp	.+4      	; 0x9c8 <DIO_voidSetPinValue+0x62>
 9c4:	88 0f       	add	r24, r24
 9c6:	99 1f       	adc	r25, r25
 9c8:	6a 95       	dec	r22
 9ca:	e2 f7       	brpl	.-8      	; 0x9c4 <DIO_voidSetPinValue+0x5e>
 9cc:	82 2b       	or	r24, r18
 9ce:	85 bb       	out	0x15, r24	; 21
 9d0:	08 95       	ret
 9d2:	22 b3       	in	r18, 0x12	; 18
 9d4:	81 e0       	ldi	r24, 0x01	; 1
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <DIO_voidSetPinValue+0x78>
 9da:	88 0f       	add	r24, r24
 9dc:	99 1f       	adc	r25, r25
 9de:	6a 95       	dec	r22
 9e0:	e2 f7       	brpl	.-8      	; 0x9da <DIO_voidSetPinValue+0x74>
 9e2:	82 2b       	or	r24, r18
 9e4:	82 bb       	out	0x12, r24	; 18
 9e6:	08 95       	ret
 9e8:	41 11       	cpse	r20, r1
 9ea:	3a c0       	rjmp	.+116    	; 0xa60 <DIO_voidSetPinValue+0xfa>
 9ec:	82 30       	cpi	r24, 0x02	; 2
 9ee:	a9 f0       	breq	.+42     	; 0xa1a <DIO_voidSetPinValue+0xb4>
 9f0:	18 f4       	brcc	.+6      	; 0x9f8 <DIO_voidSetPinValue+0x92>
 9f2:	81 30       	cpi	r24, 0x01	; 1
 9f4:	31 f0       	breq	.+12     	; 0xa02 <DIO_voidSetPinValue+0x9c>
 9f6:	08 95       	ret
 9f8:	83 30       	cpi	r24, 0x03	; 3
 9fa:	d9 f0       	breq	.+54     	; 0xa32 <DIO_voidSetPinValue+0xcc>
 9fc:	84 30       	cpi	r24, 0x04	; 4
 9fe:	29 f1       	breq	.+74     	; 0xa4a <DIO_voidSetPinValue+0xe4>
 a00:	08 95       	ret
 a02:	2b b3       	in	r18, 0x1b	; 27
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <DIO_voidSetPinValue+0xa8>
 a0a:	88 0f       	add	r24, r24
 a0c:	99 1f       	adc	r25, r25
 a0e:	6a 95       	dec	r22
 a10:	e2 f7       	brpl	.-8      	; 0xa0a <DIO_voidSetPinValue+0xa4>
 a12:	80 95       	com	r24
 a14:	82 23       	and	r24, r18
 a16:	8b bb       	out	0x1b, r24	; 27
 a18:	08 95       	ret
 a1a:	28 b3       	in	r18, 0x18	; 24
 a1c:	81 e0       	ldi	r24, 0x01	; 1
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <DIO_voidSetPinValue+0xc0>
 a22:	88 0f       	add	r24, r24
 a24:	99 1f       	adc	r25, r25
 a26:	6a 95       	dec	r22
 a28:	e2 f7       	brpl	.-8      	; 0xa22 <DIO_voidSetPinValue+0xbc>
 a2a:	80 95       	com	r24
 a2c:	82 23       	and	r24, r18
 a2e:	88 bb       	out	0x18, r24	; 24
 a30:	08 95       	ret
 a32:	25 b3       	in	r18, 0x15	; 21
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <DIO_voidSetPinValue+0xd8>
 a3a:	88 0f       	add	r24, r24
 a3c:	99 1f       	adc	r25, r25
 a3e:	6a 95       	dec	r22
 a40:	e2 f7       	brpl	.-8      	; 0xa3a <DIO_voidSetPinValue+0xd4>
 a42:	80 95       	com	r24
 a44:	82 23       	and	r24, r18
 a46:	85 bb       	out	0x15, r24	; 21
 a48:	08 95       	ret
 a4a:	22 b3       	in	r18, 0x12	; 18
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <DIO_voidSetPinValue+0xf0>
 a52:	88 0f       	add	r24, r24
 a54:	99 1f       	adc	r25, r25
 a56:	6a 95       	dec	r22
 a58:	e2 f7       	brpl	.-8      	; 0xa52 <DIO_voidSetPinValue+0xec>
 a5a:	80 95       	com	r24
 a5c:	82 23       	and	r24, r18
 a5e:	82 bb       	out	0x12, r24	; 18
 a60:	08 95       	ret

00000a62 <DIO_u8GetPinValue>:
 a62:	9f ef       	ldi	r25, 0xFF	; 255
 a64:	98 0f       	add	r25, r24
 a66:	94 30       	cpi	r25, 0x04	; 4
 a68:	88 f5       	brcc	.+98     	; 0xacc <DIO_u8GetPinValue+0x6a>
 a6a:	68 30       	cpi	r22, 0x08	; 8
 a6c:	88 f5       	brcc	.+98     	; 0xad0 <DIO_u8GetPinValue+0x6e>
 a6e:	82 30       	cpi	r24, 0x02	; 2
 a70:	91 f0       	breq	.+36     	; 0xa96 <DIO_u8GetPinValue+0x34>
 a72:	18 f4       	brcc	.+6      	; 0xa7a <DIO_u8GetPinValue+0x18>
 a74:	81 30       	cpi	r24, 0x01	; 1
 a76:	31 f0       	breq	.+12     	; 0xa84 <DIO_u8GetPinValue+0x22>
 a78:	2d c0       	rjmp	.+90     	; 0xad4 <DIO_u8GetPinValue+0x72>
 a7a:	83 30       	cpi	r24, 0x03	; 3
 a7c:	a9 f0       	breq	.+42     	; 0xaa8 <DIO_u8GetPinValue+0x46>
 a7e:	84 30       	cpi	r24, 0x04	; 4
 a80:	e1 f0       	breq	.+56     	; 0xaba <DIO_u8GetPinValue+0x58>
 a82:	28 c0       	rjmp	.+80     	; 0xad4 <DIO_u8GetPinValue+0x72>
 a84:	89 b3       	in	r24, 0x19	; 25
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	02 c0       	rjmp	.+4      	; 0xa8e <DIO_u8GetPinValue+0x2c>
 a8a:	95 95       	asr	r25
 a8c:	87 95       	ror	r24
 a8e:	6a 95       	dec	r22
 a90:	e2 f7       	brpl	.-8      	; 0xa8a <DIO_u8GetPinValue+0x28>
 a92:	81 70       	andi	r24, 0x01	; 1
 a94:	08 95       	ret
 a96:	86 b3       	in	r24, 0x16	; 22
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	02 c0       	rjmp	.+4      	; 0xaa0 <DIO_u8GetPinValue+0x3e>
 a9c:	95 95       	asr	r25
 a9e:	87 95       	ror	r24
 aa0:	6a 95       	dec	r22
 aa2:	e2 f7       	brpl	.-8      	; 0xa9c <DIO_u8GetPinValue+0x3a>
 aa4:	81 70       	andi	r24, 0x01	; 1
 aa6:	08 95       	ret
 aa8:	83 b3       	in	r24, 0x13	; 19
 aaa:	90 e0       	ldi	r25, 0x00	; 0
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <DIO_u8GetPinValue+0x50>
 aae:	95 95       	asr	r25
 ab0:	87 95       	ror	r24
 ab2:	6a 95       	dec	r22
 ab4:	e2 f7       	brpl	.-8      	; 0xaae <DIO_u8GetPinValue+0x4c>
 ab6:	81 70       	andi	r24, 0x01	; 1
 ab8:	08 95       	ret
 aba:	80 b3       	in	r24, 0x10	; 16
 abc:	90 e0       	ldi	r25, 0x00	; 0
 abe:	02 c0       	rjmp	.+4      	; 0xac4 <DIO_u8GetPinValue+0x62>
 ac0:	95 95       	asr	r25
 ac2:	87 95       	ror	r24
 ac4:	6a 95       	dec	r22
 ac6:	e2 f7       	brpl	.-8      	; 0xac0 <DIO_u8GetPinValue+0x5e>
 ac8:	81 70       	andi	r24, 0x01	; 1
 aca:	08 95       	ret
 acc:	8f ef       	ldi	r24, 0xFF	; 255
 ace:	08 95       	ret
 ad0:	8f ef       	ldi	r24, 0xFF	; 255
 ad2:	08 95       	ret
 ad4:	8f ef       	ldi	r24, 0xFF	; 255
 ad6:	08 95       	ret

00000ad8 <DIO_voidSetPortDir>:
		}
	}
}

void DIO_voidSetPortDir(u8 Local_PortName,u8 Local_PortDir){
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
 ad8:	9f ef       	ldi	r25, 0xFF	; 255
 ada:	98 0f       	add	r25, r24
 adc:	94 30       	cpi	r25, 0x04	; 4
 ade:	90 f4       	brcc	.+36     	; 0xb04 <DIO_voidSetPortDir+0x2c>
		switch(Local_PortName){
 ae0:	82 30       	cpi	r24, 0x02	; 2
 ae2:	59 f0       	breq	.+22     	; 0xafa <DIO_voidSetPortDir+0x22>
 ae4:	18 f4       	brcc	.+6      	; 0xaec <DIO_voidSetPortDir+0x14>
 ae6:	81 30       	cpi	r24, 0x01	; 1
 ae8:	31 f0       	breq	.+12     	; 0xaf6 <DIO_voidSetPortDir+0x1e>
 aea:	08 95       	ret
 aec:	83 30       	cpi	r24, 0x03	; 3
 aee:	39 f0       	breq	.+14     	; 0xafe <DIO_voidSetPortDir+0x26>
 af0:	84 30       	cpi	r24, 0x04	; 4
 af2:	39 f0       	breq	.+14     	; 0xb02 <DIO_voidSetPortDir+0x2a>
 af4:	08 95       	ret
			case DIO_PortA:
			DIO_DDRA = Local_PortDir;
 af6:	6a bb       	out	0x1a, r22	; 26
			break;
 af8:	08 95       	ret
			case DIO_PortB:
			DIO_DDRB = Local_PortDir;
 afa:	67 bb       	out	0x17, r22	; 23
			break;
 afc:	08 95       	ret
			case DIO_PortC:
			DIO_DDRC = Local_PortDir;
 afe:	64 bb       	out	0x14, r22	; 20
			break;
 b00:	08 95       	ret
			case DIO_PortD:
			DIO_DDRD = Local_PortDir;
 b02:	61 bb       	out	0x11, r22	; 17
 b04:	08 95       	ret

00000b06 <DIO_voidInit>:
#include "../lib/bit_math.h"
#include "dio_interface.h"
#include "dio_register.h"

void DIO_voidInit(){
	DIO_voidSetPortDir(DIO_PortA,concate(DIO_PINA7, DIO_PINA6, DIO_PINA5, DIO_PINA4, DIO_PINA3, DIO_PINA2, DIO_PINA1, DIO_PINA0));
 b06:	6f ef       	ldi	r22, 0xFF	; 255
 b08:	81 e0       	ldi	r24, 0x01	; 1
 b0a:	0e 94 6c 05 	call	0xad8	; 0xad8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortB,concate(DIO_PINB7, DIO_PINB6, DIO_PINB5, DIO_PINB4, DIO_PINB3, DIO_PINB2, DIO_PINB1, DIO_PINB0));
 b0e:	6f ef       	ldi	r22, 0xFF	; 255
 b10:	82 e0       	ldi	r24, 0x02	; 2
 b12:	0e 94 6c 05 	call	0xad8	; 0xad8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortC,concate(DIO_PINC7, DIO_PINC6, DIO_PINC5, DIO_PINC4, DIO_PINC3, DIO_PINC2, DIO_PINC1, DIO_PINC0));
 b16:	60 e4       	ldi	r22, 0x40	; 64
 b18:	83 e0       	ldi	r24, 0x03	; 3
 b1a:	0e 94 6c 05 	call	0xad8	; 0xad8 <DIO_voidSetPortDir>
	DIO_voidSetPortDir(DIO_PortD,concate(DIO_PIND7, DIO_PIND6, DIO_PIND5, DIO_PIND4, DIO_PIND3, DIO_PIND2, DIO_PIND1, DIO_PIND0));
 b1e:	6f ef       	ldi	r22, 0xFF	; 255
 b20:	84 e0       	ldi	r24, 0x04	; 4
 b22:	0e 94 6c 05 	call	0xad8	; 0xad8 <DIO_voidSetPortDir>
 b26:	08 95       	ret

00000b28 <DIO_voidSetPortValue>:
		}
	}
}

void DIO_voidSetPortValue(u8 Local_PortName,u8 Local_PortValue){
	if(Local_PortName <= DIO_PortD && Local_PortName >= DIO_PortA){
 b28:	9f ef       	ldi	r25, 0xFF	; 255
 b2a:	98 0f       	add	r25, r24
 b2c:	94 30       	cpi	r25, 0x04	; 4
 b2e:	90 f4       	brcc	.+36     	; 0xb54 <DIO_voidSetPortValue+0x2c>
		switch(Local_PortName){
 b30:	82 30       	cpi	r24, 0x02	; 2
 b32:	59 f0       	breq	.+22     	; 0xb4a <DIO_voidSetPortValue+0x22>
 b34:	18 f4       	brcc	.+6      	; 0xb3c <DIO_voidSetPortValue+0x14>
 b36:	81 30       	cpi	r24, 0x01	; 1
 b38:	31 f0       	breq	.+12     	; 0xb46 <DIO_voidSetPortValue+0x1e>
 b3a:	08 95       	ret
 b3c:	83 30       	cpi	r24, 0x03	; 3
 b3e:	39 f0       	breq	.+14     	; 0xb4e <DIO_voidSetPortValue+0x26>
 b40:	84 30       	cpi	r24, 0x04	; 4
 b42:	39 f0       	breq	.+14     	; 0xb52 <DIO_voidSetPortValue+0x2a>
 b44:	08 95       	ret
			case DIO_PortA:
			DIO_PORTA = Local_PortValue;
 b46:	6b bb       	out	0x1b, r22	; 27
			break;
 b48:	08 95       	ret
			case DIO_PortB:
			DIO_PORTB = Local_PortValue;
 b4a:	68 bb       	out	0x18, r22	; 24
			break;
 b4c:	08 95       	ret
			case DIO_PortC:
			DIO_PORTC = Local_PortValue;
 b4e:	65 bb       	out	0x15, r22	; 21
			break;
 b50:	08 95       	ret
			case DIO_PortD:
			DIO_PORTD = Local_PortValue;
 b52:	62 bb       	out	0x12, r22	; 18
 b54:	08 95       	ret

00000b56 <__divmodsi4>:
 b56:	05 2e       	mov	r0, r21
 b58:	97 fb       	bst	r25, 7
 b5a:	1e f4       	brtc	.+6      	; 0xb62 <__divmodsi4+0xc>
 b5c:	00 94       	com	r0
 b5e:	0e 94 c2 05 	call	0xb84	; 0xb84 <__negsi2>
 b62:	57 fd       	sbrc	r21, 7
 b64:	07 d0       	rcall	.+14     	; 0xb74 <__divmodsi4_neg2>
 b66:	0e 94 ca 05 	call	0xb94	; 0xb94 <__udivmodsi4>
 b6a:	07 fc       	sbrc	r0, 7
 b6c:	03 d0       	rcall	.+6      	; 0xb74 <__divmodsi4_neg2>
 b6e:	4e f4       	brtc	.+18     	; 0xb82 <__divmodsi4_exit>
 b70:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__negsi2>

00000b74 <__divmodsi4_neg2>:
 b74:	50 95       	com	r21
 b76:	40 95       	com	r20
 b78:	30 95       	com	r19
 b7a:	21 95       	neg	r18
 b7c:	3f 4f       	sbci	r19, 0xFF	; 255
 b7e:	4f 4f       	sbci	r20, 0xFF	; 255
 b80:	5f 4f       	sbci	r21, 0xFF	; 255

00000b82 <__divmodsi4_exit>:
 b82:	08 95       	ret

00000b84 <__negsi2>:
 b84:	90 95       	com	r25
 b86:	80 95       	com	r24
 b88:	70 95       	com	r23
 b8a:	61 95       	neg	r22
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	8f 4f       	sbci	r24, 0xFF	; 255
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	08 95       	ret

00000b94 <__udivmodsi4>:
 b94:	a1 e2       	ldi	r26, 0x21	; 33
 b96:	1a 2e       	mov	r1, r26
 b98:	aa 1b       	sub	r26, r26
 b9a:	bb 1b       	sub	r27, r27
 b9c:	fd 01       	movw	r30, r26
 b9e:	0d c0       	rjmp	.+26     	; 0xbba <__udivmodsi4_ep>

00000ba0 <__udivmodsi4_loop>:
 ba0:	aa 1f       	adc	r26, r26
 ba2:	bb 1f       	adc	r27, r27
 ba4:	ee 1f       	adc	r30, r30
 ba6:	ff 1f       	adc	r31, r31
 ba8:	a2 17       	cp	r26, r18
 baa:	b3 07       	cpc	r27, r19
 bac:	e4 07       	cpc	r30, r20
 bae:	f5 07       	cpc	r31, r21
 bb0:	20 f0       	brcs	.+8      	; 0xbba <__udivmodsi4_ep>
 bb2:	a2 1b       	sub	r26, r18
 bb4:	b3 0b       	sbc	r27, r19
 bb6:	e4 0b       	sbc	r30, r20
 bb8:	f5 0b       	sbc	r31, r21

00000bba <__udivmodsi4_ep>:
 bba:	66 1f       	adc	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	99 1f       	adc	r25, r25
 bc2:	1a 94       	dec	r1
 bc4:	69 f7       	brne	.-38     	; 0xba0 <__udivmodsi4_loop>
 bc6:	60 95       	com	r22
 bc8:	70 95       	com	r23
 bca:	80 95       	com	r24
 bcc:	90 95       	com	r25
 bce:	9b 01       	movw	r18, r22
 bd0:	ac 01       	movw	r20, r24
 bd2:	bd 01       	movw	r22, r26
 bd4:	cf 01       	movw	r24, r30
 bd6:	08 95       	ret

00000bd8 <_exit>:
 bd8:	f8 94       	cli

00000bda <__stop_program>:
 bda:	ff cf       	rjmp	.-2      	; 0xbda <__stop_program>
